// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.
package getstream

type GetAppRequest struct {
}

type UpdateAppRequest struct {
	AsyncUrlEnrichEnabled          *bool                           `json:"async_url_enrich_enabled"`
	AutoTranslationEnabled         *bool                           `json:"auto_translation_enabled"`
	BeforeMessageSendHookUrl       *string                         `json:"before_message_send_hook_url"`
	CdnExpirationSeconds           *int                            `json:"cdn_expiration_seconds"`
	ChannelHideMembersOnly         *bool                           `json:"channel_hide_members_only"`
	CustomActionHandlerUrl         *string                         `json:"custom_action_handler_url"`
	DisableAuthChecks              *bool                           `json:"disable_auth_checks"`
	DisablePermissionsChecks       *bool                           `json:"disable_permissions_checks"`
	EnforceUniqueUsernames         *string                         `json:"enforce_unique_usernames"`
	FeedsModerationEnabled         *bool                           `json:"feeds_moderation_enabled"`
	FeedsV2Region                  *string                         `json:"feeds_v2_region"`
	GuestUserCreationDisabled      *bool                           `json:"guest_user_creation_disabled"`
	ImageModerationEnabled         *bool                           `json:"image_moderation_enabled"`
	MaxAggregatedActivitiesLength  *int                            `json:"max_aggregated_activities_length"`
	MigratePermissionsToV2         *bool                           `json:"migrate_permissions_to_v2"`
	ModerationEnabled              *bool                           `json:"moderation_enabled"`
	ModerationWebhookUrl           *string                         `json:"moderation_webhook_url"`
	MultiTenantEnabled             *bool                           `json:"multi_tenant_enabled"`
	PermissionVersion              *string                         `json:"permission_version"`
	RemindersInterval              *int                            `json:"reminders_interval"`
	RemindersMaxMembers            *int                            `json:"reminders_max_members"`
	RevokeTokensIssuedBefore       *Timestamp                      `json:"revoke_tokens_issued_before"`
	SnsKey                         *string                         `json:"sns_key"`
	SnsSecret                      *string                         `json:"sns_secret"`
	SnsTopicArn                    *string                         `json:"sns_topic_arn"`
	SqsKey                         *string                         `json:"sqs_key"`
	SqsSecret                      *string                         `json:"sqs_secret"`
	SqsUrl                         *string                         `json:"sqs_url"`
	UserResponseTimeEnabled        *bool                           `json:"user_response_time_enabled"`
	WebhookUrl                     *string                         `json:"webhook_url"`
	AllowedFlagReasons             []string                        `json:"allowed_flag_reasons"`
	EventHooks                     []EventHook                     `json:"event_hooks"`
	ImageModerationBlockLabels     []string                        `json:"image_moderation_block_labels"`
	ImageModerationLabels          []string                        `json:"image_moderation_labels"`
	UserSearchDisallowedRoles      []string                        `json:"user_search_disallowed_roles"`
	WebhookEvents                  []string                        `json:"webhook_events"`
	ApnConfig                      *APNConfig                      `json:"apn_config"`
	AsyncModerationConfig          *AsyncModerationConfiguration   `json:"async_moderation_config"`
	DatadogInfo                    *DataDogInfo                    `json:"datadog_info"`
	FileUploadConfig               *FileUploadConfig               `json:"file_upload_config"`
	FirebaseConfig                 *FirebaseConfig                 `json:"firebase_config"`
	Grants                         map[string][]string             `json:"grants"`
	HuaweiConfig                   *HuaweiConfig                   `json:"huawei_config"`
	ImageUploadConfig              *FileUploadConfig               `json:"image_upload_config"`
	ModerationDashboardPreferences *ModerationDashboardPreferences `json:"moderation_dashboard_preferences"`
	PushConfig                     *PushConfig                     `json:"push_config"`
	XiaomiConfig                   *XiaomiConfig                   `json:"xiaomi_config"`
}

type ListBlockListsRequest struct {
	Team *string `json:"-" query:"team"`
}

type CreateBlockListRequest struct {
	Name                 string   `json:"name"`
	Words                []string `json:"words"`
	IsLeetCheckEnabled   *bool    `json:"is_leet_check_enabled"`
	IsPluralCheckEnabled *bool    `json:"is_plural_check_enabled"`
	Team                 *string  `json:"team"`
	Type                 *string  `json:"type"`
}

type DeleteBlockListRequest struct {
	Team *string `json:"-" query:"team"`
}

type GetBlockListRequest struct {
	Team *string `json:"-" query:"team"`
}

type UpdateBlockListRequest struct {
	IsLeetCheckEnabled   *bool    `json:"is_leet_check_enabled"`
	IsPluralCheckEnabled *bool    `json:"is_plural_check_enabled"`
	Team                 *string  `json:"team"`
	Words                []string `json:"words"`
}

type QueryCampaignsRequest struct {
	Limit     *int               `json:"limit"`
	Next      *string            `json:"next"`
	Prev      *string            `json:"prev"`
	UserLimit *int               `json:"user_limit"`
	Sort      []SortParamRequest `json:"sort"`
	Filter    map[string]any     `json:"filter"`
}

type GetCampaignRequest struct {
	Prev  *string `json:"-" query:"prev"`
	Next  *string `json:"-" query:"next"`
	Limit *int    `json:"-" query:"limit"`
}

type StartCampaignRequest struct {
	ScheduledFor *Timestamp `json:"scheduled_for"`
	StopAt       *Timestamp `json:"stop_at"`
}

type ScheduleCampaignRequest struct {
}

type QueryChannelsRequest struct {
	Limit            *int               `json:"limit"`
	MemberLimit      *int               `json:"member_limit"`
	MessageLimit     *int               `json:"message_limit"`
	Offset           *int               `json:"offset"`
	State            *bool              `json:"state"`
	UserID           *string            `json:"user_id"`
	Sort             []SortParamRequest `json:"sort"`
	FilterConditions map[string]any     `json:"filter_conditions"`
	User             *UserRequest       `json:"user"`
}

type DeleteChannelsRequest struct {
	Cids       []string `json:"cids"`
	HardDelete *bool    `json:"hard_delete"`
}

type MarkChannelsReadRequest struct {
	UserID        *string           `json:"user_id"`
	ReadByChannel map[string]string `json:"read_by_channel"`
	User          *UserRequest      `json:"user"`
}

type GetOrCreateDistinctChannelRequest struct {
	HideForCreator     *bool                    `json:"hide_for_creator"`
	State              *bool                    `json:"state"`
	ThreadUnreadCounts *bool                    `json:"thread_unread_counts"`
	Data               *ChannelInput            `json:"data"`
	Members            *PaginationParams        `json:"members"`
	Messages           *MessagePaginationParams `json:"messages"`
	Watchers           *PaginationParams        `json:"watchers"`
}

type DeleteChannelRequest struct {
	HardDelete *bool `json:"-" query:"hard_delete"`
}

type UpdateChannelPartialRequest struct {
	UserID *string        `json:"user_id"`
	Unset  []string       `json:"unset"`
	Set    map[string]any `json:"set"`
	User   *UserRequest   `json:"user"`
}

type UpdateChannelRequest struct {
	AcceptInvite     *bool           `json:"accept_invite"`
	Cooldown         *int            `json:"cooldown"`
	HideHistory      *bool           `json:"hide_history"`
	RejectInvite     *bool           `json:"reject_invite"`
	SkipPush         *bool           `json:"skip_push"`
	UserID           *string         `json:"user_id"`
	AddMembers       []ChannelMember `json:"add_members"`
	AddModerators    []string        `json:"add_moderators"`
	AssignRoles      []ChannelMember `json:"assign_roles"`
	DemoteModerators []string        `json:"demote_moderators"`
	Invites          []ChannelMember `json:"invites"`
	RemoveMembers    []string        `json:"remove_members"`
	Data             *ChannelInput   `json:"data"`
	Message          *MessageRequest `json:"message"`
	User             *UserRequest    `json:"user"`
}

type DeleteDraftRequest struct {
	ParentID *string `json:"-" query:"parent_id"`
	UserID   *string `json:"-" query:"user_id"`
}

type GetDraftRequest struct {
	ParentID *string `json:"-" query:"parent_id"`
	UserID   *string `json:"-" query:"user_id"`
}

type SendEventRequest struct {
	Event EventRequest `json:"event"`
}

type DeleteChannelFileRequest struct {
	Url *string `json:"-" query:"url"`
}

type UploadChannelFileRequest struct {
	File *string     `json:"file"`
	User *OnlyUserID `json:"user"`
}

type HideChannelRequest struct {
	ClearHistory *bool        `json:"clear_history"`
	UserID       *string      `json:"user_id"`
	User         *UserRequest `json:"user"`
}

type DeleteChannelImageRequest struct {
	Url *string `json:"-" query:"url"`
}

type UploadChannelImageRequest struct {
	File        *string     `json:"file"`
	UploadSizes []ImageSize `json:"upload_sizes"`
	User        *OnlyUserID `json:"user"`
}

type UpdateMemberPartialRequest struct {
	UserID *string        `json:"-" query:"user_id"`
	Unset  []string       `json:"unset"`
	Set    map[string]any `json:"set"`
}

type SendMessageRequest struct {
	Message                MessageRequest    `json:"message"`
	ForceModeration        *bool             `json:"force_moderation"`
	KeepChannelHidden      *bool             `json:"keep_channel_hidden"`
	Pending                *bool             `json:"pending"`
	SkipEnrichUrl          *bool             `json:"skip_enrich_url"`
	SkipPush               *bool             `json:"skip_push"`
	PendingMessageMetadata map[string]string `json:"pending_message_metadata"`
}

type GetManyMessagesRequest struct {
	Ids []string `json:"-" query:"ids"`
}

type GetOrCreateChannelRequest struct {
	HideForCreator     *bool                    `json:"hide_for_creator"`
	State              *bool                    `json:"state"`
	ThreadUnreadCounts *bool                    `json:"thread_unread_counts"`
	Data               *ChannelInput            `json:"data"`
	Members            *PaginationParams        `json:"members"`
	Messages           *MessagePaginationParams `json:"messages"`
	Watchers           *PaginationParams        `json:"watchers"`
}

type MarkReadRequest struct {
	MessageID *string      `json:"message_id"`
	ThreadID  *string      `json:"thread_id"`
	UserID    *string      `json:"user_id"`
	User      *UserRequest `json:"user"`
}

type ShowChannelRequest struct {
	UserID *string      `json:"user_id"`
	User   *UserRequest `json:"user"`
}

type TruncateChannelRequest struct {
	HardDelete  *bool           `json:"hard_delete"`
	SkipPush    *bool           `json:"skip_push"`
	TruncatedAt *Timestamp      `json:"truncated_at"`
	UserID      *string         `json:"user_id"`
	MemberIds   []string        `json:"member_ids"`
	Message     *MessageRequest `json:"message"`
	User        *UserRequest    `json:"user"`
}

type MarkUnreadRequest struct {
	MessageID *string      `json:"message_id"`
	ThreadID  *string      `json:"thread_id"`
	UserID    *string      `json:"user_id"`
	User      *UserRequest `json:"user"`
}

type ListChannelTypesRequest struct {
}

type CreateChannelTypeRequest struct {
	Automod                        string              `json:"automod"`
	AutomodBehavior                string              `json:"automod_behavior"`
	MaxMessageLength               int                 `json:"max_message_length"`
	Name                           string              `json:"name"`
	Blocklist                      *string             `json:"blocklist"`
	BlocklistBehavior              *string             `json:"blocklist_behavior"`
	ConnectEvents                  *bool               `json:"connect_events"`
	CustomEvents                   *bool               `json:"custom_events"`
	MarkMessagesPending            *bool               `json:"mark_messages_pending"`
	MessageRetention               *string             `json:"message_retention"`
	Mutes                          *bool               `json:"mutes"`
	PartitionSize                  *int                `json:"partition_size"`
	PartitionTtl                   *string             `json:"partition_ttl"`
	Polls                          *bool               `json:"polls"`
	PushNotifications              *bool               `json:"push_notifications"`
	Reactions                      *bool               `json:"reactions"`
	ReadEvents                     *bool               `json:"read_events"`
	Replies                        *bool               `json:"replies"`
	Search                         *bool               `json:"search"`
	SharedLocations                *bool               `json:"shared_locations"`
	SkipLastMsgUpdateForSystemMsgs *bool               `json:"skip_last_msg_update_for_system_msgs"`
	TypingEvents                   *bool               `json:"typing_events"`
	Uploads                        *bool               `json:"uploads"`
	UrlEnrichment                  *bool               `json:"url_enrichment"`
	UserMessageReminders           *bool               `json:"user_message_reminders"`
	Blocklists                     []BlockListOptions  `json:"blocklists"`
	Commands                       []string            `json:"commands"`
	Permissions                    []PolicyRequest     `json:"permissions"`
	Grants                         map[string][]string `json:"grants"`
}

type DeleteChannelTypeRequest struct {
}

type GetChannelTypeRequest struct {
}

type UpdateChannelTypeRequest struct {
	Automod                        string              `json:"automod"`
	AutomodBehavior                string              `json:"automod_behavior"`
	MaxMessageLength               int                 `json:"max_message_length"`
	Blocklist                      *string             `json:"blocklist"`
	BlocklistBehavior              *string             `json:"blocklist_behavior"`
	ConnectEvents                  *bool               `json:"connect_events"`
	CountMessages                  *bool               `json:"count_messages"`
	CustomEvents                   *bool               `json:"custom_events"`
	MarkMessagesPending            *bool               `json:"mark_messages_pending"`
	Mutes                          *bool               `json:"mutes"`
	PartitionSize                  *int                `json:"partition_size"`
	PartitionTtl                   *string             `json:"partition_ttl"`
	Polls                          *bool               `json:"polls"`
	PushNotifications              *bool               `json:"push_notifications"`
	Quotes                         *bool               `json:"quotes"`
	Reactions                      *bool               `json:"reactions"`
	ReadEvents                     *bool               `json:"read_events"`
	Reminders                      *bool               `json:"reminders"`
	Replies                        *bool               `json:"replies"`
	Search                         *bool               `json:"search"`
	SharedLocations                *bool               `json:"shared_locations"`
	SkipLastMsgUpdateForSystemMsgs *bool               `json:"skip_last_msg_update_for_system_msgs"`
	TypingEvents                   *bool               `json:"typing_events"`
	Uploads                        *bool               `json:"uploads"`
	UrlEnrichment                  *bool               `json:"url_enrichment"`
	UserMessageReminders           *bool               `json:"user_message_reminders"`
	AllowedFlagReasons             []string            `json:"allowed_flag_reasons"`
	Blocklists                     []BlockListOptions  `json:"blocklists"`
	Commands                       []string            `json:"commands"`
	Permissions                    []PolicyRequest     `json:"permissions"`
	AutomodThresholds              *Thresholds         `json:"automod_thresholds"`
	Grants                         map[string][]string `json:"grants"`
}

type ListCommandsRequest struct {
}

type CreateCommandRequest struct {
	Description string  `json:"description"`
	Name        string  `json:"name"`
	Args        *string `json:"args"`
	Set         *string `json:"set"`
}

type DeleteCommandRequest struct {
}

type GetCommandRequest struct {
}

type UpdateCommandRequest struct {
	Description string  `json:"description"`
	Args        *string `json:"args"`
	Set         *string `json:"set"`
}

type QueryDraftsRequest struct {
	Limit  *int               `json:"limit"`
	Next   *string            `json:"next"`
	Prev   *string            `json:"prev"`
	UserID *string            `json:"user_id"`
	Sort   []SortParamRequest `json:"sort"`
	Filter map[string]any     `json:"filter"`
	User   *UserRequest       `json:"user"`
}

type ExportChannelsRequest struct {
	Channels                   []ChannelExport `json:"channels"`
	ClearDeletedMessageText    *bool           `json:"clear_deleted_message_text"`
	ExportUsers                *bool           `json:"export_users"`
	IncludeSoftDeletedChannels *bool           `json:"include_soft_deleted_channels"`
	IncludeTruncatedMessages   *bool           `json:"include_truncated_messages"`
	Version                    *string         `json:"version"`
}

type QueryMembersRequest struct {
	Payload *QueryMembersPayload `json:"-" query:"payload"`
}

type QueryMessageHistoryRequest struct {
	Filter map[string]any     `json:"filter"`
	Limit  *int               `json:"limit"`
	Next   *string            `json:"next"`
	Prev   *string            `json:"prev"`
	Sort   []SortParamRequest `json:"sort"`
}

type DeleteMessageRequest struct {
	Hard        *bool   `json:"-" query:"hard"`
	DeletedBy   *string `json:"-" query:"deleted_by"`
	DeleteForMe *bool   `json:"-" query:"delete_for_me"`
}

type GetMessageRequest struct {
	ShowDeletedMessage *bool `json:"-" query:"show_deleted_message"`
}

type UpdateMessageRequest struct {
	Message       MessageRequest `json:"message"`
	SkipEnrichUrl *bool          `json:"skip_enrich_url"`
	SkipPush      *bool          `json:"skip_push"`
}

type UpdateMessagePartialRequest struct {
	SkipEnrichUrl *bool          `json:"skip_enrich_url"`
	UserID        *string        `json:"user_id"`
	Unset         []string       `json:"unset"`
	Set           map[string]any `json:"set"`
	User          *UserRequest   `json:"user"`
}

type RunMessageActionRequest struct {
	FormData map[string]string `json:"form_data"`
	UserID   *string           `json:"user_id"`
	User     *UserRequest      `json:"user"`
}

type CommitMessageRequest struct {
}

type EphemeralMessageUpdateRequest struct {
	SkipEnrichUrl *bool          `json:"skip_enrich_url"`
	UserID        *string        `json:"user_id"`
	Unset         []string       `json:"unset"`
	Set           map[string]any `json:"set"`
	User          *UserRequest   `json:"user"`
}

type SendReactionRequest struct {
	Reaction      ReactionRequest `json:"reaction"`
	EnforceUnique *bool           `json:"enforce_unique"`
	SkipPush      *bool           `json:"skip_push"`
}

type DeleteReactionRequest struct {
	UserID *string `json:"-" query:"user_id"`
}

type GetReactionsRequest struct {
	Limit  *int `json:"-" query:"limit"`
	Offset *int `json:"-" query:"offset"`
}

type QueryReactionsRequest struct {
	Limit  *int               `json:"limit"`
	Next   *string            `json:"next"`
	Prev   *string            `json:"prev"`
	UserID *string            `json:"user_id"`
	Sort   []SortParamRequest `json:"sort"`
	Filter map[string]any     `json:"filter"`
	User   *UserRequest       `json:"user"`
}

type TranslateMessageRequest struct {
	Language string `json:"language"`
}

type UndeleteMessageRequest struct {
	Message       MessageRequest `json:"message"`
	SkipEnrichUrl *bool          `json:"skip_enrich_url"`
	SkipPush      *bool          `json:"skip_push"`
}

type CastPollVoteRequest struct {
	UserID *string      `json:"user_id"`
	User   *UserRequest `json:"user"`
	Vote   *VoteData    `json:"vote"`
}

type DeletePollVoteRequest struct {
	UserID *string `json:"-" query:"user_id"`
}

type DeleteReminderRequest struct {
	UserID *string `json:"-" query:"user_id"`
}

type UpdateReminderRequest struct {
	RemindAt *Timestamp   `json:"remind_at"`
	UserID   *string      `json:"user_id"`
	User     *UserRequest `json:"user"`
}

type CreateReminderRequest struct {
	RemindAt *Timestamp   `json:"remind_at"`
	UserID   *string      `json:"user_id"`
	User     *UserRequest `json:"user"`
}

type GetRepliesRequest struct {
	Limit                  *int               `json:"-" query:"limit"`
	Offset                 *int               `json:"-" query:"offset"`
	IDGte                  *string            `json:"-" query:"id_gte"`
	IDGt                   *string            `json:"-" query:"id_gt"`
	IDLte                  *string            `json:"-" query:"id_lte"`
	IDLt                   *string            `json:"-" query:"id_lt"`
	CreatedAtAfterOrEqual  *Timestamp         `json:"-" query:"created_at_after_or_equal"`
	CreatedAtAfter         *Timestamp         `json:"-" query:"created_at_after"`
	CreatedAtBeforeOrEqual *Timestamp         `json:"-" query:"created_at_before_or_equal"`
	CreatedAtBefore        *Timestamp         `json:"-" query:"created_at_before"`
	IDAround               *string            `json:"-" query:"id_around"`
	CreatedAtAround        *Timestamp         `json:"-" query:"created_at_around"`
	Sort                   []SortParamRequest `json:"-" query:"sort"`
}

type QueryMessageFlagsRequest struct {
	Payload *QueryMessageFlagsPayload `json:"-" query:"payload"`
}

type MuteChannelRequest struct {
	Expiration  *int         `json:"expiration"`
	UserID      *string      `json:"user_id"`
	ChannelCids []string     `json:"channel_cids"`
	User        *UserRequest `json:"user"`
}

type UnmuteChannelRequest struct {
	Expiration  *int         `json:"expiration"`
	UserID      *string      `json:"user_id"`
	ChannelCids []string     `json:"channel_cids"`
	User        *UserRequest `json:"user"`
}

type QueryBannedUsersRequest struct {
	Payload *QueryBannedUsersPayload `json:"-" query:"payload"`
}

type QueryRemindersRequest struct {
	Limit  *int               `json:"limit"`
	Next   *string            `json:"next"`
	Prev   *string            `json:"prev"`
	UserID *string            `json:"user_id"`
	Sort   []SortParamRequest `json:"sort"`
	Filter map[string]any     `json:"filter"`
	User   *UserRequest       `json:"user"`
}

type SearchRequest struct {
	Payload *SearchPayload `json:"-" query:"payload"`
}

type QuerySegmentsRequest struct {
	Filter map[string]any     `json:"filter"`
	Limit  *int               `json:"limit"`
	Next   *string            `json:"next"`
	Prev   *string            `json:"prev"`
	Sort   []SortParamRequest `json:"sort"`
}

type DeleteSegmentRequest struct {
}

type GetSegmentRequest struct {
}

type DeleteSegmentTargetsRequest struct {
	TargetIds []string `json:"target_ids"`
}

type SegmentTargetExistsRequest struct {
}

type QuerySegmentTargetsRequest struct {
	Limit  *int               `json:"limit"`
	Next   *string            `json:"next"`
	Prev   *string            `json:"prev"`
	Sort   []SortParamRequest `json:"Sort"`
	Filter map[string]any     `json:"Filter"`
}

type QueryThreadsRequest struct {
	Limit            *int               `json:"limit"`
	MemberLimit      *int               `json:"member_limit"`
	Next             *string            `json:"next"`
	ParticipantLimit *int               `json:"participant_limit"`
	Prev             *string            `json:"prev"`
	ReplyLimit       *int               `json:"reply_limit"`
	UserID           *string            `json:"user_id"`
	Sort             []SortParamRequest `json:"sort"`
	Filter           map[string]any     `json:"filter"`
	User             *UserRequest       `json:"user"`
}

type GetThreadRequest struct {
	ReplyLimit       *int `json:"-" query:"reply_limit"`
	ParticipantLimit *int `json:"-" query:"participant_limit"`
	MemberLimit      *int `json:"-" query:"member_limit"`
}

type UpdateThreadPartialRequest struct {
	UserID *string        `json:"user_id"`
	Unset  []string       `json:"unset"`
	Set    map[string]any `json:"set"`
	User   *UserRequest   `json:"user"`
}

type UnreadCountsRequest struct {
}

type UnreadCountsBatchRequest struct {
	UserIds []string `json:"user_ids"`
}

type SendUserCustomEventRequest struct {
	Event UserCustomEventRequest `json:"event"`
}

type CheckPushRequest struct {
	ApnTemplate          *string      `json:"apn_template"`
	EventType            *string      `json:"event_type"`
	FirebaseDataTemplate *string      `json:"firebase_data_template"`
	FirebaseTemplate     *string      `json:"firebase_template"`
	MessageID            *string      `json:"message_id"`
	PushProviderName     *string      `json:"push_provider_name"`
	PushProviderType     *string      `json:"push_provider_type"`
	SkipDevices          *bool        `json:"skip_devices"`
	UserID               *string      `json:"user_id"`
	User                 *UserRequest `json:"user"`
}

type CheckSNSRequest struct {
	SnsKey      *string `json:"sns_key"`
	SnsSecret   *string `json:"sns_secret"`
	SnsTopicArn *string `json:"sns_topic_arn"`
}

type CheckSQSRequest struct {
	SqsKey    *string `json:"sqs_key"`
	SqsSecret *string `json:"sqs_secret"`
	SqsUrl    *string `json:"sqs_url"`
}

type DeleteDeviceRequest struct {
	ID     string  `json:"-" query:"id"`
	UserID *string `json:"-" query:"user_id"`
}

type ListDevicesRequest struct {
	UserID *string `json:"-" query:"user_id"`
}

type CreateDeviceRequest struct {
	ID               string       `json:"id"`
	PushProvider     string       `json:"push_provider"`
	PushProviderName *string      `json:"push_provider_name"`
	UserID           *string      `json:"user_id"`
	VoipToken        *bool        `json:"voip_token"`
	User             *UserRequest `json:"user"`
}

type ExportUsersRequest struct {
	UserIds []string `json:"user_ids"`
}

type ListExternalStorageRequest struct {
}

type CreateExternalStorageRequest struct {
	Bucket         string        `json:"bucket"`
	Name           string        `json:"name"`
	StorageType    string        `json:"storage_type"`
	GcsCredentials *string       `json:"gcs_credentials"`
	Path           *string       `json:"path"`
	AWSS3          *S3Request    `json:"aws_s3"`
	AzureBlob      *AzureRequest `json:"azure_blob"`
}

type DeleteExternalStorageRequest struct {
}

type UpdateExternalStorageRequest struct {
	Bucket         string        `json:"bucket"`
	StorageType    string        `json:"storage_type"`
	GcsCredentials *string       `json:"gcs_credentials"`
	Path           *string       `json:"path"`
	AWSS3          *S3Request    `json:"aws_s3"`
	AzureBlob      *AzureRequest `json:"azure_blob"`
}

type CheckExternalStorageRequest struct {
}

type AddActivityRequest struct {
	Type             string            `json:"type"`
	Feeds            []string          `json:"feeds"`
	ExpiresAt        *string           `json:"expires_at"`
	ID               *string           `json:"id"`
	ParentID         *string           `json:"parent_id"`
	PollID           *string           `json:"poll_id"`
	Text             *string           `json:"text"`
	UserID           *string           `json:"user_id"`
	Visibility       *string           `json:"visibility"`
	VisibilityTag    *string           `json:"visibility_tag"`
	Attachments      []Attachment      `json:"attachments"`
	FilterTags       []string          `json:"filter_tags"`
	InterestTags     []string          `json:"interest_tags"`
	MentionedUserIds []string          `json:"mentioned_user_ids"`
	Custom           map[string]any    `json:"custom"`
	Location         *ActivityLocation `json:"location"`
	SearchData       map[string]any    `json:"search_data"`
}

type UpsertActivitiesRequest struct {
	Activities []ActivityRequest `json:"activities"`
}

type DeleteActivitiesRequest struct {
	Ids        []string     `json:"ids"`
	HardDelete *bool        `json:"hard_delete"`
	UserID     *string      `json:"user_id"`
	User       *UserRequest `json:"user"`
}

type QueryActivitiesRequest struct {
	Limit  *int               `json:"limit"`
	Next   *string            `json:"next"`
	Prev   *string            `json:"prev"`
	Sort   []SortParamRequest `json:"sort"`
	Filter map[string]any     `json:"filter"`
}

type DeleteBookmarkRequest struct {
	FolderID *string `json:"-" query:"folder_id"`
	UserID   *string `json:"-" query:"user_id"`
}

type UpdateBookmarkRequest struct {
	FolderID    *string           `json:"folder_id"`
	NewFolderID *string           `json:"new_folder_id"`
	UserID      *string           `json:"user_id"`
	Custom      map[string]any    `json:"custom"`
	NewFolder   *AddFolderRequest `json:"new_folder"`
	User        *UserRequest      `json:"user"`
}

type AddBookmarkRequest struct {
	FolderID  *string           `json:"folder_id"`
	UserID    *string           `json:"user_id"`
	Custom    map[string]any    `json:"custom"`
	NewFolder *AddFolderRequest `json:"new_folder"`
	User      *UserRequest      `json:"user"`
}

type ActivityFeedbackRequest struct {
	Hide     *bool        `json:"hide"`
	MuteUser *bool        `json:"mute_user"`
	Reason   *string      `json:"reason"`
	Report   *bool        `json:"report"`
	ShowLess *bool        `json:"show_less"`
	UserID   *string      `json:"user_id"`
	User     *UserRequest `json:"user"`
}

type AddActivityReactionRequest struct {
	Type                       string         `json:"type"`
	CreateNotificationActivity *bool          `json:"create_notification_activity"`
	EnforceUnique              *bool          `json:"enforce_unique"`
	SkipPush                   *bool          `json:"skip_push"`
	UserID                     *string        `json:"user_id"`
	Custom                     map[string]any `json:"custom"`
	User                       *UserRequest   `json:"user"`
}

type QueryActivityReactionsRequest struct {
	Limit  *int               `json:"limit"`
	Next   *string            `json:"next"`
	Prev   *string            `json:"prev"`
	Sort   []SortParamRequest `json:"sort"`
	Filter map[string]any     `json:"filter"`
}

type DeleteActivityReactionRequest struct {
	UserID *string `json:"-" query:"user_id"`
}

type DeleteActivityRequest struct {
	HardDelete *bool `json:"-" query:"hard_delete"`
}

type GetActivityRequest struct {
}

type UpdateActivityPartialRequest struct {
	UserID *string        `json:"user_id"`
	Unset  []string       `json:"unset"`
	Set    map[string]any `json:"set"`
	User   *UserRequest   `json:"user"`
}

type UpdateActivityRequest struct {
	ExpiresAt    *Timestamp        `json:"expires_at"`
	PollID       *string           `json:"poll_id"`
	Text         *string           `json:"text"`
	UserID       *string           `json:"user_id"`
	Visibility   *string           `json:"visibility"`
	Attachments  []Attachment      `json:"attachments"`
	Feeds        []string          `json:"feeds"`
	FilterTags   []string          `json:"filter_tags"`
	InterestTags []string          `json:"interest_tags"`
	Custom       map[string]any    `json:"custom"`
	Location     *ActivityLocation `json:"location"`
	User         *UserRequest      `json:"user"`
}

type QueryBookmarkFoldersRequest struct {
	Limit  *int               `json:"limit"`
	Next   *string            `json:"next"`
	Prev   *string            `json:"prev"`
	Sort   []SortParamRequest `json:"sort"`
	Filter map[string]any     `json:"filter"`
}

type DeleteBookmarkFolderRequest struct {
}

type UpdateBookmarkFolderRequest struct {
	Name   *string        `json:"name"`
	UserID *string        `json:"user_id"`
	Custom map[string]any `json:"custom"`
	User   *UserRequest   `json:"user"`
}

type QueryBookmarksRequest struct {
	Limit  *int               `json:"limit"`
	Next   *string            `json:"next"`
	Prev   *string            `json:"prev"`
	Sort   []SortParamRequest `json:"sort"`
	Filter map[string]any     `json:"filter"`
}

type GetCommentsRequest struct {
	ObjectID     string  `json:"-" query:"object_id"`
	ObjectType   string  `json:"-" query:"object_type"`
	Depth        *int    `json:"-" query:"depth"`
	Sort         *string `json:"-" query:"sort"`
	RepliesLimit *int    `json:"-" query:"replies_limit"`
	Limit        *int    `json:"-" query:"limit"`
	Prev         *string `json:"-" query:"prev"`
	Next         *string `json:"-" query:"next"`
}

type AddCommentRequest struct {
	ObjectID                   string         `json:"object_id"`
	ObjectType                 string         `json:"object_type"`
	Comment                    *string        `json:"comment"`
	CreateNotificationActivity *bool          `json:"create_notification_activity"`
	ParentID                   *string        `json:"parent_id"`
	SkipPush                   *bool          `json:"skip_push"`
	UserID                     *string        `json:"user_id"`
	Attachments                []Attachment   `json:"attachments"`
	MentionedUserIds           []string       `json:"mentioned_user_ids"`
	Custom                     map[string]any `json:"custom"`
	User                       *UserRequest   `json:"user"`
}

type AddCommentsBatchRequest struct {
	Comments []AddCommentRequest `json:"comments"`
}

type QueryCommentsRequest struct {
	Filter map[string]any `json:"filter"`
	Limit  *int           `json:"limit"`
	Next   *string        `json:"next"`
	Prev   *string        `json:"prev"`
	Sort   *string        `json:"sort"`
}

type DeleteCommentRequest struct {
	HardDelete *bool `json:"-" query:"hard_delete"`
}

type GetCommentRequest struct {
}

type UpdateCommentRequest struct {
	Comment  *string        `json:"comment"`
	SkipPush *bool          `json:"skip_push"`
	Custom   map[string]any `json:"custom"`
}

type AddCommentReactionRequest struct {
	Type                       string         `json:"type"`
	CreateNotificationActivity *bool          `json:"create_notification_activity"`
	EnforceUnique              *bool          `json:"enforce_unique"`
	SkipPush                   *bool          `json:"skip_push"`
	UserID                     *string        `json:"user_id"`
	Custom                     map[string]any `json:"custom"`
	User                       *UserRequest   `json:"user"`
}

type QueryCommentReactionsRequest struct {
	Limit  *int               `json:"limit"`
	Next   *string            `json:"next"`
	Prev   *string            `json:"prev"`
	Sort   []SortParamRequest `json:"sort"`
	Filter map[string]any     `json:"filter"`
}

type DeleteCommentReactionRequest struct {
	UserID *string `json:"-" query:"user_id"`
}

type GetCommentRepliesRequest struct {
	Depth        *int    `json:"-" query:"depth"`
	Sort         *string `json:"-" query:"sort"`
	RepliesLimit *int    `json:"-" query:"replies_limit"`
	Limit        *int    `json:"-" query:"limit"`
	Prev         *string `json:"-" query:"prev"`
	Next         *string `json:"-" query:"next"`
}

type ListFeedGroupsRequest struct {
}

type CreateFeedGroupRequest struct {
	ID                 string                    `json:"id"`
	DefaultVisibility  *string                   `json:"default_visibility"`
	ActivityProcessors []ActivityProcessorConfig `json:"activity_processors"`
	ActivitySelectors  []ActivitySelectorConfig  `json:"activity_selectors"`
	Aggregation        *AggregationConfig        `json:"aggregation"`
	Custom             map[string]any            `json:"custom"`
	Notification       *NotificationConfig       `json:"notification"`
	PushNotification   *PushNotificationConfig   `json:"push_notification"`
	Ranking            *RankingConfig            `json:"ranking"`
	Stories            *StoriesConfig            `json:"stories"`
}

type DeleteFeedRequest struct {
	HardDelete *bool `json:"-" query:"hard_delete"`
}

type GetOrCreateFeedRequest struct {
	Limit                   *int               `json:"limit"`
	Next                    *string            `json:"next"`
	Prev                    *string            `json:"prev"`
	UserID                  *string            `json:"user_id"`
	View                    *string            `json:"view"`
	Watch                   *bool              `json:"watch"`
	ActivitySelectorOptions map[string]any     `json:"activity_selector_options"`
	Data                    *FeedInput         `json:"data"`
	ExternalRanking         map[string]any     `json:"external_ranking"`
	Filter                  map[string]any     `json:"filter"`
	FollowersPagination     *PagerRequest      `json:"followers_pagination"`
	FollowingPagination     *PagerRequest      `json:"following_pagination"`
	InterestWeights         map[string]float64 `json:"interest_weights"`
	MemberPagination        *PagerRequest      `json:"member_pagination"`
	User                    *UserRequest       `json:"user"`
}

type UpdateFeedRequest struct {
	CreatedByID *string        `json:"created_by_id"`
	Custom      map[string]any `json:"custom"`
}

type MarkActivityRequest struct {
	MarkAllRead *bool        `json:"mark_all_read"`
	MarkAllSeen *bool        `json:"mark_all_seen"`
	UserID      *string      `json:"user_id"`
	MarkRead    []string     `json:"mark_read"`
	MarkSeen    []string     `json:"mark_seen"`
	MarkWatched []string     `json:"mark_watched"`
	User        *UserRequest `json:"user"`
}

type UnpinActivityRequest struct {
	UserID *string `json:"-" query:"user_id"`
}

type PinActivityRequest struct {
	UserID *string      `json:"user_id"`
	User   *UserRequest `json:"user"`
}

type UpdateFeedMembersRequest struct {
	Operation string              `json:"operation"`
	Limit     *int                `json:"limit"`
	Next      *string             `json:"next"`
	Prev      *string             `json:"prev"`
	Members   []FeedMemberRequest `json:"members"`
}

type AcceptFeedMemberInviteRequest struct {
	UserID *string      `json:"user_id"`
	User   *UserRequest `json:"user"`
}

type QueryFeedMembersRequest struct {
	Limit  *int               `json:"limit"`
	Next   *string            `json:"next"`
	Prev   *string            `json:"prev"`
	Sort   []SortParamRequest `json:"sort"`
	Filter map[string]any     `json:"filter"`
}

type RejectFeedMemberInviteRequest struct {
	UserID *string      `json:"user_id"`
	User   *UserRequest `json:"user"`
}

type GetFollowSuggestionsRequest struct {
	Limit  *int    `json:"-" query:"limit"`
	UserID *string `json:"-" query:"user_id"`
}

type DeleteFeedGroupRequest struct {
	HardDelete *bool `json:"-" query:"hard_delete"`
}

type GetFeedGroupRequest struct {
}

type GetOrCreateFeedGroupRequest struct {
	DefaultVisibility  *string                   `json:"default_visibility"`
	ActivityProcessors []ActivityProcessorConfig `json:"activity_processors"`
	ActivitySelectors  []ActivitySelectorConfig  `json:"activity_selectors"`
	Aggregation        *AggregationConfig        `json:"aggregation"`
	Custom             map[string]any            `json:"custom"`
	Notification       *NotificationConfig       `json:"notification"`
	PushNotification   *PushNotificationConfig   `json:"push_notification"`
	Ranking            *RankingConfig            `json:"ranking"`
	Stories            *StoriesConfig            `json:"stories"`
}

type UpdateFeedGroupRequest struct {
	ActivityProcessors []ActivityProcessorConfig `json:"activity_processors"`
	ActivitySelectors  []ActivitySelectorConfig  `json:"activity_selectors"`
	Aggregation        *AggregationConfig        `json:"aggregation"`
	Custom             map[string]any            `json:"custom"`
	Notification       *NotificationConfig       `json:"notification"`
	PushNotification   *PushNotificationConfig   `json:"push_notification"`
	Ranking            *RankingConfig            `json:"ranking"`
	Stories            *StoriesConfig            `json:"stories"`
}

type ListFeedViewsRequest struct {
}

type CreateFeedViewRequest struct {
	ID                 string                    `json:"id"`
	ActivityProcessors []ActivityProcessorConfig `json:"activity_processors"`
	ActivitySelectors  []ActivitySelectorConfig  `json:"activity_selectors"`
	Aggregation        *AggregationConfig        `json:"aggregation"`
	Ranking            *RankingConfig            `json:"ranking"`
}

type DeleteFeedViewRequest struct {
}

type GetFeedViewRequest struct {
}

type GetOrCreateFeedViewRequest struct {
	ActivityProcessors []ActivityProcessorConfig `json:"activity_processors"`
	ActivitySelectors  []ActivitySelectorConfig  `json:"activity_selectors"`
	Aggregation        *AggregationConfig        `json:"aggregation"`
	Ranking            *RankingConfig            `json:"ranking"`
}

type UpdateFeedViewRequest struct {
	ActivityProcessors []ActivityProcessorConfig `json:"activity_processors"`
	ActivitySelectors  []ActivitySelectorConfig  `json:"activity_selectors"`
	Aggregation        *AggregationConfig        `json:"aggregation"`
	Ranking            *RankingConfig            `json:"ranking"`
}

type ListFeedVisibilitiesRequest struct {
}

type GetFeedVisibilityRequest struct {
}

type CreateFeedsBatchRequest struct {
	Feeds []FeedRequest `json:"feeds"`
}

type QueryFeedsRequest struct {
	Limit  *int               `json:"limit"`
	Next   *string            `json:"next"`
	Prev   *string            `json:"prev"`
	Watch  *bool              `json:"watch"`
	Sort   []SortParamRequest `json:"sort"`
	Filter map[string]any     `json:"filter"`
}

type UpdateFollowRequest struct {
	Source                     string         `json:"source"`
	Target                     string         `json:"target"`
	CreateNotificationActivity *bool          `json:"create_notification_activity"`
	FollowerRole               *string        `json:"follower_role"`
	PushPreference             *string        `json:"push_preference"`
	SkipPush                   *bool          `json:"skip_push"`
	Custom                     map[string]any `json:"custom"`
}

type FollowRequest struct {
	Source                     string         `json:"source"`
	Target                     string         `json:"target"`
	CreateNotificationActivity *bool          `json:"create_notification_activity"`
	PushPreference             *string        `json:"push_preference"`
	SkipPush                   *bool          `json:"skip_push"`
	Custom                     map[string]any `json:"custom"`
}

type AcceptFollowRequest struct {
	Source       string  `json:"source"`
	Target       string  `json:"target"`
	FollowerRole *string `json:"follower_role"`
}

type FollowBatchRequest struct {
	Follows []FollowRequest `json:"follows"`
}

type QueryFollowsRequest struct {
	Limit  *int               `json:"limit"`
	Next   *string            `json:"next"`
	Prev   *string            `json:"prev"`
	Sort   []SortParamRequest `json:"sort"`
	Filter map[string]any     `json:"filter"`
}

type RejectFollowRequest struct {
	Source string `json:"source"`
	Target string `json:"target"`
}

type UnfollowRequest struct {
}

type CreateMembershipLevelRequest struct {
	ID          string         `json:"id"`
	Name        string         `json:"name"`
	Description *string        `json:"description"`
	Priority    *int           `json:"priority"`
	Tags        []string       `json:"tags"`
	Custom      map[string]any `json:"custom"`
}

type QueryMembershipLevelsRequest struct {
	Limit  *int               `json:"limit"`
	Next   *string            `json:"next"`
	Prev   *string            `json:"prev"`
	Sort   []SortParamRequest `json:"sort"`
	Filter map[string]any     `json:"filter"`
}

type DeleteMembershipLevelRequest struct {
}

type UpdateMembershipLevelRequest struct {
	Description *string        `json:"description"`
	Name        *string        `json:"name"`
	Priority    *int           `json:"priority"`
	Tags        []string       `json:"tags"`
	Custom      map[string]any `json:"custom"`
}

type UnfollowBatchRequest struct {
	Follows []FollowPair `json:"follows"`
}

type DeleteFeedUserDataRequest struct {
}

type ExportFeedUserDataRequest struct {
}

type CreateGuestRequest struct {
	User UserRequest `json:"user"`
}

type CreateImportURLRequest struct {
	Filename *string `json:"filename"`
}

type ListImportsRequest struct {
}

type CreateImportRequest struct {
	Mode string `json:"mode"`
	Path string `json:"path"`
}

type GetImportRequest struct {
}

type BanRequest struct {
	TargetUserID   string       `json:"target_user_id"`
	BannedByID     *string      `json:"banned_by_id"`
	ChannelCid     *string      `json:"channel_cid"`
	DeleteMessages *string      `json:"delete_messages"`
	IpBan          *bool        `json:"ip_ban"`
	Reason         *string      `json:"reason"`
	Shadow         *bool        `json:"shadow"`
	Timeout        *int         `json:"timeout"`
	BannedBy       *UserRequest `json:"banned_by"`
}

type BulkImageModerationRequest struct {
	CsvFile string `json:"csv_file"`
}

type CheckRequest struct {
	EntityCreatorID   string             `json:"entity_creator_id"`
	EntityID          string             `json:"entity_id"`
	EntityType        string             `json:"entity_type"`
	ConfigKey         *string            `json:"config_key"`
	ConfigTeam        *string            `json:"config_team"`
	TestMode          *bool              `json:"test_mode"`
	UserID            *string            `json:"user_id"`
	Config            *ModerationConfig  `json:"config"`
	ModerationPayload *ModerationPayload `json:"moderation_payload"`
	Options           map[string]any     `json:"options"`
	User              *UserRequest       `json:"user"`
}

type UpsertConfigRequest struct {
	Key                                string                              `json:"key"`
	Async                              *bool                               `json:"async"`
	Team                               *string                             `json:"team"`
	UserID                             *string                             `json:"user_id"`
	AWSRekognitionConfig               *AIImageConfig                      `json:"aws_rekognition_config"`
	AiImageConfig                      *AIImageConfig                      `json:"ai_image_config"`
	AiTextConfig                       *AITextConfig                       `json:"ai_text_config"`
	AiVideoConfig                      *AIVideoConfig                      `json:"ai_video_config"`
	AutomodPlatformCircumventionConfig *AutomodPlatformCircumventionConfig `json:"automod_platform_circumvention_config"`
	AutomodSemanticFiltersConfig       *AutomodSemanticFiltersConfig       `json:"automod_semantic_filters_config"`
	AutomodToxicityConfig              *AutomodToxicityConfig              `json:"automod_toxicity_config"`
	BlockListConfig                    *BlockListConfig                    `json:"block_list_config"`
	BodyguardConfig                    *AITextConfig                       `json:"bodyguard_config"`
	GoogleVisionConfig                 *GoogleVisionConfig                 `json:"google_vision_config"`
	LlmConfig                          *LLMConfig                          `json:"llm_config"`
	RuleBuilderConfig                  *RuleBuilderConfig                  `json:"rule_builder_config"`
	User                               *UserRequest                        `json:"user"`
	VelocityFilterConfig               *VelocityFilterConfig               `json:"velocity_filter_config"`
	VideoCallRuleConfig                *VideoCallRuleConfig                `json:"video_call_rule_config"`
}

type DeleteConfigRequest struct {
	Team *string `json:"-" query:"team"`
}

type GetConfigRequest struct {
	Team *string `json:"-" query:"team"`
}

type QueryModerationConfigsRequest struct {
	Limit  *int               `json:"limit"`
	Next   *string            `json:"next"`
	Prev   *string            `json:"prev"`
	UserID *string            `json:"user_id"`
	Sort   []SortParamRequest `json:"sort"`
	Filter map[string]any     `json:"filter"`
	User   *UserRequest       `json:"user"`
}

type CustomCheckRequest struct {
	EntityID          string             `json:"entity_id"`
	EntityType        string             `json:"entity_type"`
	Flags             []CustomCheckFlag  `json:"flags"`
	EntityCreatorID   *string            `json:"entity_creator_id"`
	UserID            *string            `json:"user_id"`
	ModerationPayload *ModerationPayload `json:"moderation_payload"`
	User              *UserRequest       `json:"user"`
}

type V2DeleteTemplateRequest struct {
}

type V2QueryTemplatesRequest struct {
}

type V2UpsertTemplateRequest struct {
	Name   string                        `json:"name"`
	Config FeedsModerationTemplateConfig `json:"config"`
}

type FlagRequest struct {
	EntityID          string             `json:"entity_id"`
	EntityType        string             `json:"entity_type"`
	EntityCreatorID   *string            `json:"entity_creator_id"`
	Reason            *string            `json:"reason"`
	UserID            *string            `json:"user_id"`
	Custom            map[string]any     `json:"custom"`
	ModerationPayload *ModerationPayload `json:"moderation_payload"`
	User              *UserRequest       `json:"user"`
}

type QueryModerationFlagsRequest struct {
	Limit  *int           `json:"limit"`
	Next   *string        `json:"next"`
	Prev   *string        `json:"prev"`
	Sort   []SortParam    `json:"sort"`
	Filter map[string]any `json:"filter"`
}

type QueryModerationLogsRequest struct {
	Limit  *int               `json:"limit"`
	Next   *string            `json:"next"`
	Prev   *string            `json:"prev"`
	UserID *string            `json:"user_id"`
	Sort   []SortParamRequest `json:"sort"`
	Filter map[string]any     `json:"filter"`
	User   *UserRequest       `json:"user"`
}

type UpsertModerationRuleRequest struct {
	Name           string                      `json:"name"`
	RuleType       string                      `json:"rule_type"`
	Action         RuleBuilderAction           `json:"action"`
	CooldownPeriod *string                     `json:"cooldown_period"`
	Description    *string                     `json:"description"`
	Enabled        *bool                       `json:"enabled"`
	Logic          *string                     `json:"logic"`
	Team           *string                     `json:"team"`
	Conditions     []RuleBuilderCondition      `json:"conditions"`
	ConfigKeys     []string                    `json:"config_keys"`
	Groups         []RuleBuilderConditionGroup `json:"groups"`
}

type DeleteModerationRuleRequest struct {
}

type GetModerationRuleRequest struct {
}

type QueryModerationRulesRequest struct {
	Limit  *int               `json:"limit"`
	Next   *string            `json:"next"`
	Prev   *string            `json:"prev"`
	UserID *string            `json:"user_id"`
	Sort   []SortParamRequest `json:"sort"`
	Filter map[string]any     `json:"filter"`
	User   *UserRequest       `json:"user"`
}

type MuteRequest struct {
	TargetIds []string     `json:"target_ids"`
	Timeout   *int         `json:"timeout"`
	UserID    *string      `json:"user_id"`
	User      *UserRequest `json:"user"`
}

type QueryReviewQueueRequest struct {
	Limit        *int               `json:"limit"`
	LockCount    *int               `json:"lock_count"`
	LockDuration *int               `json:"lock_duration"`
	LockItems    *bool              `json:"lock_items"`
	Next         *string            `json:"next"`
	Prev         *string            `json:"prev"`
	StatsOnly    *bool              `json:"stats_only"`
	UserID       *string            `json:"user_id"`
	Sort         []SortParamRequest `json:"sort"`
	Filter       map[string]any     `json:"filter"`
	User         *UserRequest       `json:"user"`
}

type GetReviewQueueItemRequest struct {
}

type SubmitActionRequest struct {
	ActionType     string                 `json:"action_type"`
	ItemID         string                 `json:"item_id"`
	UserID         *string                `json:"user_id"`
	Ban            *BanActionRequest      `json:"ban"`
	Custom         *CustomActionRequest   `json:"custom"`
	DeleteActivity *DeleteActivityRequest `json:"delete_activity"`
	DeleteMessage  *DeleteMessageRequest  `json:"delete_message"`
	DeleteReaction *DeleteReactionRequest `json:"delete_reaction"`
	DeleteUser     *DeleteUserRequest     `json:"delete_user"`
	MarkReviewed   *MarkReviewedRequest   `json:"mark_reviewed"`
	Unban          *UnbanActionRequest    `json:"unban"`
	User           *UserRequest           `json:"user"`
}

type UnbanRequest struct {
	TargetUserID string       `json:"-" query:"target_user_id"`
	ChannelCid   *string      `json:"-" query:"channel_cid"`
	CreatedBy    *string      `json:"-" query:"created_by"`
	UnbannedByID *string      `json:"unbanned_by_id"`
	UnbannedBy   *UserRequest `json:"unbanned_by"`
}

type UnmuteRequest struct {
	TargetIds []string     `json:"target_ids"`
	UserID    *string      `json:"user_id"`
	User      *UserRequest `json:"user"`
}

type GetOGRequest struct {
	Url string `json:"-" query:"url"`
}

type ListPermissionsRequest struct {
}

type GetPermissionRequest struct {
}

type CreatePollRequest struct {
	Name                      string            `json:"name"`
	AllowAnswers              *bool             `json:"allow_answers"`
	AllowUserSuggestedOptions *bool             `json:"allow_user_suggested_options"`
	Description               *string           `json:"description"`
	EnforceUniqueVote         *bool             `json:"enforce_unique_vote"`
	ID                        *string           `json:"id"`
	IsClosed                  *bool             `json:"is_closed"`
	MaxVotesAllowed           *int              `json:"max_votes_allowed"`
	UserID                    *string           `json:"user_id"`
	VotingVisibility          *string           `json:"voting_visibility"`
	Options                   []PollOptionInput `json:"options"`
	Custom                    map[string]any    `json:"Custom"`
	User                      *UserRequest      `json:"user"`
}

type UpdatePollRequest struct {
	ID                        string              `json:"id"`
	Name                      string              `json:"name"`
	AllowAnswers              *bool               `json:"allow_answers"`
	AllowUserSuggestedOptions *bool               `json:"allow_user_suggested_options"`
	Description               *string             `json:"description"`
	EnforceUniqueVote         *bool               `json:"enforce_unique_vote"`
	IsClosed                  *bool               `json:"is_closed"`
	MaxVotesAllowed           *int                `json:"max_votes_allowed"`
	UserID                    *string             `json:"user_id"`
	VotingVisibility          *string             `json:"voting_visibility"`
	Options                   []PollOptionRequest `json:"options"`
	Custom                    map[string]any      `json:"Custom"`
	User                      *UserRequest        `json:"user"`
}

type QueryPollsRequest struct {
	UserID *string            `json:"-" query:"user_id"`
	Limit  *int               `json:"limit"`
	Next   *string            `json:"next"`
	Prev   *string            `json:"prev"`
	Sort   []SortParamRequest `json:"sort"`
	Filter map[string]any     `json:"filter"`
}

type DeletePollRequest struct {
	UserID *string `json:"-" query:"user_id"`
}

type GetPollRequest struct {
	UserID *string `json:"-" query:"user_id"`
}

type UpdatePollPartialRequest struct {
	UserID *string        `json:"user_id"`
	Unset  []string       `json:"unset"`
	Set    map[string]any `json:"set"`
	User   *UserRequest   `json:"user"`
}

type CreatePollOptionRequest struct {
	Text   string         `json:"text"`
	UserID *string        `json:"user_id"`
	Custom map[string]any `json:"Custom"`
	User   *UserRequest   `json:"user"`
}

type UpdatePollOptionRequest struct {
	ID     string         `json:"id"`
	Text   string         `json:"text"`
	UserID *string        `json:"user_id"`
	Custom map[string]any `json:"Custom"`
	User   *UserRequest   `json:"user"`
}

type DeletePollOptionRequest struct {
	UserID *string `json:"-" query:"user_id"`
}

type GetPollOptionRequest struct {
	UserID *string `json:"-" query:"user_id"`
}

type QueryPollVotesRequest struct {
	UserID *string            `json:"-" query:"user_id"`
	Limit  *int               `json:"limit"`
	Next   *string            `json:"next"`
	Prev   *string            `json:"prev"`
	Sort   []SortParamRequest `json:"sort"`
	Filter map[string]any     `json:"filter"`
}

type UpdatePushNotificationPreferencesRequest struct {
	Preferences []PushPreferenceInput `json:"preferences"`
}

type ListPushProvidersRequest struct {
}

type UpsertPushProviderRequest struct {
	PushProvider *PushProvider `json:"push_provider"`
}

type DeletePushProviderRequest struct {
}

type GetPushTemplatesRequest struct {
	PushProviderType string  `json:"-" query:"push_provider_type"`
	PushProviderName *string `json:"-" query:"push_provider_name"`
}

type UpsertPushTemplateRequest struct {
	EventType        string  `json:"event_type"`
	PushProviderType string  `json:"push_provider_type"`
	EnablePush       *bool   `json:"enable_push"`
	PushProviderName *string `json:"push_provider_name"`
	Template         *string `json:"template"`
}

type GetRateLimitsRequest struct {
	ServerSide *bool   `json:"-" query:"server_side"`
	Android    *bool   `json:"-" query:"android"`
	Ios        *bool   `json:"-" query:"ios"`
	Web        *bool   `json:"-" query:"web"`
	Endpoints  *string `json:"-" query:"endpoints"`
}

type ListRolesRequest struct {
}

type CreateRoleRequest struct {
	Name string `json:"name"`
}

type DeleteRoleRequest struct {
}

type GetTaskRequest struct {
}

type DeleteFileRequest struct {
	Url *string `json:"-" query:"url"`
}

type UploadFileRequest struct {
	File *string     `json:"file"`
	User *OnlyUserID `json:"user"`
}

type DeleteImageRequest struct {
	Url *string `json:"-" query:"url"`
}

type UploadImageRequest struct {
	File        *string     `json:"file"`
	UploadSizes []ImageSize `json:"upload_sizes"`
	User        *OnlyUserID `json:"user"`
}

type QueryUsersRequest struct {
	Payload *QueryUsersPayload `json:"-" query:"payload"`
}

type UpdateUsersPartialRequest struct {
	Users []UpdateUserPartialRequest `json:"users"`
}

type UpdateUsersRequest struct {
	Users map[string]UserRequest `json:"users"`
}

type GetBlockedUsersRequest struct {
	UserID *string `json:"-" query:"user_id"`
}

type BlockUsersRequest struct {
	BlockedUserID string       `json:"blocked_user_id"`
	UserID        *string      `json:"user_id"`
	User          *UserRequest `json:"user"`
}

type DeactivateUsersRequest struct {
	UserIds             []string `json:"user_ids"`
	CreatedByID         *string  `json:"created_by_id"`
	MarkChannelsDeleted *bool    `json:"mark_channels_deleted"`
	MarkMessagesDeleted *bool    `json:"mark_messages_deleted"`
}

type DeleteUsersRequest struct {
	UserIds           []string `json:"user_ids"`
	Calls             *string  `json:"calls"`
	Conversations     *string  `json:"conversations"`
	Files             *bool    `json:"files"`
	Messages          *string  `json:"messages"`
	NewCallOwnerID    *string  `json:"new_call_owner_id"`
	NewChannelOwnerID *string  `json:"new_channel_owner_id"`
	User              *string  `json:"user"`
}

type GetUserLiveLocationsRequest struct {
	UserID *string `json:"-" query:"user_id"`
}

type UpdateLiveLocationRequest struct {
	UserID    *string    `json:"-" query:"user_id"`
	MessageID string     `json:"message_id"`
	EndAt     *Timestamp `json:"end_at"`
	Latitude  *float64   `json:"latitude"`
	Longitude *float64   `json:"longitude"`
}

type ReactivateUsersRequest struct {
	UserIds         []string `json:"user_ids"`
	CreatedByID     *string  `json:"created_by_id"`
	RestoreChannels *bool    `json:"restore_channels"`
	RestoreMessages *bool    `json:"restore_messages"`
}

type RestoreUsersRequest struct {
	UserIds []string `json:"user_ids"`
}

type UnblockUsersRequest struct {
	BlockedUserID string       `json:"blocked_user_id"`
	UserID        *string      `json:"user_id"`
	User          *UserRequest `json:"user"`
}

type DeactivateUserRequest struct {
	CreatedByID         *string `json:"created_by_id"`
	MarkMessagesDeleted *bool   `json:"mark_messages_deleted"`
}

type ExportUserRequest struct {
}

type ReactivateUserRequest struct {
	CreatedByID     *string `json:"created_by_id"`
	Name            *string `json:"name"`
	RestoreMessages *bool   `json:"restore_messages"`
}

type GetActiveCallsStatusRequest struct {
}

type QueryUserFeedbackRequest struct {
	Full             *bool              `json:"-" query:"full"`
	Limit            *int               `json:"limit"`
	Next             *string            `json:"next"`
	Prev             *string            `json:"prev"`
	Sort             []SortParamRequest `json:"sort"`
	FilterConditions map[string]any     `json:"filter_conditions"`
}

type QueryCallMembersRequest struct {
	ID               string             `json:"id"`
	Type             string             `json:"type"`
	Limit            *int               `json:"limit"`
	Next             *string            `json:"next"`
	Prev             *string            `json:"prev"`
	Sort             []SortParamRequest `json:"sort"`
	FilterConditions map[string]any     `json:"filter_conditions"`
}

type QueryCallStatsRequest struct {
	Limit            *int               `json:"limit"`
	Next             *string            `json:"next"`
	Prev             *string            `json:"prev"`
	Sort             []SortParamRequest `json:"sort"`
	FilterConditions map[string]any     `json:"filter_conditions"`
}

type GetCallRequest struct {
	MembersLimit *int  `json:"-" query:"members_limit"`
	Ring         *bool `json:"-" query:"ring"`
	Notify       *bool `json:"-" query:"notify"`
	Video        *bool `json:"-" query:"video"`
}

type UpdateCallRequest struct {
	StartsAt         *Timestamp           `json:"starts_at"`
	Custom           map[string]any       `json:"custom"`
	SettingsOverride *CallSettingsRequest `json:"settings_override"`
}

type GetOrCreateCallRequest struct {
	MembersLimit *int         `json:"members_limit"`
	Notify       *bool        `json:"notify"`
	Ring         *bool        `json:"ring"`
	Video        *bool        `json:"video"`
	Data         *CallRequest `json:"data"`
}

type BlockUserRequest struct {
	UserID string `json:"user_id"`
}

type SendClosedCaptionRequest struct {
	SpeakerID  string       `json:"speaker_id"`
	Text       string       `json:"text"`
	EndTime    *Timestamp   `json:"end_time"`
	Language   *string      `json:"language"`
	Service    *string      `json:"service"`
	StartTime  *Timestamp   `json:"start_time"`
	Translated *bool        `json:"translated"`
	UserID     *string      `json:"user_id"`
	User       *UserRequest `json:"user"`
}

type DeleteCallRequest struct {
	Hard *bool `json:"hard"`
}

type SendCallEventRequest struct {
	UserID *string        `json:"user_id"`
	Custom map[string]any `json:"custom"`
	User   *UserRequest   `json:"user"`
}

type CollectUserFeedbackRequest struct {
	Rating        int            `json:"rating"`
	Sdk           string         `json:"sdk"`
	SdkVersion    string         `json:"sdk_version"`
	Reason        *string        `json:"reason"`
	UserSessionID *string        `json:"user_session_id"`
	Custom        map[string]any `json:"custom"`
}

type GoLiveRequest struct {
	RecordingStorageName     *string `json:"recording_storage_name"`
	StartClosedCaption       *bool   `json:"start_closed_caption"`
	StartHLS                 *bool   `json:"start_hls"`
	StartRecording           *bool   `json:"start_recording"`
	StartTranscription       *bool   `json:"start_transcription"`
	TranscriptionStorageName *string `json:"transcription_storage_name"`
}

type KickUserRequest struct {
	UserID     string       `json:"user_id"`
	Block      *bool        `json:"block"`
	KickedByID *string      `json:"kicked_by_id"`
	KickedBy   *UserRequest `json:"kicked_by"`
}

type EndCallRequest struct {
}

type UpdateCallMembersRequest struct {
	RemoveMembers []string        `json:"remove_members"`
	UpdateMembers []MemberRequest `json:"update_members"`
}

type MuteUsersRequest struct {
	Audio            *bool        `json:"audio"`
	MuteAllUsers     *bool        `json:"mute_all_users"`
	MutedByID        *string      `json:"muted_by_id"`
	Screenshare      *bool        `json:"screenshare"`
	ScreenshareAudio *bool        `json:"screenshare_audio"`
	Video            *bool        `json:"video"`
	UserIds          []string     `json:"user_ids"`
	MutedBy          *UserRequest `json:"muted_by"`
}

type QueryCallParticipantsRequest struct {
	Limit            *int           `json:"-" query:"limit"`
	FilterConditions map[string]any `json:"filter_conditions"`
}

type VideoPinRequest struct {
	SessionID string `json:"session_id"`
	UserID    string `json:"user_id"`
}

type ListRecordingsRequest struct {
}

type GetCallReportRequest struct {
	SessionID *string `json:"-" query:"session_id"`
}

type StartRTMPBroadcastsRequest struct {
	Broadcasts []RTMPBroadcastRequest `json:"broadcasts"`
}

type StopAllRTMPBroadcastsRequest struct {
}

type StopRTMPBroadcastRequest struct {
}

type StartHLSBroadcastingRequest struct {
}

type StartClosedCaptionsRequest struct {
	EnableTranscription *bool                `json:"enable_transcription"`
	ExternalStorage     *string              `json:"external_storage"`
	Language            *string              `json:"language"`
	SpeechSegmentConfig *SpeechSegmentConfig `json:"speech_segment_config"`
}

type StartFrameRecordingRequest struct {
	RecordingExternalStorage *string `json:"recording_external_storage"`
}

type StartRecordingRequest struct {
	RecordingExternalStorage *string `json:"recording_external_storage"`
}

type StartTranscriptionRequest struct {
	EnableClosedCaptions         *bool   `json:"enable_closed_captions"`
	Language                     *string `json:"language"`
	TranscriptionExternalStorage *string `json:"transcription_external_storage"`
}

type StopHLSBroadcastingRequest struct {
}

type StopClosedCaptionsRequest struct {
	StopTranscription *bool `json:"stop_transcription"`
}

type StopFrameRecordingRequest struct {
}

type StopLiveRequest struct {
	ContinueClosedCaption  *bool `json:"continue_closed_caption"`
	ContinueHLS            *bool `json:"continue_hls"`
	ContinueRTMPBroadcasts *bool `json:"continue_rtmp_broadcasts"`
	ContinueRecording      *bool `json:"continue_recording"`
	ContinueTranscription  *bool `json:"continue_transcription"`
}

type StopRecordingRequest struct {
}

type StopTranscriptionRequest struct {
	StopClosedCaptions *bool `json:"stop_closed_captions"`
}

type ListTranscriptionsRequest struct {
}

type UnblockUserRequest struct {
	UserID string `json:"user_id"`
}

type VideoUnpinRequest struct {
	SessionID string `json:"session_id"`
	UserID    string `json:"user_id"`
}

type UpdateUserPermissionsRequest struct {
	UserID            string   `json:"user_id"`
	GrantPermissions  []string `json:"grant_permissions"`
	RevokePermissions []string `json:"revoke_permissions"`
}

type DeleteRecordingRequest struct {
}

type DeleteTranscriptionRequest struct {
}

type GetCallSessionParticipantStatsDetailsRequest struct {
	Since     *string `json:"-" query:"since"`
	Until     *string `json:"-" query:"until"`
	MaxPoints *int    `json:"-" query:"max_points"`
}

type QueryCallSessionParticipantStatsRequest struct {
	Sort             []SortParamRequest `json:"-" query:"sort"`
	FilterConditions map[string]any     `json:"-" query:"filter_conditions"`
}

type GetCallSessionParticipantStatsTimelineRequest struct {
	StartTime *string  `json:"-" query:"start_time"`
	EndTime   *string  `json:"-" query:"end_time"`
	Severity  []string `json:"-" query:"severity"`
}

type QueryCallsRequest struct {
	Limit            *int               `json:"limit"`
	Next             *string            `json:"next"`
	Prev             *string            `json:"prev"`
	Sort             []SortParamRequest `json:"sort"`
	FilterConditions map[string]any     `json:"filter_conditions"`
}

type ListCallTypesRequest struct {
}

type CreateCallTypeRequest struct {
	Name                 string                `json:"name"`
	ExternalStorage      *string               `json:"external_storage"`
	Grants               map[string][]string   `json:"grants"`
	NotificationSettings *NotificationSettings `json:"notification_settings"`
	Settings             *CallSettingsRequest  `json:"settings"`
}

type DeleteCallTypeRequest struct {
}

type GetCallTypeRequest struct {
}

type UpdateCallTypeRequest struct {
	ExternalStorage      *string               `json:"external_storage"`
	Grants               map[string][]string   `json:"grants"`
	NotificationSettings *NotificationSettings `json:"notification_settings"`
	Settings             *CallSettingsRequest  `json:"settings"`
}

type GetEdgesRequest struct {
}

type QueryAggregateCallStatsRequest struct {
	From        *string  `json:"from"`
	To          *string  `json:"to"`
	ReportTypes []string `json:"report_types"`
}
