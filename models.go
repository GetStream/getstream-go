// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.
package getstream

type AIImageConfig struct {
	Async *bool `json:"async,omitempty"`

	Enabled *bool `json:"enabled,omitempty"`

	OcrRules []OCRRule `json:"ocr_rules,omitempty"`

	Rules []AWSRekognitionRule `json:"rules,omitempty"`
}

type AITextConfig struct {
	Async *bool `json:"async,omitempty"`

	Enabled *bool `json:"enabled,omitempty"`

	Profile *string `json:"profile,omitempty"`

	Rules []BodyguardRule `json:"rules,omitempty"`

	SeverityRules []BodyguardSeverityRule `json:"severity_rules,omitempty"`
}

type AIVideoConfig struct {
	Async *bool `json:"async,omitempty"`

	Enabled *bool `json:"enabled,omitempty"`

	Rules []AWSRekognitionRule `json:"rules,omitempty"`
}

type APIError struct {
	// API error code
	Code int `json:"code"`

	// Request duration
	Duration string `json:"duration"`

	// Message describing an error
	Message string `json:"message"`

	// URL with additional information
	MoreInfo string `json:"more_info"`

	// Response HTTP status code
	StatusCode int `json:"StatusCode"`

	// Additional error-specific information
	Details []int `json:"details"`

	// Flag that indicates if the error is unrecoverable, requests that return unrecoverable errors should not be retried, this error only applies to the request that caused it
	Unrecoverable *bool `json:"unrecoverable,omitempty"`

	// Additional error info
	ExceptionFields map[string]string `json:"exception_fields,omitempty"`
}

type APNConfig struct {
	AuthKey *string `json:"auth_key,omitempty"`

	AuthType *string `json:"auth_type,omitempty"`

	BundleID *string `json:"bundle_id,omitempty"`

	Development *bool `json:"development,omitempty"`

	Disabled *bool `json:"Disabled,omitempty"`

	Host *string `json:"host,omitempty"`

	KeyID *string `json:"key_id,omitempty"`

	NotificationTemplate *string `json:"notification_template,omitempty"`

	P12Cert *string `json:"p12_cert,omitempty"`

	TeamID *string `json:"team_id,omitempty"`
}

type APNConfigFields struct {
	Development bool `json:"development"`

	Enabled bool `json:"enabled"`

	AuthKey *string `json:"auth_key,omitempty"`

	AuthType *string `json:"auth_type,omitempty"`

	BundleID *string `json:"bundle_id,omitempty"`

	Host *string `json:"host,omitempty"`

	KeyID *string `json:"key_id,omitempty"`

	NotificationTemplate *string `json:"notification_template,omitempty"`

	P12Cert *string `json:"p12_cert,omitempty"`

	TeamID *string `json:"team_id,omitempty"`
}

type APNS struct {
	Body string `json:"body"`

	Title string `json:"title"`

	ContentAvailable *int `json:"content-available,omitempty"`

	MutableContent *int `json:"mutable-content,omitempty"`

	Sound *string `json:"sound,omitempty"`

	Data map[string]any `json:"data,omitempty"`
}

type AWSRekognitionRule struct {
	Action string `json:"action"`

	Label string `json:"label"`

	MinConfidence float64 `json:"min_confidence"`
}

type AcceptFeedMemberInviteResponse struct {
	Duration string `json:"duration"`

	Member FeedMemberResponse `json:"member"`
}

type AcceptFollowResponse struct {
	Duration string `json:"duration"`

	Follow FollowResponse `json:"follow"`
}

type Action struct {
	Name string `json:"name"`

	Text string `json:"text"`

	Type string `json:"type"`

	Style *string `json:"style,omitempty"`

	Value *string `json:"value,omitempty"`
}

type ActionLogResponse struct {
	// Timestamp when the action was taken
	CreatedAt Timestamp `json:"created_at"`

	// Unique identifier of the action log
	ID string `json:"id"`

	// Reason for the moderation action
	Reason string `json:"reason"`

	// ID of the user who was the target of the action
	TargetUserID string `json:"target_user_id"`

	// ID of the user who performed the action
	UserID string `json:"user_id"`

	// Type of moderation action
	Type string `json:"type"`

	AiProviders []string `json:"ai_providers"`

	// Additional metadata about the action
	Custom map[string]any `json:"custom"`

	ReviewQueueItem *ReviewQueueItemResponse `json:"review_queue_item,omitempty"`

	TargetUser *UserResponse `json:"target_user,omitempty"`

	User *UserResponse `json:"user,omitempty"`
}

type ActionSequence struct {
	Action *string `json:"action,omitempty"`

	Blur *bool `json:"blur,omitempty"`

	CooldownPeriod *int `json:"cooldown_period,omitempty"`

	Threshold *int `json:"threshold,omitempty"`

	TimeWindow *int `json:"time_window,omitempty"`

	Warning *bool `json:"warning,omitempty"`

	WarningText *string `json:"warning_text,omitempty"`
}

type ActiveCallsBitrateStats struct {
	P10 float64 `json:"p10"`

	P50 float64 `json:"p50"`
}

type ActiveCallsFPSStats struct {
	P05 float64 `json:"p05"`

	P10 float64 `json:"p10"`

	P50 float64 `json:"p50"`

	P90 float64 `json:"p90"`
}

type ActiveCallsLatencyStats struct {
	P50 float64 `json:"p50"`

	P90 float64 `json:"p90"`
}

type ActiveCallsMetrics struct {
	JoinCallAPI *JoinCallAPIMetrics `json:"join_call_api,omitempty"`

	Publishers *PublishersMetrics `json:"publishers,omitempty"`

	Subscribers *SubscribersMetrics `json:"subscribers,omitempty"`
}

type ActiveCallsResolutionStats struct {
	P10 float64 `json:"p10"`

	P50 float64 `json:"p50"`
}

type ActiveCallsSummary struct {
	ActiveCalls int `json:"active_calls"`

	ActivePublishers int `json:"active_publishers"`

	ActiveSubscribers int `json:"active_subscribers"`

	Participants int `json:"participants"`
}

// Emitted when an activity is added to a feed.
type ActivityAddedEvent struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	Fid string `json:"fid"`

	Activity ActivityResponse `json:"activity"`

	Custom map[string]any `json:"custom"`

	// The type of event: "feeds.activity.added" in this case
	Type string `json:"type"`

	FeedVisibility *string `json:"feed_visibility,omitempty"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	User *UserResponseCommonFields `json:"user,omitempty"`
}

func (*ActivityAddedEvent) GetEventType() string {
	return "feeds.activity.added"
}

// Emitted when an activity is deleted.
type ActivityDeletedEvent struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	Fid string `json:"fid"`

	Activity ActivityResponse `json:"activity"`

	Custom map[string]any `json:"custom"`

	// The type of event: "feeds.activity.deleted" in this case
	Type string `json:"type"`

	FeedVisibility *string `json:"feed_visibility,omitempty"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	User *UserResponseCommonFields `json:"user,omitempty"`
}

func (*ActivityDeletedEvent) GetEventType() string {
	return "feeds.activity.deleted"
}

// Response for activity feedback submission
type ActivityFeedbackResponse struct {
	// The ID of the activity that received feedback
	ActivityID string `json:"activity_id"`

	Duration string `json:"duration"`
}

type ActivityLocation struct {
	// Latitude coordinate
	Lat float64 `json:"lat"`

	// Longitude coordinate
	Lng float64 `json:"lng"`
}

// Emitted when activities are marked as read, seen, or watched.
type ActivityMarkEvent struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	Fid string `json:"fid"`

	Custom map[string]any `json:"custom"`

	// The type of event: "feeds.activity.marked" in this case
	Type string `json:"type"`

	FeedVisibility *string `json:"feed_visibility,omitempty"`

	// Whether all activities were marked as read
	MarkAllRead *bool `json:"mark_all_read,omitempty"`

	// Whether all activities were marked as seen
	MarkAllSeen *bool `json:"mark_all_seen,omitempty"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	// The IDs of activities marked as read
	MarkRead []string `json:"mark_read,omitempty"`

	// The IDs of activities marked as seen
	MarkSeen []string `json:"mark_seen,omitempty"`

	// The IDs of activities marked as watched
	MarkWatched []string `json:"mark_watched,omitempty"`

	User *UserResponseCommonFields `json:"user,omitempty"`
}

func (*ActivityMarkEvent) GetEventType() string {
	return "feeds.activity.marked"
}

type ActivityMarkedEvent struct {
	AllRead bool `json:"all_read"`

	AllSeen bool `json:"all_seen"`

	CreatedAt Timestamp `json:"created_at"`

	FeedID string `json:"feed_id"`

	UserID string `json:"user_id"`

	Type string `json:"type"`

	MarkedRead []string `json:"marked_read,omitempty"`

	MarkedWatched []string `json:"marked_watched,omitempty"`
}

func (*ActivityMarkedEvent) GetEventType() string {
	return "activity.marked"
}

type ActivityPinResponse struct {
	// When the pin was created
	CreatedAt Timestamp `json:"created_at"`

	// ID of the feed where activity is pinned
	Feed string `json:"feed"`

	// When the pin was last updated
	UpdatedAt Timestamp `json:"updated_at"`

	Activity ActivityResponse `json:"activity"`

	User UserResponse `json:"user"`
}

// Emitted when an activity is pinned.
type ActivityPinnedEvent struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	// The ID of the feed
	Fid string `json:"fid"`

	Custom map[string]any `json:"custom"`

	PinnedActivity PinActivityResponse `json:"pinned_activity"`

	// The type of event: "feeds.activity.pinned" in this case
	Type string `json:"type"`

	FeedVisibility *string `json:"feed_visibility,omitempty"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	User *UserResponseCommonFields `json:"user,omitempty"`
}

func (*ActivityPinnedEvent) GetEventType() string {
	return "feeds.activity.pinned"
}

type ActivityProcessorConfig struct {
	// Type of activity processor (required)
	Type string `json:"type"`
}

// Emitted when a reaction is added to an activity.
type ActivityReactionAddedEvent struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	Fid string `json:"fid"`

	Activity ActivityResponse `json:"activity"`

	Custom map[string]any `json:"custom"`

	Reaction FeedsReactionResponse `json:"reaction"`

	// The type of event: "feeds.activity.reaction.added" in this case
	Type string `json:"type"`

	FeedVisibility *string `json:"feed_visibility,omitempty"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	User *UserResponseCommonFields `json:"user,omitempty"`
}

func (*ActivityReactionAddedEvent) GetEventType() string {
	return "feeds.activity.reaction.added"
}

// Emitted when a reaction is deleted from an activity.
type ActivityReactionDeletedEvent struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	Fid string `json:"fid"`

	Activity ActivityResponse `json:"activity"`

	Custom map[string]any `json:"custom"`

	Reaction FeedsReactionResponse `json:"reaction"`

	// The type of the reaction that was removed
	Type string `json:"type"`

	FeedVisibility *string `json:"feed_visibility,omitempty"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	User *UserResponseCommonFields `json:"user,omitempty"`
}

func (*ActivityReactionDeletedEvent) GetEventType() string {
	return "feeds.activity.reaction.deleted"
}

// Emitted when a reaction is updated on an activity.
type ActivityReactionUpdatedEvent struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	Fid string `json:"fid"`

	Activity ActivityResponse `json:"activity"`

	Custom map[string]any `json:"custom"`

	Reaction FeedsReactionResponse `json:"reaction"`

	// The type of event: "feeds.activity.reaction.updated" in this case
	Type string `json:"type"`

	FeedVisibility *string `json:"feed_visibility,omitempty"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	User *UserResponseCommonFields `json:"user,omitempty"`
}

func (*ActivityReactionUpdatedEvent) GetEventType() string {
	return "feeds.activity.reaction.updated"
}

// Emitted when an activity is removed from a feed.
type ActivityRemovedFromFeedEvent struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	Fid string `json:"fid"`

	Activity ActivityResponse `json:"activity"`

	Custom map[string]any `json:"custom"`

	// The type of event: "feeds.activity.removed_from_feed" in this case
	Type string `json:"type"`

	FeedVisibility *string `json:"feed_visibility,omitempty"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	User *UserResponseCommonFields `json:"user,omitempty"`
}

func (*ActivityRemovedFromFeedEvent) GetEventType() string {
	return "feeds.activity.removed_from_feed"
}

type ActivityRequest struct {
	// Type of activity
	Type string `json:"type"`

	// List of feed IDs to add the activity to
	Feeds []string `json:"feeds"`

	// Expiration time for the activity
	ExpiresAt *string `json:"expires_at,omitempty"`

	// Optional ID for the activity
	ID *string `json:"id,omitempty"`

	// ID of parent activity for replies/comments
	ParentID *string `json:"parent_id,omitempty"`

	// ID of a poll to attach to activity
	PollID *string `json:"poll_id,omitempty"`

	// Text content of the activity
	Text *string `json:"text,omitempty"`

	// ID of the user creating the activity
	UserID *string `json:"user_id,omitempty"`

	// Visibility setting for the activity
	Visibility *string `json:"visibility,omitempty"`

	// If visibility is 'tag', this is the tag name and is required
	VisibilityTag *string `json:"visibility_tag,omitempty"`

	// List of attachments for the activity
	Attachments []Attachment `json:"attachments,omitempty"`

	// Tags for filtering activities
	FilterTags []string `json:"filter_tags,omitempty"`

	// Tags for indicating user interests
	InterestTags []string `json:"interest_tags,omitempty"`

	// List of users mentioned in the activity
	MentionedUserIds []string `json:"mentioned_user_ids,omitempty"`

	// Custom data for the activity
	Custom map[string]any `json:"custom,omitempty"`

	Location *ActivityLocation `json:"location,omitempty"`

	// Additional data for search indexing
	SearchData map[string]any `json:"search_data,omitempty"`
}

type ActivityResponse struct {
	// Number of bookmarks on the activity
	BookmarkCount int `json:"bookmark_count"`

	// Number of comments on the activity
	CommentCount int `json:"comment_count"`

	// When the activity was created
	CreatedAt Timestamp `json:"created_at"`

	// Unique identifier for the activity
	ID string `json:"id"`

	// Popularity score of the activity
	Popularity int `json:"popularity"`

	// Number of reactions to the activity
	ReactionCount int `json:"reaction_count"`

	// Ranking score for this activity
	Score float64 `json:"score"`

	// Number of times the activity was shared
	ShareCount int `json:"share_count"`

	// When the activity was last updated
	UpdatedAt Timestamp `json:"updated_at"`

	// Visibility setting for the activity
	Visibility string `json:"visibility"`

	// Type of activity
	Type string `json:"type"`

	// Media attachments for the activity
	Attachments []Attachment `json:"attachments"`

	// Comments on this activity
	Comments []CommentResponse `json:"comments"`

	// List of feed IDs containing this activity
	Feeds []string `json:"feeds"`

	// Tags for filtering
	FilterTags []string `json:"filter_tags"`

	// Tags for user interests
	InterestTags []string `json:"interest_tags"`

	// Recent reactions to the activity
	LatestReactions []FeedsReactionResponse `json:"latest_reactions"`

	// Users mentioned in the activity
	MentionedUsers []UserResponse `json:"mentioned_users"`

	// Current user's bookmarks for this activity
	OwnBookmarks []BookmarkResponse `json:"own_bookmarks"`

	// Current user's reactions to this activity
	OwnReactions []FeedsReactionResponse `json:"own_reactions"`

	// Custom data for the activity
	Custom map[string]any `json:"custom"`

	// Grouped reactions by type
	ReactionGroups map[string]*ReactionGroupResponse `json:"reaction_groups"`

	// Data for search indexing
	SearchData map[string]any `json:"search_data"`

	User UserResponse `json:"user"`

	// When the activity was deleted
	DeletedAt *Timestamp `json:"deleted_at,omitempty"`

	// When the activity was last edited
	EditedAt *Timestamp `json:"edited_at,omitempty"`

	// When the activity will expire
	ExpiresAt *Timestamp `json:"expires_at,omitempty"`

	// If this activity is hidden for this user. For premium content where you want to show a preview
	Hidden *bool `json:"hidden,omitempty"`

	// Text content of the activity
	Text *string `json:"text,omitempty"`

	// If visibility is 'tag', this is the tag name
	VisibilityTag *string `json:"visibility_tag,omitempty"`

	CurrentFeed *FeedResponse `json:"current_feed,omitempty"`

	Location *ActivityLocation `json:"location,omitempty"`

	Moderation *ModerationV2Response `json:"moderation,omitempty"`

	NotificationContext *NotificationContext `json:"notification_context,omitempty"`

	Parent *ActivityResponse `json:"parent,omitempty"`

	Poll *PollResponseData `json:"poll,omitempty"`
}

type ActivitySelectorConfig struct {
	// Time threshold for activity selection
	CutoffTime *Timestamp `json:"cutoff_time,omitempty"`

	// Minimum popularity threshold
	MinPopularity *int `json:"min_popularity,omitempty"`

	// Type of selector
	Type *string `json:"type,omitempty"`

	// Sort parameters for activity selection
	Sort []SortParam `json:"sort,omitempty"`

	// Filter for activity selection
	Filter map[string]any `json:"filter,omitempty"`
}

// Emitted when an activity is unpinned.
type ActivityUnpinnedEvent struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	// The ID of the feed
	Fid string `json:"fid"`

	Custom map[string]any `json:"custom"`

	PinnedActivity PinActivityResponse `json:"pinned_activity"`

	// The type of event: "feeds.activity.unpinned" in this case
	Type string `json:"type"`

	FeedVisibility *string `json:"feed_visibility,omitempty"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	User *UserResponseCommonFields `json:"user,omitempty"`
}

func (*ActivityUnpinnedEvent) GetEventType() string {
	return "feeds.activity.unpinned"
}

// Emitted when an activity is updated.
type ActivityUpdatedEvent struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	Fid string `json:"fid"`

	Activity ActivityResponse `json:"activity"`

	Custom map[string]any `json:"custom"`

	// The type of the event
	Type string `json:"type"`

	FeedVisibility *string `json:"feed_visibility,omitempty"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	User *UserResponseCommonFields `json:"user,omitempty"`
}

func (*ActivityUpdatedEvent) GetEventType() string {
	return "feeds.activity.updated"
}

type AddActivityResponse struct {
	Duration string `json:"duration"`

	Activity ActivityResponse `json:"activity"`
}

type AddBookmarkResponse struct {
	Duration string `json:"duration"`

	Bookmark BookmarkResponse `json:"bookmark"`
}

type AddCommentReactionResponse struct {
	// Duration of the request
	Duration string `json:"duration"`

	Comment CommentResponse `json:"comment"`

	Reaction FeedsReactionResponse `json:"reaction"`
}

type AddCommentResponse struct {
	Duration string `json:"duration"`

	Comment CommentResponse `json:"comment"`
}

type AddCommentsBatchResponse struct {
	Duration string `json:"duration"`

	// List of comments added
	Comments []CommentResponse `json:"comments"`
}

type AddFolderRequest struct {
	// Name of the folder
	Name string `json:"name"`

	// Custom data for the folder
	Custom map[string]any `json:"custom,omitempty"`
}

type AddReactionResponse struct {
	Duration string `json:"duration"`

	Activity ActivityResponse `json:"activity"`

	Reaction FeedsReactionResponse `json:"reaction"`
}

type AggregatedActivityResponse struct {
	// Number of activities in this aggregation
	ActivityCount int `json:"activity_count"`

	// When the aggregation was created
	CreatedAt Timestamp `json:"created_at"`

	// Grouping identifier
	Group string `json:"group"`

	// Ranking score for this aggregation
	Score float64 `json:"score"`

	// When the aggregation was last updated
	UpdatedAt Timestamp `json:"updated_at"`

	// Number of unique users in this aggregation
	UserCount int `json:"user_count"`

	// Whether this activity group has been truncated due to exceeding the group size limit
	UserCountTruncated bool `json:"user_count_truncated"`

	// List of activities in this aggregation
	Activities []ActivityResponse `json:"activities"`
}

type AggregationConfig struct {
	// Format for activity aggregation
	Format *string `json:"format,omitempty"`
}

type AnyEvent struct {
	CreatedAt Timestamp `json:"created_at"`

	Type string `json:"type"`
}

func (*AnyEvent) GetEventType() string {
	return "*"
}

type AppResponseFields struct {
	AsyncUrlEnrichEnabled bool `json:"async_url_enrich_enabled"`

	AutoTranslationEnabled bool `json:"auto_translation_enabled"`

	CampaignEnabled bool `json:"campaign_enabled"`

	CdnExpirationSeconds int `json:"cdn_expiration_seconds"`

	CustomActionHandlerUrl string `json:"custom_action_handler_url"`

	DisableAuthChecks bool `json:"disable_auth_checks"`

	DisablePermissionsChecks bool `json:"disable_permissions_checks"`

	EnforceUniqueUsernames string `json:"enforce_unique_usernames"`

	GuestUserCreationDisabled bool `json:"guest_user_creation_disabled"`

	ImageModerationEnabled bool `json:"image_moderation_enabled"`

	ModerationBulkSubmitActionEnabled bool `json:"moderation_bulk_submit_action_enabled"`

	ModerationEnabled bool `json:"moderation_enabled"`

	ModerationLlmConfigurabilityEnabled bool `json:"moderation_llm_configurability_enabled"`

	ModerationMultitenantBlocklistEnabled bool `json:"moderation_multitenant_blocklist_enabled"`

	ModerationWebhookUrl string `json:"moderation_webhook_url"`

	MultiTenantEnabled bool `json:"multi_tenant_enabled"`

	Name string `json:"name"`

	Organization string `json:"organization"`

	PermissionVersion string `json:"permission_version"`

	RemindersInterval int `json:"reminders_interval"`

	SnsKey string `json:"sns_key"`

	SnsSecret string `json:"sns_secret"`

	SnsTopicArn string `json:"sns_topic_arn"`

	SqsKey string `json:"sqs_key"`

	SqsSecret string `json:"sqs_secret"`

	SqsUrl string `json:"sqs_url"`

	Suspended bool `json:"suspended"`

	SuspendedExplanation string `json:"suspended_explanation"`

	UseHookV2 bool `json:"use_hook_v2"`

	UserResponseTimeEnabled bool `json:"user_response_time_enabled"`

	WebhookUrl string `json:"webhook_url"`

	EventHooks []EventHook `json:"event_hooks"`

	UserSearchDisallowedRoles []string `json:"user_search_disallowed_roles"`

	WebhookEvents []string `json:"webhook_events"`

	CallTypes map[string]*CallType `json:"call_types"`

	ChannelConfigs map[string]ChannelConfig `json:"channel_configs"`

	FileUploadConfig FileUploadConfig `json:"file_upload_config"`

	Grants map[string][]string `json:"grants"`

	ImageUploadConfig FileUploadConfig `json:"image_upload_config"`

	Policies map[string][]Policy `json:"policies"`

	PushNotifications PushNotificationFields `json:"push_notifications"`

	BeforeMessageSendHookUrl *string `json:"before_message_send_hook_url,omitempty"`

	RevokeTokensIssuedBefore *Timestamp `json:"revoke_tokens_issued_before,omitempty"`

	AllowedFlagReasons []string `json:"allowed_flag_reasons,omitempty"`

	Geofences []GeofenceResponse `json:"geofences,omitempty"`

	ImageModerationLabels []string `json:"image_moderation_labels,omitempty"`

	DatadogInfo *DataDogInfo `json:"datadog_info,omitempty"`

	ModerationDashboardPreferences *ModerationDashboardPreferences `json:"moderation_dashboard_preferences,omitempty"`
}

type AsyncBulkImageModerationEvent struct {
	CreatedAt Timestamp `json:"created_at"`

	FinishedAt Timestamp `json:"finished_at"`

	StartedAt Timestamp `json:"started_at"`

	TaskID string `json:"task_id"`

	Url string `json:"url"`

	Custom map[string]any `json:"custom"`

	Type string `json:"type"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`
}

func (*AsyncBulkImageModerationEvent) GetEventType() string {
	return "export.bulk_image_moderation.success"
}

type AsyncExportChannelsEvent struct {
	CreatedAt Timestamp `json:"created_at"`

	FinishedAt Timestamp `json:"finished_at"`

	StartedAt Timestamp `json:"started_at"`

	TaskID string `json:"task_id"`

	Url string `json:"url"`

	Custom map[string]any `json:"custom"`

	Type string `json:"type"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`
}

func (*AsyncExportChannelsEvent) GetEventType() string {
	return "export.channels.success"
}

type AsyncExportErrorEvent struct {
	CreatedAt Timestamp `json:"created_at"`

	Error string `json:"error"`

	FinishedAt Timestamp `json:"finished_at"`

	StartedAt Timestamp `json:"started_at"`

	TaskID string `json:"task_id"`

	Custom map[string]any `json:"custom"`

	Type string `json:"type"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`
}

func (*AsyncExportErrorEvent) GetEventType() string {
	return "export.users.error"
}

type AsyncExportModerationLogsEvent struct {
	CreatedAt Timestamp `json:"created_at"`

	FinishedAt Timestamp `json:"finished_at"`

	StartedAt Timestamp `json:"started_at"`

	TaskID string `json:"task_id"`

	Url string `json:"url"`

	Custom map[string]any `json:"custom"`

	Type string `json:"type"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`
}

func (*AsyncExportModerationLogsEvent) GetEventType() string {
	return "export.moderation_logs.success"
}

type AsyncExportUsersEvent struct {
	CreatedAt Timestamp `json:"created_at"`

	FinishedAt Timestamp `json:"finished_at"`

	StartedAt Timestamp `json:"started_at"`

	TaskID string `json:"task_id"`

	Url string `json:"url"`

	Custom map[string]any `json:"custom"`

	Type string `json:"type"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`
}

func (*AsyncExportUsersEvent) GetEventType() string {
	return "export.users.success"
}

type AsyncModerationCallbackConfig struct {
	Mode *string `json:"mode,omitempty"`

	ServerUrl *string `json:"server_url,omitempty"`
}

type AsyncModerationConfiguration struct {
	TimeoutMs *int `json:"timeout_ms,omitempty"`

	Callback *AsyncModerationCallbackConfig `json:"callback,omitempty"`
}

// An attachment is a message object that represents a file uploaded by a user.
type Attachment struct {
	Custom map[string]any `json:"custom"`

	AssetUrl *string `json:"asset_url,omitempty"`

	AuthorIcon *string `json:"author_icon,omitempty"`

	AuthorLink *string `json:"author_link,omitempty"`

	AuthorName *string `json:"author_name,omitempty"`

	Color *string `json:"color,omitempty"`

	Fallback *string `json:"fallback,omitempty"`

	Footer *string `json:"footer,omitempty"`

	FooterIcon *string `json:"footer_icon,omitempty"`

	ImageUrl *string `json:"image_url,omitempty"`

	OGScrapeUrl *string `json:"og_scrape_url,omitempty"`

	OriginalHeight *int `json:"original_height,omitempty"`

	OriginalWidth *int `json:"original_width,omitempty"`

	Pretext *string `json:"pretext,omitempty"`

	Text *string `json:"text,omitempty"`

	ThumbUrl *string `json:"thumb_url,omitempty"`

	Title *string `json:"title,omitempty"`

	TitleLink *string `json:"title_link,omitempty"`

	// Attachment type (e.g. image, video, url)
	Type *string `json:"type,omitempty"`

	Actions []Action `json:"actions,omitempty"`

	Fields []Field `json:"fields,omitempty"`

	Giphy *Images `json:"giphy,omitempty"`
}

type AudioSettings struct {
	AccessRequestEnabled bool `json:"access_request_enabled"`

	DefaultDevice string `json:"default_device"`

	MicDefaultOn bool `json:"mic_default_on"`

	OpusDtxEnabled bool `json:"opus_dtx_enabled"`

	RedundantCodingEnabled bool `json:"redundant_coding_enabled"`

	SpeakerDefaultOn bool `json:"speaker_default_on"`

	NoiseCancellation *NoiseCancellationSettings `json:"noise_cancellation,omitempty"`
}

type AudioSettingsRequest struct {
	DefaultDevice string `json:"default_device"`

	AccessRequestEnabled *bool `json:"access_request_enabled,omitempty"`

	MicDefaultOn *bool `json:"mic_default_on,omitempty"`

	OpusDtxEnabled *bool `json:"opus_dtx_enabled,omitempty"`

	RedundantCodingEnabled *bool `json:"redundant_coding_enabled,omitempty"`

	SpeakerDefaultOn *bool `json:"speaker_default_on,omitempty"`

	NoiseCancellation *NoiseCancellationSettings `json:"noise_cancellation,omitempty"`
}

type AudioSettingsResponse struct {
	AccessRequestEnabled bool `json:"access_request_enabled"`

	DefaultDevice string `json:"default_device"`

	MicDefaultOn bool `json:"mic_default_on"`

	OpusDtxEnabled bool `json:"opus_dtx_enabled"`

	RedundantCodingEnabled bool `json:"redundant_coding_enabled"`

	SpeakerDefaultOn bool `json:"speaker_default_on"`

	NoiseCancellation *NoiseCancellationSettings `json:"noise_cancellation,omitempty"`
}

type AutomodDetails struct {
	Action *string `json:"action,omitempty"`

	OriginalMessageType *string `json:"original_message_type,omitempty"`

	ImageLabels []string `json:"image_labels,omitempty"`

	MessageDetails *FlagMessageDetails `json:"message_details,omitempty"`

	Result *MessageModerationResult `json:"result,omitempty"`
}

type AutomodPlatformCircumventionConfig struct {
	Async *bool `json:"async,omitempty"`

	Enabled *bool `json:"enabled,omitempty"`

	Rules []AutomodRule `json:"rules,omitempty"`
}

type AutomodRule struct {
	Action string `json:"action"`

	Label string `json:"label"`

	Threshold float64 `json:"threshold"`
}

type AutomodSemanticFiltersConfig struct {
	Async *bool `json:"async,omitempty"`

	Enabled *bool `json:"enabled,omitempty"`

	Rules []AutomodSemanticFiltersRule `json:"rules,omitempty"`
}

type AutomodSemanticFiltersRule struct {
	Action string `json:"action"`

	Name string `json:"name"`

	Threshold float64 `json:"threshold"`
}

type AutomodToxicityConfig struct {
	Async *bool `json:"async,omitempty"`

	Enabled *bool `json:"enabled,omitempty"`

	Rules []AutomodRule `json:"rules,omitempty"`
}

// Config for creating Azure Blob Storage storage
type AzureRequest struct {
	// The account name
	AbsAccountName string `json:"abs_account_name"`

	// The client id
	AbsClientID string `json:"abs_client_id"`

	// The client secret
	AbsClientSecret string `json:"abs_client_secret"`

	// The tenant id
	AbsTenantID string `json:"abs_tenant_id"`
}

type BackstageSettings struct {
	Enabled bool `json:"enabled"`

	JoinAheadTimeSeconds *int `json:"join_ahead_time_seconds,omitempty"`
}

type BackstageSettingsRequest struct {
	Enabled *bool `json:"enabled,omitempty"`

	JoinAheadTimeSeconds *int `json:"join_ahead_time_seconds,omitempty"`
}

type BackstageSettingsResponse struct {
	Enabled bool `json:"enabled"`

	JoinAheadTimeSeconds *int `json:"join_ahead_time_seconds,omitempty"`
}

type Ban struct {
	CreatedAt Timestamp `json:"created_at"`

	Shadow bool `json:"shadow"`

	Expires *Timestamp `json:"expires,omitempty"`

	Reason *string `json:"reason,omitempty"`

	Channel *Channel `json:"channel,omitempty"`

	CreatedBy *User `json:"created_by,omitempty"`

	Target *User `json:"target,omitempty"`
}

type BanActionRequest struct {
	ChannelBanOnly *bool `json:"channel_ban_only,omitempty"`

	DeleteMessages *string `json:"delete_messages,omitempty"`

	IpBan *bool `json:"ip_ban,omitempty"`

	Reason *string `json:"reason,omitempty"`

	Shadow *bool `json:"shadow,omitempty"`

	Timeout *int `json:"timeout,omitempty"`
}

type BanOptions struct {
	DeleteMessages *string `json:"delete_messages,omitempty"`

	Duration *int `json:"duration,omitempty"`

	IpBan *bool `json:"ip_ban,omitempty"`

	Reason *string `json:"reason,omitempty"`

	ShadowBan *bool `json:"shadow_ban,omitempty"`
}

type BanResponse struct {
	CreatedAt Timestamp `json:"created_at"`

	Expires *Timestamp `json:"expires,omitempty"`

	Reason *string `json:"reason,omitempty"`

	Shadow *bool `json:"shadow,omitempty"`

	BannedBy *UserResponse `json:"banned_by,omitempty"`

	Channel *ChannelResponse `json:"channel,omitempty"`

	User *UserResponse `json:"user,omitempty"`
}

type BlockListConfig struct {
	Async *bool `json:"async,omitempty"`

	Enabled *bool `json:"enabled,omitempty"`

	Rules []BlockListRule `json:"rules,omitempty"`
}

type BlockListOptions struct {
	// Blocklist behavior
	Behavior string `json:"behavior"`

	// Blocklist name
	Blocklist string `json:"blocklist"`
}

// Block list contains restricted words
type BlockListResponse struct {
	// Block list name
	Name string `json:"name"`

	// Block list type.
	Type string `json:"type"`

	// List of words to block
	Words []string `json:"words"`

	// Date/time of creation
	CreatedAt *Timestamp `json:"created_at,omitempty"`

	ID *string `json:"id,omitempty"`

	Team *string `json:"team,omitempty"`

	// Date/time of the last update
	UpdatedAt *Timestamp `json:"updated_at,omitempty"`
}

type BlockListRule struct {
	Action string `json:"action"`

	Name *string `json:"name,omitempty"`

	Team *string `json:"team,omitempty"`
}

// BlockUserResponse is the payload for blocking a user.
type BlockUserResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`
}

type BlockUsersResponse struct {
	// User id who blocked another user
	BlockedByUserID string `json:"blocked_by_user_id"`

	// User id who got blocked
	BlockedUserID string `json:"blocked_user_id"`

	// Timestamp when the user was blocked
	CreatedAt Timestamp `json:"created_at"`

	// Duration of the request in milliseconds
	Duration string `json:"duration"`
}

// This event is sent to call participants to notify when a user is blocked on a call, clients can use this event to show a notification.
// If the user is the current user, the client should leave the call screen as well
type BlockedUserEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	User UserResponse `json:"user"`

	// The type of event: "call.blocked_user" in this case
	Type string `json:"type"`

	BlockedByUser *UserResponse `json:"blocked_by_user,omitempty"`
}

func (*BlockedUserEvent) GetEventType() string {
	return "call.blocked_user"
}

type BlockedUserResponse struct {
	// ID of the user who got blocked
	BlockedUserID string `json:"blocked_user_id"`

	CreatedAt Timestamp `json:"created_at"`

	// ID of the user who blocked another user
	UserID string `json:"user_id"`

	BlockedUser UserResponse `json:"blocked_user"`

	User UserResponse `json:"user"`
}

type BodyguardImageAnalysisConfig struct {
	Rules []BodyguardRule `json:"rules,omitempty"`
}

type BodyguardRule struct {
	Label string `json:"label"`

	Action *string `json:"action,omitempty"`

	SeverityRules []BodyguardSeverityRule `json:"severity_rules,omitempty"`
}

type BodyguardSeverityRule struct {
	Action string `json:"action"`

	Severity string `json:"severity"`
}

// Emitted when a user bookmarks an activity.
type BookmarkAddedEvent struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	Bookmark BookmarkResponse `json:"bookmark"`

	Custom map[string]any `json:"custom"`

	// The type of event: "feeds.bookmark.added" in this case
	Type string `json:"type"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	User *UserResponseCommonFields `json:"user,omitempty"`
}

func (*BookmarkAddedEvent) GetEventType() string {
	return "feeds.bookmark.added"
}

// Emitted when a user deletes a bookmark from an activity.
type BookmarkDeletedEvent struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	Bookmark BookmarkResponse `json:"bookmark"`

	Custom map[string]any `json:"custom"`

	// The type of event: "feeds.bookmark.deleted" in this case
	Type string `json:"type"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	User *UserResponseCommonFields `json:"user,omitempty"`
}

func (*BookmarkDeletedEvent) GetEventType() string {
	return "feeds.bookmark.deleted"
}

// Emitted when a bookmark folder is deleted.
type BookmarkFolderDeletedEvent struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	BookmarkFolder BookmarkFolderResponse `json:"bookmark_folder"`

	Custom map[string]any `json:"custom"`

	// The type of event: "feeds.bookmark_folder.deleted" in this case
	Type string `json:"type"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	User *UserResponseCommonFields `json:"user,omitempty"`
}

func (*BookmarkFolderDeletedEvent) GetEventType() string {
	return "feeds.bookmark_folder.deleted"
}

type BookmarkFolderResponse struct {
	// When the folder was created
	CreatedAt Timestamp `json:"created_at"`

	// Unique identifier for the folder
	ID string `json:"id"`

	// Name of the folder
	Name string `json:"name"`

	// When the folder was last updated
	UpdatedAt Timestamp `json:"updated_at"`

	// Custom data for the folder
	Custom map[string]any `json:"custom,omitempty"`
}

// Emitted when a bookmark folder is updated.
type BookmarkFolderUpdatedEvent struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	BookmarkFolder BookmarkFolderResponse `json:"bookmark_folder"`

	Custom map[string]any `json:"custom"`

	// The type of event: "feeds.bookmark_folder.updated" in this case
	Type string `json:"type"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	User *UserResponseCommonFields `json:"user,omitempty"`
}

func (*BookmarkFolderUpdatedEvent) GetEventType() string {
	return "feeds.bookmark_folder.updated"
}

type BookmarkResponse struct {
	// When the bookmark was created
	CreatedAt Timestamp `json:"created_at"`

	// When the bookmark was last updated
	UpdatedAt Timestamp `json:"updated_at"`

	Activity ActivityResponse `json:"activity"`

	User UserResponse `json:"user"`

	// Custom data for the bookmark
	Custom map[string]any `json:"custom,omitempty"`

	Folder *BookmarkFolderResponse `json:"folder,omitempty"`
}

// Emitted when a user updates a bookmark.
type BookmarkUpdatedEvent struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	Bookmark BookmarkResponse `json:"bookmark"`

	Custom map[string]any `json:"custom"`

	// The type of event: "feeds.bookmark.updated" in this case
	Type string `json:"type"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	User *UserResponseCommonFields `json:"user,omitempty"`
}

func (*BookmarkUpdatedEvent) GetEventType() string {
	return "feeds.bookmark.updated"
}

type Bound struct {
	Inclusive bool `json:"inclusive"`

	Value float64 `json:"value"`
}

type BroadcastSettings struct {
	Enabled bool `json:"enabled"`

	HLS *HLSSettings `json:"hls,omitempty"`

	RTMP *RTMPSettings `json:"rtmp,omitempty"`
}

type BroadcastSettingsRequest struct {
	Enabled *bool `json:"enabled,omitempty"`

	HLS *HLSSettingsRequest `json:"hls,omitempty"`

	RTMP *RTMPSettingsRequest `json:"rtmp,omitempty"`
}

// BroadcastSettingsResponse is the payload for broadcasting settings
type BroadcastSettingsResponse struct {
	Enabled bool `json:"enabled"`

	HLS HLSSettingsResponse `json:"hls"`

	RTMP RTMPSettingsResponse `json:"rtmp"`
}

type BrowserDataResponse struct {
	Name *string `json:"name,omitempty"`

	Version *string `json:"version,omitempty"`
}

type BulkImageModerationResponse struct {
	Duration string `json:"duration"`

	// ID of the task for processing the bulk image moderation
	TaskID string `json:"task_id"`
}

// This event is sent when a user accepts a notification to join a call.
type CallAcceptedEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	Call CallResponse `json:"call"`

	User UserResponse `json:"user"`

	// The type of event: "call.accepted" in this case
	Type string `json:"type"`
}

func (*CallAcceptedEvent) GetEventType() string {
	return "call.accepted"
}

// CallClosedCaption represents a closed caption of a call.
type CallClosedCaption struct {
	EndTime Timestamp `json:"end_time"`

	ID string `json:"id"`

	Language string `json:"language"`

	SpeakerID string `json:"speaker_id"`

	StartTime Timestamp `json:"start_time"`

	Text string `json:"text"`

	Translated bool `json:"translated"`

	User UserResponse `json:"user"`

	Service *string `json:"service,omitempty"`
}

// This event is sent when call closed captions has failed
type CallClosedCaptionsFailedEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	// The type of event: "call.closed_captions_failed" in this case
	Type string `json:"type"`
}

func (*CallClosedCaptionsFailedEvent) GetEventType() string {
	return "call.closed_captions_failed"
}

// This event is sent when call closed caption has started
type CallClosedCaptionsStartedEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	// The type of event: "call.closed_captions_started" in this case
	Type string `json:"type"`
}

func (*CallClosedCaptionsStartedEvent) GetEventType() string {
	return "call.closed_captions_started"
}

// This event is sent when call closed captions has stopped
type CallClosedCaptionsStoppedEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	// The type of event: "call.transcription_stopped" in this case
	Type string `json:"type"`
}

func (*CallClosedCaptionsStoppedEvent) GetEventType() string {
	return "call.closed_captions_stopped"
}

// This event is sent when a call is created. Clients receiving this event should check if the ringing
// field is set to true and if so, show the call screen
type CallCreatedEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	// the members added to this call
	Members []MemberResponse `json:"members"`

	Call CallResponse `json:"call"`

	// The type of event: "call.created" in this case
	Type string `json:"type"`
}

func (*CallCreatedEvent) GetEventType() string {
	return "call.created"
}

// This event is sent when a call is deleted. Clients receiving this event should leave the call screen
type CallDeletedEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	Call CallResponse `json:"call"`

	// The type of event: "call.deleted" in this case
	Type string `json:"type"`
}

func (*CallDeletedEvent) GetEventType() string {
	return "call.deleted"
}

type CallDurationReport struct {
	Histogram []ReportByHistogramBucket `json:"histogram"`
}

type CallDurationReportResponse struct {
	Daily []DailyAggregateCallDurationReportResponse `json:"daily"`
}

// This event is sent when a call is mark as ended for all its participants. Clients receiving this event should leave the call screen
type CallEndedEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	Call CallResponse `json:"call"`

	// The type of event: "call.ended" in this case
	Type string `json:"type"`

	// The reason why the call ended, if available
	Reason *string `json:"reason,omitempty"`

	User *UserResponse `json:"user,omitempty"`
}

func (*CallEndedEvent) GetEventType() string {
	return "call.ended"
}

// This event is sent when frame recording has failed
type CallFrameRecordingFailedEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	EgressID string `json:"egress_id"`

	Call CallResponse `json:"call"`

	// The type of event: "call.frame_recording_failed" in this case
	Type string `json:"type"`
}

func (*CallFrameRecordingFailedEvent) GetEventType() string {
	return "call.frame_recording_failed"
}

// This event is sent when a frame is captured from a call
type CallFrameRecordingFrameReadyEvent struct {
	CallCid string `json:"call_cid"`

	// The time the frame was captured
	CapturedAt Timestamp `json:"captured_at"`

	CreatedAt Timestamp `json:"created_at"`

	EgressID string `json:"egress_id"`

	// Call session ID
	SessionID string `json:"session_id"`

	// The type of the track frame was captured from (TRACK_TYPE_VIDEO|TRACK_TYPE_SCREEN_SHARE)
	TrackType string `json:"track_type"`

	// The URL of the frame
	Url string `json:"url"`

	// The users in the frame
	Users map[string]UserResponse `json:"users"`

	// The type of event: "call.frame_recording_ready" in this case
	Type string `json:"type"`
}

func (*CallFrameRecordingFrameReadyEvent) GetEventType() string {
	return "call.frame_recording_ready"
}

// This event is sent when frame recording has started
type CallFrameRecordingStartedEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	EgressID string `json:"egress_id"`

	Call CallResponse `json:"call"`

	// The type of event: "call.frame_recording_started" in this case
	Type string `json:"type"`
}

func (*CallFrameRecordingStartedEvent) GetEventType() string {
	return "call.frame_recording_started"
}

// This event is sent when frame recording has stopped
type CallFrameRecordingStoppedEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	EgressID string `json:"egress_id"`

	Call CallResponse `json:"call"`

	// The type of event: "call.frame_recording_stopped" in this case
	Type string `json:"type"`
}

func (*CallFrameRecordingStoppedEvent) GetEventType() string {
	return "call.frame_recording_stopped"
}

// This event is sent when HLS broadcasting has failed
type CallHLSBroadcastingFailedEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	// The type of event: "call.hls_broadcasting_failed" in this case
	Type string `json:"type"`
}

func (*CallHLSBroadcastingFailedEvent) GetEventType() string {
	return "call.hls_broadcasting_failed"
}

// This event is sent when HLS broadcasting has started
type CallHLSBroadcastingStartedEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	HLSPlaylistUrl string `json:"hls_playlist_url"`

	Call CallResponse `json:"call"`

	// The type of event: "call.hls_broadcasting_started" in this case
	Type string `json:"type"`
}

func (*CallHLSBroadcastingStartedEvent) GetEventType() string {
	return "call.hls_broadcasting_started"
}

// This event is sent when HLS broadcasting has stopped
type CallHLSBroadcastingStoppedEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	// The type of event: "call.hls_broadcasting_stopped" in this case
	Type string `json:"type"`
}

func (*CallHLSBroadcastingStoppedEvent) GetEventType() string {
	return "call.hls_broadcasting_stopped"
}

// CallIngressResponse is the payload for ingress settings
type CallIngressResponse struct {
	RTMP RTMPIngress `json:"rtmp"`

	Srt SRTIngress `json:"srt"`

	Whip WHIPIngress `json:"whip"`
}

// This event is sent when a call is started. Clients receiving this event should start the call.
type CallLiveStartedEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	Call CallResponse `json:"call"`

	// The type of event: "call.live_started" in this case
	Type string `json:"type"`
}

func (*CallLiveStartedEvent) GetEventType() string {
	return "call.live_started"
}

// This event is sent when one or more members are added to a call
type CallMemberAddedEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	// the members added to this call
	Members []MemberResponse `json:"members"`

	Call CallResponse `json:"call"`

	// The type of event: "call.member_added" in this case
	Type string `json:"type"`
}

func (*CallMemberAddedEvent) GetEventType() string {
	return "call.member_added"
}

// This event is sent when one or more members are removed from a call
type CallMemberRemovedEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	// the list of member IDs removed from the call
	Members []string `json:"members"`

	Call CallResponse `json:"call"`

	// The type of event: "call.member_removed" in this case
	Type string `json:"type"`
}

func (*CallMemberRemovedEvent) GetEventType() string {
	return "call.member_removed"
}

// This event is sent when one or more members are updated
type CallMemberUpdatedEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	// The list of members that were updated
	Members []MemberResponse `json:"members"`

	Call CallResponse `json:"call"`

	// The type of event: "call.member_updated" in this case
	Type string `json:"type"`
}

func (*CallMemberUpdatedEvent) GetEventType() string {
	return "call.member_updated"
}

// This event is sent when one or more members get its role updated
type CallMemberUpdatedPermissionEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	// The list of members that were updated
	Members []MemberResponse `json:"members"`

	Call CallResponse `json:"call"`

	// The capabilities by role for this call
	CapabilitiesByRole map[string][]string `json:"capabilities_by_role"`

	// The type of event: "call.member_added" in this case
	Type string `json:"type"`
}

func (*CallMemberUpdatedPermissionEvent) GetEventType() string {
	return "call.member_updated_permission"
}

// This event is sent to call members who did not accept/reject/join the call to notify they missed the call
type CallMissedEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	NotifyUser bool `json:"notify_user"`

	// Call session ID
	SessionID string `json:"session_id"`

	// List of members who missed the call
	Members []MemberResponse `json:"members"`

	Call CallResponse `json:"call"`

	User UserResponse `json:"user"`

	// The type of event: "call.notification" in this case
	Type string `json:"type"`
}

func (*CallMissedEvent) GetEventType() string {
	return "call.missed"
}

type CallModerationBlurEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	UserID string `json:"user_id"`

	Custom map[string]any `json:"custom"`

	Type string `json:"type"`
}

func (*CallModerationBlurEvent) GetEventType() string {
	return "call.moderation_blur"
}

type CallModerationWarningEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	Message string `json:"message"`

	UserID string `json:"user_id"`

	Custom map[string]any `json:"custom"`

	Type string `json:"type"`
}

func (*CallModerationWarningEvent) GetEventType() string {
	return "call.moderation_warning"
}

// This event is sent to all call members to notify they are getting called
type CallNotificationEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	// Call session ID
	SessionID string `json:"session_id"`

	// Call members
	Members []MemberResponse `json:"members"`

	Call CallResponse `json:"call"`

	User UserResponse `json:"user"`

	// The type of event: "call.notification" in this case
	Type string `json:"type"`
}

func (*CallNotificationEvent) GetEventType() string {
	return "call.notification"
}

type CallParticipantCountReport struct {
	Histogram []ReportByHistogramBucket `json:"histogram"`
}

type CallParticipantCountReportResponse struct {
	Daily []DailyAggregateCallParticipantCountReportResponse `json:"daily"`
}

type CallParticipantResponse struct {
	JoinedAt Timestamp `json:"joined_at"`

	Role string `json:"role"`

	UserSessionID string `json:"user_session_id"`

	User UserResponse `json:"user"`
}

// This event is sent when a reaction is sent in a call, clients should use this to show the reaction in the call screen
type CallReactionEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	Reaction ReactionResponse `json:"reaction"`

	// The type of event: "call.reaction_new" in this case
	Type string `json:"type"`
}

func (*CallReactionEvent) GetEventType() string {
	return "call.reaction_new"
}

// CallRecording represents a recording of a call.
type CallRecording struct {
	EndTime Timestamp `json:"end_time"`

	Filename string `json:"filename"`

	SessionID string `json:"session_id"`

	StartTime Timestamp `json:"start_time"`

	Url string `json:"url"`
}

// This event is sent when call recording has failed
type CallRecordingFailedEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	EgressID string `json:"egress_id"`

	// The type of event: "call.recording_failed" in this case
	Type string `json:"type"`
}

func (*CallRecordingFailedEvent) GetEventType() string {
	return "call.recording_failed"
}

// This event is sent when call recording is ready
type CallRecordingReadyEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	EgressID string `json:"egress_id"`

	CallRecording CallRecording `json:"call_recording"`

	// The type of event: "call.recording_ready" in this case
	Type string `json:"type"`
}

func (*CallRecordingReadyEvent) GetEventType() string {
	return "call.recording_ready"
}

// This event is sent when call recording has started
type CallRecordingStartedEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	EgressID string `json:"egress_id"`

	// The type of event: "call.recording_started" in this case
	Type string `json:"type"`
}

func (*CallRecordingStartedEvent) GetEventType() string {
	return "call.recording_started"
}

// This event is sent when call recording has stopped
type CallRecordingStoppedEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	EgressID string `json:"egress_id"`

	// The type of event: "call.recording_stopped" in this case
	Type string `json:"type"`
}

func (*CallRecordingStoppedEvent) GetEventType() string {
	return "call.recording_stopped"
}

// This event is sent when a user rejects a notification to join a call.
type CallRejectedEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	Call CallResponse `json:"call"`

	User UserResponse `json:"user"`

	// The type of event: "call.rejected" in this case
	Type string `json:"type"`

	// Provides information about why the call was rejected. You can provide any value, but the Stream API and SDKs use these default values: rejected, cancel, timeout and busy
	Reason *string `json:"reason,omitempty"`
}

func (*CallRejectedEvent) GetEventType() string {
	return "call.rejected"
}

type CallReportResponse struct {
	Score float64 `json:"score"`

	EndedAt *Timestamp `json:"ended_at,omitempty"`

	StartedAt *Timestamp `json:"started_at,omitempty"`
}

// CallRequest is the payload for creating a call.
type CallRequest struct {
	ChannelCid *string `json:"channel_cid,omitempty"`

	CreatedByID *string `json:"created_by_id,omitempty"`

	StartsAt *Timestamp `json:"starts_at,omitempty"`

	Team *string `json:"team,omitempty"`

	Video *bool `json:"video,omitempty"`

	Members []MemberRequest `json:"members,omitempty"`

	CreatedBy *UserRequest `json:"created_by,omitempty"`

	Custom map[string]any `json:"custom,omitempty"`

	SettingsOverride *CallSettingsRequest `json:"settings_override,omitempty"`
}

// Represents a call
type CallResponse struct {
	Backstage bool `json:"backstage"`

	Captioning bool `json:"captioning"`

	// The unique identifier for a call (<type>:<id>)
	Cid string `json:"cid"`

	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	CurrentSessionID string `json:"current_session_id"`

	// Call ID
	ID string `json:"id"`

	Recording bool `json:"recording"`

	Transcribing bool `json:"transcribing"`

	Translating bool `json:"translating"`

	// Date/time of the last update
	UpdatedAt Timestamp `json:"updated_at"`

	// The type of call
	Type string `json:"type"`

	BlockedUserIds []string `json:"blocked_user_ids"`

	CreatedBy UserResponse `json:"created_by"`

	// Custom data for this object
	Custom map[string]any `json:"custom"`

	Egress EgressResponse `json:"egress"`

	Ingress CallIngressResponse `json:"ingress"`

	Settings CallSettingsResponse `json:"settings"`

	ChannelCid *string `json:"channel_cid,omitempty"`

	// Date/time when the call ended
	EndedAt *Timestamp `json:"ended_at,omitempty"`

	JoinAheadTimeSeconds *int `json:"join_ahead_time_seconds,omitempty"`

	// Date/time when the call will start
	StartsAt *Timestamp `json:"starts_at,omitempty"`

	Team *string `json:"team,omitempty"`

	Session *CallSessionResponse `json:"session,omitempty"`

	Thumbnails *ThumbnailResponse `json:"thumbnails,omitempty"`
}

// This event is sent to all call members to notify they are getting called
type CallRingEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	// Call session ID
	SessionID string `json:"session_id"`

	Video bool `json:"video"`

	// Call members
	Members []MemberResponse `json:"members"`

	Call CallResponse `json:"call"`

	User UserResponse `json:"user"`

	// The type of event: "call.notification" in this case
	Type string `json:"type"`
}

func (*CallRingEvent) GetEventType() string {
	return "call.ring"
}

// This event is sent when a call RTMP broadcast has failed
type CallRtmpBroadcastFailedEvent struct {
	// The unique identifier for a call (<type>:<id>)
	CallCid string `json:"call_cid"`

	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	// Name of the given RTMP broadcast
	Name string `json:"name"`

	// The type of event: "call.rtmp_broadcast_failed" in this case
	Type string `json:"type"`
}

func (*CallRtmpBroadcastFailedEvent) GetEventType() string {
	return "call.rtmp_broadcast_failed"
}

// This event is sent when RTMP broadcast has started
type CallRtmpBroadcastStartedEvent struct {
	// The unique identifier for a call (<type>:<id>)
	CallCid string `json:"call_cid"`

	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	// Name of the given RTMP broadcast
	Name string `json:"name"`

	// The type of event: "call.rtmp_broadcast_started" in this case
	Type string `json:"type"`
}

func (*CallRtmpBroadcastStartedEvent) GetEventType() string {
	return "call.rtmp_broadcast_started"
}

// This event is sent when RTMP broadcast has stopped
type CallRtmpBroadcastStoppedEvent struct {
	// The unique identifier for a call (<type>:<id>)
	CallCid string `json:"call_cid"`

	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	// Name of the given RTMP broadcast
	Name string `json:"name"`

	// The type of event: "call.rtmp_broadcast_stopped" in this case
	Type string `json:"type"`
}

func (*CallRtmpBroadcastStoppedEvent) GetEventType() string {
	return "call.rtmp_broadcast_stopped"
}

// This event is sent when a call session ends
type CallSessionEndedEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	// Call session ID
	SessionID string `json:"session_id"`

	Call CallResponse `json:"call"`

	// The type of event: "call.session_ended" in this case
	Type string `json:"type"`
}

func (*CallSessionEndedEvent) GetEventType() string {
	return "call.session_ended"
}

// This event is sent when the participant counts in a call session are updated
type CallSessionParticipantCountsUpdatedEvent struct {
	AnonymousParticipantCount int `json:"anonymous_participant_count"`

	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	// Call session ID
	SessionID string `json:"session_id"`

	ParticipantsCountByRole map[string]int `json:"participants_count_by_role"`

	// The type of event: "call.session_participant_count_updated" in this case
	Type string `json:"type"`
}

func (*CallSessionParticipantCountsUpdatedEvent) GetEventType() string {
	return "call.session_participant_count_updated"
}

// This event is sent when a participant joins a call session
type CallSessionParticipantJoinedEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	// Call session ID
	SessionID string `json:"session_id"`

	Participant CallParticipantResponse `json:"participant"`

	// The type of event: "call.session_participant_joined" in this case
	Type string `json:"type"`
}

func (*CallSessionParticipantJoinedEvent) GetEventType() string {
	return "call.session_participant_joined"
}

// This event is sent when a participant leaves a call session
type CallSessionParticipantLeftEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	// The duration participant was in the session in seconds
	DurationSeconds int `json:"duration_seconds"`

	// Call session ID
	SessionID string `json:"session_id"`

	Participant CallParticipantResponse `json:"participant"`

	// The type of event: "call.session_participant_left" in this case
	Type string `json:"type"`

	// The reason why the participant left the session
	Reason *string `json:"reason,omitempty"`
}

func (*CallSessionParticipantLeftEvent) GetEventType() string {
	return "call.session_participant_left"
}

type CallSessionResponse struct {
	AnonymousParticipantCount int `json:"anonymous_participant_count"`

	ID string `json:"id"`

	Participants []CallParticipantResponse `json:"participants"`

	AcceptedBy map[string]Timestamp `json:"accepted_by"`

	MissedBy map[string]Timestamp `json:"missed_by"`

	ParticipantsCountByRole map[string]int `json:"participants_count_by_role"`

	RejectedBy map[string]Timestamp `json:"rejected_by"`

	EndedAt *Timestamp `json:"ended_at,omitempty"`

	LiveEndedAt *Timestamp `json:"live_ended_at,omitempty"`

	LiveStartedAt *Timestamp `json:"live_started_at,omitempty"`

	StartedAt *Timestamp `json:"started_at,omitempty"`

	TimerEndsAt *Timestamp `json:"timer_ends_at,omitempty"`
}

// This event is sent when a call session starts
type CallSessionStartedEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	// Call session ID
	SessionID string `json:"session_id"`

	Call CallResponse `json:"call"`

	// The type of event: "call.session_started" in this case
	Type string `json:"type"`
}

func (*CallSessionStartedEvent) GetEventType() string {
	return "call.session_started"
}

type CallSettings struct {
	Audio *AudioSettings `json:"audio,omitempty"`

	Backstage *BackstageSettings `json:"backstage,omitempty"`

	Broadcasting *BroadcastSettings `json:"broadcasting,omitempty"`

	FrameRecording *FrameRecordSettings `json:"frame_recording,omitempty"`

	Geofencing *GeofenceSettings `json:"geofencing,omitempty"`

	Ingress *IngressSettings `json:"ingress,omitempty"`

	Limits *LimitsSettings `json:"limits,omitempty"`

	Recording *RecordSettings `json:"recording,omitempty"`

	Ring *RingSettings `json:"ring,omitempty"`

	Screensharing *ScreensharingSettings `json:"screensharing,omitempty"`

	Session *SessionSettings `json:"session,omitempty"`

	Thumbnails *ThumbnailsSettings `json:"thumbnails,omitempty"`

	Transcription *TranscriptionSettings `json:"transcription,omitempty"`

	Video *VideoSettings `json:"video,omitempty"`
}

type CallSettingsRequest struct {
	Audio *AudioSettingsRequest `json:"audio,omitempty"`

	Backstage *BackstageSettingsRequest `json:"backstage,omitempty"`

	Broadcasting *BroadcastSettingsRequest `json:"broadcasting,omitempty"`

	FrameRecording *FrameRecordingSettingsRequest `json:"frame_recording,omitempty"`

	Geofencing *GeofenceSettingsRequest `json:"geofencing,omitempty"`

	Ingress *IngressSettingsRequest `json:"ingress,omitempty"`

	Limits *LimitsSettingsRequest `json:"limits,omitempty"`

	Recording *RecordSettingsRequest `json:"recording,omitempty"`

	Ring *RingSettingsRequest `json:"ring,omitempty"`

	Screensharing *ScreensharingSettingsRequest `json:"screensharing,omitempty"`

	Session *SessionSettingsRequest `json:"session,omitempty"`

	Thumbnails *ThumbnailsSettingsRequest `json:"thumbnails,omitempty"`

	Transcription *TranscriptionSettingsRequest `json:"transcription,omitempty"`

	Video *VideoSettingsRequest `json:"video,omitempty"`
}

type CallSettingsResponse struct {
	Audio AudioSettingsResponse `json:"audio"`

	Backstage BackstageSettingsResponse `json:"backstage"`

	Broadcasting BroadcastSettingsResponse `json:"broadcasting"`

	FrameRecording FrameRecordingSettingsResponse `json:"frame_recording"`

	Geofencing GeofenceSettingsResponse `json:"geofencing"`

	Limits LimitsSettingsResponse `json:"limits"`

	Recording RecordSettingsResponse `json:"recording"`

	Ring RingSettingsResponse `json:"ring"`

	Screensharing ScreensharingSettingsResponse `json:"screensharing"`

	Session SessionSettingsResponse `json:"session"`

	Thumbnails ThumbnailsSettingsResponse `json:"thumbnails"`

	Transcription TranscriptionSettingsResponse `json:"transcription"`

	Video VideoSettingsResponse `json:"video"`

	Ingress *IngressSettingsResponse `json:"ingress,omitempty"`
}

// CallStateResponseFields is the payload for call state response
type CallStateResponseFields struct {
	// List of call members
	Members []MemberResponse `json:"members"`

	OwnCapabilities []OwnCapability `json:"own_capabilities"`

	Call CallResponse `json:"call"`
}

type CallStatsParticipant struct {
	UserID string `json:"user_id"`

	Sessions []CallStatsParticipantSession `json:"sessions"`

	LatestActivityAt *Timestamp `json:"latest_activity_at,omitempty"`

	Name *string `json:"name,omitempty"`

	Roles []string `json:"roles,omitempty"`
}

type CallStatsParticipantCounts struct {
	LiveSessions int `json:"live_sessions"`

	Participants int `json:"participants"`

	Publishers int `json:"publishers"`

	Sessions int `json:"sessions"`
}

type CallStatsParticipantSession struct {
	IsLive bool `json:"is_live"`

	UserSessionID string `json:"user_session_id"`

	PublishedTracks PublishedTrackFlags `json:"published_tracks"`

	CqScore *int `json:"cq_score,omitempty"`

	EndedAt *Timestamp `json:"ended_at,omitempty"`

	PublisherType *string `json:"publisher_type,omitempty"`

	StartedAt *Timestamp `json:"started_at,omitempty"`

	UnifiedSessionID *string `json:"unified_session_id,omitempty"`
}

// This event is sent when the insights report is ready
type CallStatsReportReadyEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	// Call session ID
	SessionID string `json:"session_id"`

	// The type of event, "call.report_ready" in this case
	Type string `json:"type"`
}

func (*CallStatsReportReadyEvent) GetEventType() string {
	return "call.stats_report_ready"
}

type CallStatsReportSummaryResponse struct {
	CallCid string `json:"call_cid"`

	CallDurationSeconds int `json:"call_duration_seconds"`

	CallSessionID string `json:"call_session_id"`

	CallStatus string `json:"call_status"`

	FirstStatsTime Timestamp `json:"first_stats_time"`

	CreatedAt *Timestamp `json:"created_at,omitempty"`

	MinUserRating *int `json:"min_user_rating,omitempty"`

	QualityScore *int `json:"quality_score,omitempty"`
}

// CallTranscription represents a transcription of a call.
type CallTranscription struct {
	EndTime Timestamp `json:"end_time"`

	Filename string `json:"filename"`

	SessionID string `json:"session_id"`

	StartTime Timestamp `json:"start_time"`

	Url string `json:"url"`
}

// This event is sent when call transcription has failed
type CallTranscriptionFailedEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	EgressID string `json:"egress_id"`

	// The type of event: "call.transcription_failed" in this case
	Type string `json:"type"`

	// The error message detailing why transcription failed.
	Error *string `json:"error,omitempty"`
}

func (*CallTranscriptionFailedEvent) GetEventType() string {
	return "call.transcription_failed"
}

// This event is sent when call transcription is ready
type CallTranscriptionReadyEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	EgressID string `json:"egress_id"`

	CallTranscription CallTranscription `json:"call_transcription"`

	// The type of event: "call.transcription_ready" in this case
	Type string `json:"type"`
}

func (*CallTranscriptionReadyEvent) GetEventType() string {
	return "call.transcription_ready"
}

// This event is sent when call transcription has started
type CallTranscriptionStartedEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	EgressID string `json:"egress_id"`

	// The type of event: "call.transcription_started" in this case
	Type string `json:"type"`
}

func (*CallTranscriptionStartedEvent) GetEventType() string {
	return "call.transcription_started"
}

// This event is sent when call transcription has stopped
type CallTranscriptionStoppedEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	EgressID string `json:"egress_id"`

	// The type of event: "call.transcription_stopped" in this case
	Type string `json:"type"`
}

func (*CallTranscriptionStoppedEvent) GetEventType() string {
	return "call.transcription_stopped"
}

type CallType struct {
	AppPK int `json:"AppPK"`

	CreatedAt Timestamp `json:"CreatedAt"`

	ExternalStorage string `json:"ExternalStorage"`

	Name string `json:"Name"`

	PK int `json:"PK"`

	UpdatedAt Timestamp `json:"UpdatedAt"`

	NotificationSettings *NotificationSettings `json:"NotificationSettings,omitempty"`

	Settings *CallSettings `json:"Settings,omitempty"`
}

// CallTypeResponse is the payload for a call type.
type CallTypeResponse struct {
	// the time the call type was created
	CreatedAt Timestamp `json:"created_at"`

	// the name of the call type
	Name string `json:"name"`

	// the time the call type was last updated
	UpdatedAt Timestamp `json:"updated_at"`

	// the permissions granted to each role
	Grants map[string][]string `json:"grants"`

	NotificationSettings NotificationSettings `json:"notification_settings"`

	Settings CallSettingsResponse `json:"settings"`

	// the external storage for the call type
	ExternalStorage *string `json:"external_storage,omitempty"`
}

// This event is sent when a call is updated, clients should use this update the local state of the call.
// This event also contains the capabilities by role for the call, clients should update the own_capability for the current.
type CallUpdatedEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	Call CallResponse `json:"call"`

	// The capabilities by role for this call
	CapabilitiesByRole map[string][]string `json:"capabilities_by_role"`

	// The type of event: "call.updated" in this case
	Type string `json:"type"`
}

func (*CallUpdatedEvent) GetEventType() string {
	return "call.updated"
}

// This event is sent when a user submits feedback for a call.
type CallUserFeedbackSubmittedEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	// The rating given by the user (1-5)
	Rating int `json:"rating"`

	// Call session ID
	SessionID string `json:"session_id"`

	User UserResponse `json:"user"`

	// The type of event, "call.user_feedback" in this case
	Type string `json:"type"`

	// The reason provided by the user for the rating
	Reason *string `json:"reason,omitempty"`

	Sdk *string `json:"sdk,omitempty"`

	SdkVersion *string `json:"sdk_version,omitempty"`

	// Custom data provided by the user
	Custom map[string]any `json:"custom,omitempty"`
}

func (*CallUserFeedbackSubmittedEvent) GetEventType() string {
	return "call.user_feedback_submitted"
}

// This event is sent when a call member is muted
type CallUserMutedEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	FromUserID string `json:"from_user_id"`

	Reason string `json:"reason"`

	MutedUserIds []string `json:"muted_user_ids"`

	// The type of event: "call.user_muted" in this case
	Type string `json:"type"`
}

func (*CallUserMutedEvent) GetEventType() string {
	return "call.user_muted"
}

type CallsPerDayReport struct {
	Count int `json:"count"`
}

type CallsPerDayReportResponse struct {
	Daily []DailyAggregateCallsPerDayReportResponse `json:"daily"`
}

type CampaignChannelTemplate struct {
	Type string `json:"type"`

	Custom map[string]any `json:"custom"`

	ID *string `json:"id,omitempty"`

	Team *string `json:"team,omitempty"`

	Members []string `json:"members,omitempty"`
}

type CampaignCompletedEvent struct {
	CreatedAt Timestamp `json:"created_at"`

	Custom map[string]any `json:"custom"`

	Type string `json:"type"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	Campaign *CampaignResponse `json:"campaign,omitempty"`
}

func (*CampaignCompletedEvent) GetEventType() string {
	return "campaign.completed"
}

type CampaignMessageTemplate struct {
	PollID string `json:"poll_id"`

	Text string `json:"text"`

	Attachments []Attachment `json:"attachments"`

	Custom map[string]any `json:"custom"`
}

type CampaignResponse struct {
	CreateChannels bool `json:"create_channels"`

	CreatedAt Timestamp `json:"created_at"`

	Description string `json:"description"`

	ID string `json:"id"`

	Name string `json:"name"`

	SenderID string `json:"sender_id"`

	SenderMode string `json:"sender_mode"`

	SenderVisibility string `json:"sender_visibility"`

	ShowChannels bool `json:"show_channels"`

	SkipPush bool `json:"skip_push"`

	SkipWebhook bool `json:"skip_webhook"`

	Status string `json:"status"`

	UpdatedAt Timestamp `json:"updated_at"`

	SegmentIds []string `json:"segment_ids"`

	Segments []Segment `json:"segments"`

	UserIds []string `json:"user_ids"`

	Users []UserResponse `json:"users"`

	Stats CampaignStatsResponse `json:"stats"`

	ScheduledFor *Timestamp `json:"scheduled_for,omitempty"`

	StopAt *Timestamp `json:"stop_at,omitempty"`

	ChannelTemplate *CampaignChannelTemplate `json:"channel_template,omitempty"`

	MessageTemplate *CampaignMessageTemplate `json:"message_template,omitempty"`

	Sender *UserResponse `json:"sender,omitempty"`
}

type CampaignStartedEvent struct {
	CreatedAt Timestamp `json:"created_at"`

	Custom map[string]any `json:"custom"`

	Type string `json:"type"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	Campaign *CampaignResponse `json:"campaign,omitempty"`
}

func (*CampaignStartedEvent) GetEventType() string {
	return "campaign.started"
}

type CampaignStatsResponse struct {
	Progress float64 `json:"progress"`

	StatsChannelsCreated int `json:"stats_channels_created"`

	StatsCompletedAt Timestamp `json:"stats_completed_at"`

	StatsMessagesSent int `json:"stats_messages_sent"`

	StatsStartedAt Timestamp `json:"stats_started_at"`

	StatsUsersRead int `json:"stats_users_read"`

	StatsUsersSent int `json:"stats_users_sent"`
}

type Channel struct {
	AutoTranslationLanguage string `json:"auto_translation_language"`

	Cid string `json:"cid"`

	CreatedAt Timestamp `json:"created_at"`

	Disabled bool `json:"disabled"`

	Frozen bool `json:"frozen"`

	ID string `json:"id"`

	UpdatedAt Timestamp `json:"updated_at"`

	Type string `json:"type"`

	Custom map[string]any `json:"custom"`

	AutoTranslationEnabled *bool `json:"auto_translation_enabled,omitempty"`

	Cooldown *int `json:"cooldown,omitempty"`

	DeletedAt *Timestamp `json:"deleted_at,omitempty"`

	LastCampaigns *string `json:"last_campaigns,omitempty"`

	LastMessageAt *Timestamp `json:"last_message_at,omitempty"`

	MemberCount *int `json:"member_count,omitempty"`

	MessageCount *int `json:"message_count,omitempty"`

	MessageCountUpdatedAt *Timestamp `json:"message_count_updated_at,omitempty"`

	Team *string `json:"team,omitempty"`

	ActiveLiveLocations []SharedLocation `json:"active_live_locations,omitempty"`

	Invites []ChannelMember `json:"invites,omitempty"`

	Members []ChannelMember `json:"members,omitempty"`

	Config *ChannelConfig `json:"config,omitempty"`

	ConfigOverrides *ConfigOverrides `json:"config_overrides,omitempty"`

	CreatedBy *User `json:"created_by,omitempty"`

	MembersLookup map[string]*ChannelMemberLookup `json:"members_lookup,omitempty"`

	TruncatedBy *User `json:"truncated_by,omitempty"`
}

type ChannelConfig struct {
	Automod string `json:"automod"`

	AutomodBehavior string `json:"automod_behavior"`

	ConnectEvents bool `json:"connect_events"`

	CountMessages bool `json:"count_messages"`

	CreatedAt Timestamp `json:"created_at"`

	CustomEvents bool `json:"custom_events"`

	MarkMessagesPending bool `json:"mark_messages_pending"`

	MaxMessageLength int `json:"max_message_length"`

	Mutes bool `json:"mutes"`

	Name string `json:"name"`

	Polls bool `json:"polls"`

	PushNotifications bool `json:"push_notifications"`

	Quotes bool `json:"quotes"`

	Reactions bool `json:"reactions"`

	ReadEvents bool `json:"read_events"`

	Reminders bool `json:"reminders"`

	Replies bool `json:"replies"`

	Search bool `json:"search"`

	SharedLocations bool `json:"shared_locations"`

	SkipLastMsgUpdateForSystemMsgs bool `json:"skip_last_msg_update_for_system_msgs"`

	TypingEvents bool `json:"typing_events"`

	UpdatedAt Timestamp `json:"updated_at"`

	Uploads bool `json:"uploads"`

	UrlEnrichment bool `json:"url_enrichment"`

	UserMessageReminders bool `json:"user_message_reminders"`

	Commands []string `json:"commands"`

	Blocklist *string `json:"blocklist,omitempty"`

	BlocklistBehavior *string `json:"blocklist_behavior,omitempty"`

	PartitionSize *int `json:"partition_size,omitempty"`

	PartitionTtl *int `json:"partition_ttl,omitempty"`

	AllowedFlagReasons []string `json:"allowed_flag_reasons,omitempty"`

	Blocklists []BlockListOptions `json:"blocklists,omitempty"`

	AutomodThresholds *Thresholds `json:"automod_thresholds,omitempty"`
}

type ChannelConfigWithInfo struct {
	Automod string `json:"automod"`

	AutomodBehavior string `json:"automod_behavior"`

	ConnectEvents bool `json:"connect_events"`

	CountMessages bool `json:"count_messages"`

	CreatedAt Timestamp `json:"created_at"`

	CustomEvents bool `json:"custom_events"`

	MarkMessagesPending bool `json:"mark_messages_pending"`

	MaxMessageLength int `json:"max_message_length"`

	Mutes bool `json:"mutes"`

	Name string `json:"name"`

	Polls bool `json:"polls"`

	PushNotifications bool `json:"push_notifications"`

	Quotes bool `json:"quotes"`

	Reactions bool `json:"reactions"`

	ReadEvents bool `json:"read_events"`

	Reminders bool `json:"reminders"`

	Replies bool `json:"replies"`

	Search bool `json:"search"`

	SharedLocations bool `json:"shared_locations"`

	SkipLastMsgUpdateForSystemMsgs bool `json:"skip_last_msg_update_for_system_msgs"`

	TypingEvents bool `json:"typing_events"`

	UpdatedAt Timestamp `json:"updated_at"`

	Uploads bool `json:"uploads"`

	UrlEnrichment bool `json:"url_enrichment"`

	UserMessageReminders bool `json:"user_message_reminders"`

	Commands []Command `json:"commands"`

	Blocklist *string `json:"blocklist,omitempty"`

	BlocklistBehavior *string `json:"blocklist_behavior,omitempty"`

	PartitionSize *int `json:"partition_size,omitempty"`

	PartitionTtl *string `json:"partition_ttl,omitempty"`

	AllowedFlagReasons []string `json:"allowed_flag_reasons,omitempty"`

	Blocklists []BlockListOptions `json:"blocklists,omitempty"`

	AutomodThresholds *Thresholds `json:"automod_thresholds,omitempty"`

	Grants map[string][]string `json:"grants,omitempty"`
}

type ChannelCreatedEvent struct {
	CreatedAt Timestamp `json:"created_at"`

	Type string `json:"type"`
}

func (*ChannelCreatedEvent) GetEventType() string {
	return "channel.created"
}

type ChannelDeletedEvent struct {
	ChannelID string `json:"channel_id"`

	ChannelMemberCount int `json:"channel_member_count"`

	ChannelType string `json:"channel_type"`

	Cid string `json:"cid"`

	CreatedAt Timestamp `json:"created_at"`

	Type string `json:"type"`

	Team *string `json:"team,omitempty"`

	Channel *ChannelResponse `json:"channel,omitempty"`
}

func (*ChannelDeletedEvent) GetEventType() string {
	return "channel.deleted"
}

type ChannelExport struct {
	Cid *string `json:"cid,omitempty"`

	// Channel ID
	ID *string `json:"id,omitempty"`

	// Date to export messages since
	MessagesSince *Timestamp `json:"messages_since,omitempty"`

	// Date to export messages until
	MessagesUntil *Timestamp `json:"messages_until,omitempty"`

	// Channel type
	Type *string `json:"type,omitempty"`
}

type ChannelFrozenEvent struct {
	ChannelID string `json:"channel_id"`

	ChannelType string `json:"channel_type"`

	Cid string `json:"cid"`

	CreatedAt Timestamp `json:"created_at"`

	Type string `json:"type"`
}

func (*ChannelFrozenEvent) GetEventType() string {
	return "channel.frozen"
}

type ChannelGetOrCreateRequest struct {
	// Whether this channel will be hidden for the user who created the channel or not
	HideForCreator *bool `json:"hide_for_creator,omitempty"`

	// Refresh channel state
	State *bool `json:"state,omitempty"`

	ThreadUnreadCounts *bool `json:"thread_unread_counts,omitempty"`

	Data *ChannelInput `json:"data,omitempty"`

	Members *PaginationParams `json:"members,omitempty"`

	Messages *MessagePaginationParams `json:"messages,omitempty"`

	Watchers *PaginationParams `json:"watchers,omitempty"`
}

type ChannelHiddenEvent struct {
	ChannelID string `json:"channel_id"`

	ChannelMemberCount int `json:"channel_member_count"`

	ChannelType string `json:"channel_type"`

	Cid string `json:"cid"`

	ClearHistory bool `json:"clear_history"`

	CreatedAt Timestamp `json:"created_at"`

	Type string `json:"type"`

	Channel *ChannelResponse `json:"channel,omitempty"`

	User *User `json:"user,omitempty"`
}

func (*ChannelHiddenEvent) GetEventType() string {
	return "channel.hidden"
}

type ChannelInput struct {
	// Enable or disable auto translation
	AutoTranslationEnabled *bool `json:"auto_translation_enabled,omitempty"`

	// Switch auto translation language
	AutoTranslationLanguage *string `json:"auto_translation_language,omitempty"`

	CreatedByID *string `json:"created_by_id,omitempty"`

	Disabled *bool `json:"disabled,omitempty"`

	// Freeze or unfreeze the channel
	Frozen *bool `json:"frozen,omitempty"`

	// Team the channel belongs to (if multi-tenant mode is enabled)
	Team *string `json:"team,omitempty"`

	TruncatedByID *string `json:"truncated_by_id,omitempty"`

	Invites []ChannelMember `json:"invites,omitempty"`

	Members []ChannelMember `json:"members,omitempty"`

	ConfigOverrides *ChannelConfig `json:"config_overrides,omitempty"`

	CreatedBy *UserRequest `json:"created_by,omitempty"`

	Custom map[string]any `json:"custom,omitempty"`
}

type ChannelMember struct {
	// Whether member is banned this channel or not
	Banned bool `json:"banned"`

	// Role of the member in the channel
	ChannelRole string `json:"channel_role"`

	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	NotificationsMuted bool `json:"notifications_muted"`

	// Whether member is shadow banned in this channel or not
	ShadowBanned bool `json:"shadow_banned"`

	// Date/time of the last update
	UpdatedAt Timestamp `json:"updated_at"`

	Custom map[string]any `json:"custom"`

	ArchivedAt *Timestamp `json:"archived_at,omitempty"`

	// Expiration date of the ban
	BanExpires *Timestamp `json:"ban_expires,omitempty"`

	DeletedAt *Timestamp `json:"deleted_at,omitempty"`

	// Date when invite was accepted
	InviteAcceptedAt *Timestamp `json:"invite_accepted_at,omitempty"`

	// Date when invite was rejected
	InviteRejectedAt *Timestamp `json:"invite_rejected_at,omitempty"`

	// Whether member was invited or not
	Invited *bool `json:"invited,omitempty"`

	// Whether member is channel moderator or not
	IsModerator *bool `json:"is_moderator,omitempty"`

	PinnedAt *Timestamp `json:"pinned_at,omitempty"`

	// Permission level of the member in the channel (DEPRECATED: use channel_role instead)
	Role *string `json:"role,omitempty"`

	Status *string `json:"status,omitempty"`

	UserID *string `json:"user_id,omitempty"`

	DeletedMessages []string `json:"deleted_messages,omitempty"`

	User *UserResponse `json:"user,omitempty"`
}

type ChannelMemberLookup struct {
	Archived bool `json:"archived"`

	Banned bool `json:"banned"`

	Hidden bool `json:"hidden"`

	Pinned bool `json:"pinned"`

	ArchivedAt *Timestamp `json:"archived_at,omitempty"`

	BanExpires *Timestamp `json:"ban_expires,omitempty"`

	PinnedAt *Timestamp `json:"pinned_at,omitempty"`
}

type ChannelMemberResponse struct {
	ChannelRole string `json:"channel_role"`
}

type ChannelMessages struct {
	Messages []Message `json:"messages"`

	Channel *ChannelResponse `json:"channel,omitempty"`
}

type ChannelMute struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	// Date/time of the last update
	UpdatedAt Timestamp `json:"updated_at"`

	// Date/time of mute expiration
	Expires *Timestamp `json:"expires,omitempty"`

	Channel *ChannelResponse `json:"channel,omitempty"`

	User *UserResponse `json:"user,omitempty"`
}

type ChannelMutedEvent struct {
	CreatedAt Timestamp `json:"created_at"`

	Type string `json:"type"`
}

func (*ChannelMutedEvent) GetEventType() string {
	return "channel.muted"
}

type ChannelOwnCapability string

const (
	BAN_CHANNEL_MEMBERS                ChannelOwnCapability = "ban-channel-members"
	CAST_POLL_VOTE                     ChannelOwnCapability = "cast-poll-vote"
	CONNECT_EVENTS                     ChannelOwnCapability = "connect-events"
	CREATE_ATTACHMENT                  ChannelOwnCapability = "create-attachment"
	DELETE_ANY_MESSAGE                 ChannelOwnCapability = "delete-any-message"
	DELETE_CHANNEL                     ChannelOwnCapability = "delete-channel"
	DELETE_OWN_MESSAGE                 ChannelOwnCapability = "delete-own-message"
	FLAG_MESSAGE                       ChannelOwnCapability = "flag-message"
	FREEZE_CHANNEL                     ChannelOwnCapability = "freeze-channel"
	JOIN_CHANNEL                       ChannelOwnCapability = "join-channel"
	LEAVE_CHANNEL                      ChannelOwnCapability = "leave-channel"
	MUTE_CHANNEL                       ChannelOwnCapability = "mute-channel"
	PIN_MESSAGE                        ChannelOwnCapability = "pin-message"
	QUERY_POLL_VOTES                   ChannelOwnCapability = "query-poll-votes"
	QUOTE_MESSAGE                      ChannelOwnCapability = "quote-message"
	READ_EVENTS                        ChannelOwnCapability = "read-events"
	SEARCH_MESSAGES                    ChannelOwnCapability = "search-messages"
	SEND_CUSTOM_EVENTS                 ChannelOwnCapability = "send-custom-events"
	SEND_LINKS                         ChannelOwnCapability = "send-links"
	SEND_MESSAGE                       ChannelOwnCapability = "send-message"
	SEND_POLL                          ChannelOwnCapability = "send-poll"
	SEND_REACTION                      ChannelOwnCapability = "send-reaction"
	SEND_REPLY                         ChannelOwnCapability = "send-reply"
	SEND_RESTRICTED_VISIBILITY_MESSAGE ChannelOwnCapability = "send-restricted-visibility-message"
	SEND_TYPING_EVENTS                 ChannelOwnCapability = "send-typing-events"
	SET_CHANNEL_COOLDOWN               ChannelOwnCapability = "set-channel-cooldown"
	SHARE_LOCATION                     ChannelOwnCapability = "share-location"
	SKIP_SLOW_MODE                     ChannelOwnCapability = "skip-slow-mode"
	SLOW_MODE                          ChannelOwnCapability = "slow-mode"
	TYPING_EVENTS                      ChannelOwnCapability = "typing-events"
	UPDATE_ANY_MESSAGE                 ChannelOwnCapability = "update-any-message"
	UPDATE_CHANNEL                     ChannelOwnCapability = "update-channel"
	UPDATE_CHANNEL_MEMBERS             ChannelOwnCapability = "update-channel-members"
	UPDATE_OWN_MESSAGE                 ChannelOwnCapability = "update-own-message"
	UPDATE_THREAD                      ChannelOwnCapability = "update-thread"
	UPLOAD_FILE                        ChannelOwnCapability = "upload-file"
)

func (c ChannelOwnCapability) String() string {
	return string(c)
}

type ChannelPushPreferences struct {
	ChatLevel *string `json:"chat_level,omitempty"`

	DisabledUntil *Timestamp `json:"disabled_until,omitempty"`
}

// Represents channel in chat
type ChannelResponse struct {
	// Channel CID (<type>:<id>)
	Cid string `json:"cid"`

	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	Disabled bool `json:"disabled"`

	// Whether channel is frozen or not
	Frozen bool `json:"frozen"`

	// Channel unique ID
	ID string `json:"id"`

	// Date/time of the last update
	UpdatedAt Timestamp `json:"updated_at"`

	// Type of the channel
	Type string `json:"type"`

	// Custom data for this object
	Custom map[string]any `json:"custom"`

	// Whether auto translation is enabled or not
	AutoTranslationEnabled *bool `json:"auto_translation_enabled,omitempty"`

	// Language to translate to when auto translation is active
	AutoTranslationLanguage *string `json:"auto_translation_language,omitempty"`

	// Whether this channel is blocked by current user or not
	Blocked *bool `json:"blocked,omitempty"`

	// Cooldown period after sending each message
	Cooldown *int `json:"cooldown,omitempty"`

	// Date/time of deletion
	DeletedAt *Timestamp `json:"deleted_at,omitempty"`

	// Whether this channel is hidden by current user or not
	Hidden *bool `json:"hidden,omitempty"`

	// Date since when the message history is accessible
	HideMessagesBefore *Timestamp `json:"hide_messages_before,omitempty"`

	// Date of the last message sent
	LastMessageAt *Timestamp `json:"last_message_at,omitempty"`

	// Number of members in the channel
	MemberCount *int `json:"member_count,omitempty"`

	// Number of messages in the channel
	MessageCount *int `json:"message_count,omitempty"`

	// Date of mute expiration
	MuteExpiresAt *Timestamp `json:"mute_expires_at,omitempty"`

	// Whether this channel is muted or not
	Muted *bool `json:"muted,omitempty"`

	// Team the channel belongs to (multi-tenant only)
	Team *string `json:"team,omitempty"`

	// Date of the latest truncation of the channel
	TruncatedAt *Timestamp `json:"truncated_at,omitempty"`

	// List of channel members (max 100)
	Members []ChannelMember `json:"members,omitempty"`

	// List of channel capabilities of authenticated user
	OwnCapabilities []ChannelOwnCapability `json:"own_capabilities,omitempty"`

	Config *ChannelConfigWithInfo `json:"config,omitempty"`

	CreatedBy *UserResponse `json:"created_by,omitempty"`

	TruncatedBy *UserResponse `json:"truncated_by,omitempty"`
}

type ChannelStateResponse struct {
	Duration string `json:"duration"`

	Members []ChannelMember `json:"members"`

	Messages []MessageResponse `json:"messages"`

	PinnedMessages []MessageResponse `json:"pinned_messages"`

	Threads []ThreadStateResponse `json:"threads"`

	Hidden *bool `json:"hidden,omitempty"`

	HideMessagesBefore *Timestamp `json:"hide_messages_before,omitempty"`

	WatcherCount *int `json:"watcher_count,omitempty"`

	ActiveLiveLocations []SharedLocationResponseData `json:"active_live_locations,omitempty"`

	PendingMessages []PendingMessageResponse `json:"pending_messages,omitempty"`

	Read []ReadStateResponse `json:"read,omitempty"`

	Watchers []UserResponse `json:"watchers,omitempty"`

	Channel *ChannelResponse `json:"channel,omitempty"`

	Draft *DraftResponse `json:"draft,omitempty"`

	Membership *ChannelMember `json:"membership,omitempty"`

	PushPreferences *ChannelPushPreferences `json:"push_preferences,omitempty"`
}

type ChannelStateResponseFields struct {
	// List of channel members
	Members []ChannelMember `json:"members"`

	// List of channel messages
	Messages []MessageResponse `json:"messages"`

	// List of pinned messages in the channel
	PinnedMessages []MessageResponse `json:"pinned_messages"`

	Threads []ThreadStateResponse `json:"threads"`

	// Whether this channel is hidden or not
	Hidden *bool `json:"hidden,omitempty"`

	// Messages before this date are hidden from the user
	HideMessagesBefore *Timestamp `json:"hide_messages_before,omitempty"`

	// Number of channel watchers
	WatcherCount *int `json:"watcher_count,omitempty"`

	// Active live locations in the channel
	ActiveLiveLocations []SharedLocationResponseData `json:"active_live_locations,omitempty"`

	// Pending messages that this user has sent
	PendingMessages []PendingMessageResponse `json:"pending_messages,omitempty"`

	// List of read states
	Read []ReadStateResponse `json:"read,omitempty"`

	// List of user who is watching the channel
	Watchers []UserResponse `json:"watchers,omitempty"`

	Channel *ChannelResponse `json:"channel,omitempty"`

	Draft *DraftResponse `json:"draft,omitempty"`

	Membership *ChannelMember `json:"membership,omitempty"`

	PushPreferences *ChannelPushPreferences `json:"push_preferences,omitempty"`
}

type ChannelTruncatedEvent struct {
	ChannelID string `json:"channel_id"`

	ChannelMemberCount int `json:"channel_member_count"`

	ChannelType string `json:"channel_type"`

	Cid string `json:"cid"`

	CreatedAt Timestamp `json:"created_at"`

	Type string `json:"type"`

	Channel *ChannelResponse `json:"channel,omitempty"`
}

func (*ChannelTruncatedEvent) GetEventType() string {
	return "channel.truncated"
}

type ChannelTypeConfig struct {
	Automod string `json:"automod"`

	AutomodBehavior string `json:"automod_behavior"`

	ConnectEvents bool `json:"connect_events"`

	CountMessages bool `json:"count_messages"`

	CreatedAt Timestamp `json:"created_at"`

	CustomEvents bool `json:"custom_events"`

	MarkMessagesPending bool `json:"mark_messages_pending"`

	MaxMessageLength int `json:"max_message_length"`

	Mutes bool `json:"mutes"`

	Name string `json:"name"`

	Polls bool `json:"polls"`

	PushNotifications bool `json:"push_notifications"`

	Quotes bool `json:"quotes"`

	Reactions bool `json:"reactions"`

	ReadEvents bool `json:"read_events"`

	Reminders bool `json:"reminders"`

	Replies bool `json:"replies"`

	Search bool `json:"search"`

	SharedLocations bool `json:"shared_locations"`

	SkipLastMsgUpdateForSystemMsgs bool `json:"skip_last_msg_update_for_system_msgs"`

	TypingEvents bool `json:"typing_events"`

	UpdatedAt Timestamp `json:"updated_at"`

	Uploads bool `json:"uploads"`

	UrlEnrichment bool `json:"url_enrichment"`

	UserMessageReminders bool `json:"user_message_reminders"`

	Commands []Command `json:"commands"`

	Permissions []PolicyRequest `json:"permissions"`

	Grants map[string][]string `json:"grants"`

	Blocklist *string `json:"blocklist,omitempty"`

	BlocklistBehavior *string `json:"blocklist_behavior,omitempty"`

	PartitionSize *int `json:"partition_size,omitempty"`

	PartitionTtl *string `json:"partition_ttl,omitempty"`

	AllowedFlagReasons []string `json:"allowed_flag_reasons,omitempty"`

	Blocklists []BlockListOptions `json:"blocklists,omitempty"`

	AutomodThresholds *Thresholds `json:"automod_thresholds,omitempty"`
}

type ChannelUnFrozenEvent struct {
	ChannelID string `json:"channel_id"`

	ChannelType string `json:"channel_type"`

	Cid string `json:"cid"`

	CreatedAt Timestamp `json:"created_at"`

	Type string `json:"type"`
}

func (*ChannelUnFrozenEvent) GetEventType() string {
	return "channel.unfrozen"
}

type ChannelUnmutedEvent struct {
	CreatedAt Timestamp `json:"created_at"`

	Type string `json:"type"`
}

func (*ChannelUnmutedEvent) GetEventType() string {
	return "channel.unmuted"
}

type ChannelUpdatedEvent struct {
	ChannelID string `json:"channel_id"`

	ChannelMemberCount int `json:"channel_member_count"`

	ChannelType string `json:"channel_type"`

	Cid string `json:"cid"`

	CreatedAt Timestamp `json:"created_at"`

	Type string `json:"type"`

	Team *string `json:"team,omitempty"`

	Channel *ChannelResponse `json:"channel,omitempty"`

	Message *Message `json:"message,omitempty"`

	User *User `json:"user,omitempty"`
}

func (*ChannelUpdatedEvent) GetEventType() string {
	return "channel.updated"
}

type ChannelVisibleEvent struct {
	ChannelID string `json:"channel_id"`

	ChannelType string `json:"channel_type"`

	Cid string `json:"cid"`

	CreatedAt Timestamp `json:"created_at"`

	Type string `json:"type"`

	User *User `json:"user,omitempty"`
}

func (*ChannelVisibleEvent) GetEventType() string {
	return "channel.visible"
}

type ChatActivityStatsResponse struct {
	Messages *MessageStatsResponse `json:"Messages,omitempty"`
}

// Basic response information
type CheckExternalStorageResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	FileUrl string `json:"file_url"`
}

type CheckPushResponse struct {
	Duration string `json:"duration"`

	// The event type that was tested
	EventType *string `json:"event_type,omitempty"`

	RenderedApnTemplate *string `json:"rendered_apn_template,omitempty"`

	RenderedFirebaseTemplate *string `json:"rendered_firebase_template,omitempty"`

	// Don't require existing devices to render templates
	SkipDevices *bool `json:"skip_devices,omitempty"`

	// List of general errors
	GeneralErrors []string `json:"general_errors,omitempty"`

	// Object with device errors
	DeviceErrors map[string]DeviceErrorInfo `json:"device_errors,omitempty"`

	RenderedMessage map[string]string `json:"rendered_message,omitempty"`
}

type CheckResponse struct {
	Duration string `json:"duration"`

	// Suggested action based on moderation results
	RecommendedAction string `json:"recommended_action"`

	// Status of the moderation check (completed or pending)
	Status string `json:"status"`

	// ID of the running moderation task
	TaskID *string `json:"task_id,omitempty"`

	Item *ReviewQueueItemResponse `json:"item,omitempty"`
}

type CheckSNSResponse struct {
	Duration string `json:"duration"`

	// Validation result
	Status string `json:"status"`

	// Error text
	Error *string `json:"error,omitempty"`

	// Error data
	Data map[string]any `json:"data,omitempty"`
}

type CheckSQSResponse struct {
	Duration string `json:"duration"`

	// Validation result
	Status string `json:"status"`

	// Error text
	Error *string `json:"error,omitempty"`

	// Error data
	Data map[string]any `json:"data,omitempty"`
}

type ClientOSDataResponse struct {
	Architecture *string `json:"architecture,omitempty"`

	Name *string `json:"name,omitempty"`

	Version *string `json:"version,omitempty"`
}

// This event is sent when closed captions are being sent in a call, clients should use this to show the closed captions in the call screen
type ClosedCaptionEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	ClosedCaption CallClosedCaption `json:"closed_caption"`

	// The type of event: "call.closed_caption" in this case
	Type string `json:"type"`
}

func (*ClosedCaptionEvent) GetEventType() string {
	return "call.closed_caption"
}

// Basic response information
type CollectUserFeedbackResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`
}

// Represents custom chat command
type Command struct {
	// Arguments help text, shown in commands auto-completion
	Args string `json:"args"`

	// Description, shown in commands auto-completion
	Description string `json:"description"`

	// Unique command name
	Name string `json:"name"`

	// Set name used for grouping commands
	Set string `json:"set"`

	// Date/time of creation
	CreatedAt *Timestamp `json:"created_at,omitempty"`

	// Date/time of the last update
	UpdatedAt *Timestamp `json:"updated_at,omitempty"`
}

// Emitted when a comment is added to an activity.
type CommentAddedEvent struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	Fid string `json:"fid"`

	Activity ActivityResponse `json:"activity"`

	Comment CommentResponse `json:"comment"`

	Custom map[string]any `json:"custom"`

	// The type of event: "feeds.comment.added" in this case
	Type string `json:"type"`

	FeedVisibility *string `json:"feed_visibility,omitempty"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	User *UserResponseCommonFields `json:"user,omitempty"`
}

func (*CommentAddedEvent) GetEventType() string {
	return "feeds.comment.added"
}

// Emitted when a comment is deleted.
type CommentDeletedEvent struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	Fid string `json:"fid"`

	Comment CommentResponse `json:"comment"`

	Custom map[string]any `json:"custom"`

	// The type of event: "feeds.comment.deleted" in this case
	Type string `json:"type"`

	FeedVisibility *string `json:"feed_visibility,omitempty"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	User *UserResponseCommonFields `json:"user,omitempty"`
}

func (*CommentDeletedEvent) GetEventType() string {
	return "feeds.comment.deleted"
}

// Emitted when a reaction is added to a comment.
type CommentReactionAddedEvent struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	Fid string `json:"fid"`

	Activity ActivityResponse `json:"activity"`

	Comment CommentResponse `json:"comment"`

	Custom map[string]any `json:"custom"`

	Reaction FeedsReactionResponse `json:"reaction"`

	// The type of event: "feeds.comment.reaction.added" in this case
	Type string `json:"type"`

	FeedVisibility *string `json:"feed_visibility,omitempty"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	User *UserResponseCommonFields `json:"user,omitempty"`
}

func (*CommentReactionAddedEvent) GetEventType() string {
	return "feeds.comment.reaction.added"
}

// Emitted when a reaction is deleted from a comment.
type CommentReactionDeletedEvent struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	Fid string `json:"fid"`

	Comment CommentResponse `json:"comment"`

	Custom map[string]any `json:"custom"`

	Reaction FeedsReactionResponse `json:"reaction"`

	// The type of reaction that was removed
	Type string `json:"type"`

	FeedVisibility *string `json:"feed_visibility,omitempty"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`
}

func (*CommentReactionDeletedEvent) GetEventType() string {
	return "feeds.comment.reaction.deleted"
}

// Emitted when a reaction is updated on a comment.
type CommentReactionUpdatedEvent struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	Fid string `json:"fid"`

	Activity ActivityResponse `json:"activity"`

	Comment CommentResponse `json:"comment"`

	Custom map[string]any `json:"custom"`

	Reaction FeedsReactionResponse `json:"reaction"`

	// The type of event: "feeds.comment.reaction.updated" in this case
	Type string `json:"type"`

	FeedVisibility *string `json:"feed_visibility,omitempty"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	User *UserResponseCommonFields `json:"user,omitempty"`
}

func (*CommentReactionUpdatedEvent) GetEventType() string {
	return "feeds.comment.reaction.updated"
}

type CommentResponse struct {
	// Confidence score of the comment
	ConfidenceScore float64 `json:"confidence_score"`

	// When the comment was created
	CreatedAt Timestamp `json:"created_at"`

	// Number of downvotes for this comment
	DownvoteCount int `json:"downvote_count"`

	// Unique identifier for the comment
	ID string `json:"id"`

	// ID of the object this comment is associated with
	ObjectID string `json:"object_id"`

	// Type of the object this comment is associated with
	ObjectType string `json:"object_type"`

	// Number of reactions to this comment
	ReactionCount int `json:"reaction_count"`

	// Number of replies to this comment
	ReplyCount int `json:"reply_count"`

	// Score of the comment based on reactions
	Score int `json:"score"`

	// Status of the comment (e.g., active, deleted)
	Status string `json:"status"`

	// When the comment was last updated
	UpdatedAt Timestamp `json:"updated_at"`

	// Number of upvotes for this comment
	UpvoteCount int `json:"upvote_count"`

	// Users mentioned in the comment
	MentionedUsers []UserResponse `json:"mentioned_users"`

	// Current user's reactions to this activity
	OwnReactions []FeedsReactionResponse `json:"own_reactions"`

	User UserResponse `json:"user"`

	// Controversy score of the comment
	ControversyScore *float64 `json:"controversy_score,omitempty"`

	// When the comment was deleted
	DeletedAt *Timestamp `json:"deleted_at,omitempty"`

	// ID of parent comment for nested replies
	ParentID *string `json:"parent_id,omitempty"`

	// Text content of the comment
	Text *string `json:"text,omitempty"`

	Attachments []Attachment `json:"attachments,omitempty"`

	// Recent reactions to the comment
	LatestReactions []FeedsReactionResponse `json:"latest_reactions,omitempty"`

	// Custom data for the comment
	Custom map[string]any `json:"custom,omitempty"`

	Moderation *ModerationV2Response `json:"moderation,omitempty"`

	// Grouped reactions by type
	ReactionGroups map[string]*ReactionGroupResponse `json:"reaction_groups,omitempty"`
}

// Emitted when a comment is updated.
type CommentUpdatedEvent struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	Fid string `json:"fid"`

	Comment CommentResponse `json:"comment"`

	Custom map[string]any `json:"custom"`

	// The type of event: "feeds.comment.updated" in this case
	Type string `json:"type"`

	FeedVisibility *string `json:"feed_visibility,omitempty"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	User *UserResponseCommonFields `json:"user,omitempty"`
}

func (*CommentUpdatedEvent) GetEventType() string {
	return "feeds.comment.updated"
}

type ConfigOverrides struct {
	Commands []string `json:"commands"`

	Grants map[string][]string `json:"grants"`

	Blocklist *string `json:"blocklist,omitempty"`

	BlocklistBehavior *string `json:"blocklist_behavior,omitempty"`

	CountMessages *bool `json:"count_messages,omitempty"`

	MaxMessageLength *int `json:"max_message_length,omitempty"`

	Quotes *bool `json:"quotes,omitempty"`

	Reactions *bool `json:"reactions,omitempty"`

	Replies *bool `json:"replies,omitempty"`

	SharedLocations *bool `json:"shared_locations,omitempty"`

	TypingEvents *bool `json:"typing_events,omitempty"`

	Uploads *bool `json:"uploads,omitempty"`

	UrlEnrichment *bool `json:"url_enrichment,omitempty"`

	UserMessageReminders *bool `json:"user_message_reminders,omitempty"`
}

type ConfigResponse struct {
	// Whether moderation should be performed asynchronously
	Async bool `json:"async"`

	// When the configuration was created
	CreatedAt Timestamp `json:"created_at"`

	// Unique identifier for the moderation configuration
	Key string `json:"key"`

	// Team associated with the configuration
	Team string `json:"team"`

	// When the configuration was last updated
	UpdatedAt Timestamp `json:"updated_at"`

	SupportedVideoCallHarmTypes []string `json:"supported_video_call_harm_types"`

	AiImageConfig *AIImageConfig `json:"ai_image_config,omitempty"`

	AiTextConfig *AITextConfig `json:"ai_text_config,omitempty"`

	AiVideoConfig *AIVideoConfig `json:"ai_video_config,omitempty"`

	AutomodPlatformCircumventionConfig *AutomodPlatformCircumventionConfig `json:"automod_platform_circumvention_config,omitempty"`

	AutomodSemanticFiltersConfig *AutomodSemanticFiltersConfig `json:"automod_semantic_filters_config,omitempty"`

	AutomodToxicityConfig *AutomodToxicityConfig `json:"automod_toxicity_config,omitempty"`

	BlockListConfig *BlockListConfig `json:"block_list_config,omitempty"`

	LlmConfig *LLMConfig `json:"llm_config,omitempty"`

	VelocityFilterConfig *VelocityFilterConfig `json:"velocity_filter_config,omitempty"`

	VideoCallRuleConfig *VideoCallRuleConfig `json:"video_call_rule_config,omitempty"`
}

type ContentCountRuleParameters struct {
	Threshold *int `json:"threshold,omitempty"`

	TimeWindow *string `json:"time_window,omitempty"`
}

type CountByMinuteResponse struct {
	Count int `json:"count"`

	StartTs Timestamp `json:"start_ts"`
}

// Basic response information
type CreateBlockListResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Blocklist *BlockListResponse `json:"blocklist,omitempty"`
}

// Response for creating a call type
type CreateCallTypeResponse struct {
	// the time the call type was created
	CreatedAt Timestamp `json:"created_at"`

	Duration string `json:"duration"`

	// the name of the call type
	Name string `json:"name"`

	// the time the call type was last updated
	UpdatedAt Timestamp `json:"updated_at"`

	// the permissions granted to each role
	Grants map[string][]string `json:"grants"`

	NotificationSettings NotificationSettings `json:"notification_settings"`

	Settings CallSettingsResponse `json:"settings"`

	// the external storage for the call type
	ExternalStorage *string `json:"external_storage,omitempty"`
}

type CreateChannelTypeResponse struct {
	Automod string `json:"automod"`

	AutomodBehavior string `json:"automod_behavior"`

	ConnectEvents bool `json:"connect_events"`

	CountMessages bool `json:"count_messages"`

	CreatedAt Timestamp `json:"created_at"`

	CustomEvents bool `json:"custom_events"`

	Duration string `json:"duration"`

	MarkMessagesPending bool `json:"mark_messages_pending"`

	MaxMessageLength int `json:"max_message_length"`

	Mutes bool `json:"mutes"`

	Name string `json:"name"`

	Polls bool `json:"polls"`

	PushNotifications bool `json:"push_notifications"`

	Quotes bool `json:"quotes"`

	Reactions bool `json:"reactions"`

	ReadEvents bool `json:"read_events"`

	Reminders bool `json:"reminders"`

	Replies bool `json:"replies"`

	Search bool `json:"search"`

	SharedLocations bool `json:"shared_locations"`

	SkipLastMsgUpdateForSystemMsgs bool `json:"skip_last_msg_update_for_system_msgs"`

	TypingEvents bool `json:"typing_events"`

	UpdatedAt Timestamp `json:"updated_at"`

	Uploads bool `json:"uploads"`

	UrlEnrichment bool `json:"url_enrichment"`

	UserMessageReminders bool `json:"user_message_reminders"`

	Commands []string `json:"commands"`

	Permissions []PolicyRequest `json:"permissions"`

	Grants map[string][]string `json:"grants"`

	Blocklist *string `json:"blocklist,omitempty"`

	BlocklistBehavior *string `json:"blocklist_behavior,omitempty"`

	PartitionSize *int `json:"partition_size,omitempty"`

	PartitionTtl *string `json:"partition_ttl,omitempty"`

	AllowedFlagReasons []string `json:"allowed_flag_reasons,omitempty"`

	Blocklists []BlockListOptions `json:"blocklists,omitempty"`

	AutomodThresholds *Thresholds `json:"automod_thresholds,omitempty"`
}

type CreateCommandResponse struct {
	Duration string `json:"duration"`

	Command *Command `json:"command,omitempty"`
}

// Basic response information
type CreateExternalStorageResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`
}

type CreateFeedGroupResponse struct {
	Duration string `json:"duration"`

	FeedGroup FeedGroupResponse `json:"feed_group"`
}

type CreateFeedViewResponse struct {
	Duration string `json:"duration"`

	FeedView FeedViewResponse `json:"feed_view"`
}

type CreateFeedsBatchResponse struct {
	Duration string `json:"duration"`

	// List of created feeds
	Feeds []FeedResponse `json:"feeds"`
}

type CreateGuestResponse struct {
	// the access token to authenticate the user
	AccessToken string `json:"access_token"`

	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	User UserResponse `json:"user"`
}

// Basic response information
type CreateImportResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	ImportTask *ImportTask `json:"import_task,omitempty"`
}

// Basic response information
type CreateImportURLResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Path string `json:"path"`

	UploadUrl string `json:"upload_url"`
}

type CreateMembershipLevelResponse struct {
	Duration string `json:"duration"`

	MembershipLevel MembershipLevelResponse `json:"membership_level"`
}

// Basic response information
type CreateRoleResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Role Role `json:"role"`
}

type CustomActionRequest struct {
	ID *string `json:"id,omitempty"`

	Options map[string]any `json:"options,omitempty"`
}

type CustomCheckFlag struct {
	// Type of check (custom_check_text, custom_check_image, custom_check_video)
	Type string `json:"type"`

	// Optional explanation for the flag
	Reason *string `json:"reason,omitempty"`

	// Labels from various moderation sources
	Labels []string `json:"labels,omitempty"`

	// Additional metadata for the flag
	Custom map[string]any `json:"custom,omitempty"`
}

type CustomCheckResponse struct {
	Duration string `json:"duration"`

	// Unique identifier of the custom check
	ID string `json:"id"`

	// Status of the custom check
	Status string `json:"status"`

	Item *ReviewQueueItemResponse `json:"item,omitempty"`
}

// A custom event, this event is used to send custom events to other participants in the call.
type CustomVideoEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	// Custom data for this object
	Custom map[string]any `json:"custom"`

	User UserResponse `json:"user"`

	// The type of event, "custom" in this case
	Type string `json:"type"`
}

func (*CustomVideoEvent) GetEventType() string {
	return "custom"
}

type DailyAggregateCallDurationReportResponse struct {
	Date string `json:"date"`

	Report CallDurationReport `json:"report"`
}

type DailyAggregateCallParticipantCountReportResponse struct {
	Date string `json:"date"`

	Report CallParticipantCountReport `json:"report"`
}

type DailyAggregateCallsPerDayReportResponse struct {
	Date string `json:"date"`

	Report CallsPerDayReport `json:"report"`
}

type DailyAggregateQualityScoreReportResponse struct {
	Date string `json:"date"`

	Report QualityScoreReport `json:"report"`
}

type DailyAggregateSDKUsageReportResponse struct {
	Date string `json:"date"`

	Report SDKUsageReport `json:"report"`
}

type DailyAggregateUserFeedbackReportResponse struct {
	Date string `json:"date"`

	Report UserFeedbackReport `json:"report"`
}

type Data struct {
	ID string `json:"id"`
}

type DataDogInfo struct {
	APIKey *string `json:"api_key,omitempty"`

	Enabled *bool `json:"enabled,omitempty"`

	Site *string `json:"site,omitempty"`
}

type DeactivateUserResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	User *UserResponse `json:"user,omitempty"`
}

// Basic response information
type DeactivateUsersResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	TaskID string `json:"task_id"`
}

type DecayFunctionConfig struct {
	// Base value for decay function
	Base *string `json:"base,omitempty"`

	// Decay rate
	Decay *string `json:"decay,omitempty"`

	// Direction of decay
	Direction *string `json:"direction,omitempty"`

	// Offset value for decay function
	Offset *string `json:"offset,omitempty"`

	// Origin value for decay function
	Origin *string `json:"origin,omitempty"`

	// Scale factor for decay function
	Scale *string `json:"scale,omitempty"`
}

type DeleteActivitiesResponse struct {
	Duration string `json:"duration"`

	// List of activity IDs that were successfully deleted
	DeletedIds []string `json:"deleted_ids"`
}

type DeleteActivityReactionResponse struct {
	Duration string `json:"duration"`

	Activity ActivityResponse `json:"activity"`

	Reaction FeedsReactionResponse `json:"reaction"`
}

type DeleteActivityResponse struct {
	Duration string `json:"duration"`
}

type DeleteBookmarkFolderResponse struct {
	Duration string `json:"duration"`
}

type DeleteBookmarkResponse struct {
	Duration string `json:"duration"`

	Bookmark BookmarkResponse `json:"bookmark"`
}

// DeleteCallResponse is the payload for deleting a call.
type DeleteCallResponse struct {
	Duration string `json:"duration"`

	Call CallResponse `json:"call"`

	TaskID *string `json:"task_id,omitempty"`
}

// Basic response information
type DeleteChannelResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Channel *ChannelResponse `json:"channel,omitempty"`
}

type DeleteChannelsResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	TaskID *string `json:"task_id,omitempty"`

	// Map of channel IDs and their deletion results
	Result map[string]*DeleteChannelsResultResponse `json:"result,omitempty"`
}

type DeleteChannelsResultResponse struct {
	Status string `json:"status"`

	Error *string `json:"error,omitempty"`
}

type DeleteCommandResponse struct {
	Duration string `json:"duration"`

	// Command name
	Name string `json:"name"`
}

type DeleteCommentReactionResponse struct {
	Duration string `json:"duration"`

	Comment CommentResponse `json:"comment"`

	Reaction FeedsReactionResponse `json:"reaction"`
}

type DeleteCommentResponse struct {
	Duration string `json:"duration"`

	Activity ActivityResponse `json:"activity"`

	Comment CommentResponse `json:"comment"`
}

// Basic response information
type DeleteExternalStorageResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`
}

// Basic response information
type DeleteFeedGroupResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`
}

type DeleteFeedResponse struct {
	Duration string `json:"duration"`

	// The ID of the async task that will handle feed cleanup and hard deletion
	TaskID string `json:"task_id"`
}

// Response for deleting feed user data
type DeleteFeedUserDataResponse struct {
	// Number of activities that were deleted
	DeletedActivities int `json:"deleted_activities"`

	// Number of bookmarks that were deleted
	DeletedBookmarks int `json:"deleted_bookmarks"`

	// Number of comments that were deleted
	DeletedComments int `json:"deleted_comments"`

	// Number of reactions that were deleted
	DeletedReactions int `json:"deleted_reactions"`

	Duration string `json:"duration"`
}

type DeleteFeedViewResponse struct {
	Duration string `json:"duration"`
}

// Basic response information
type DeleteMessageResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Message MessageResponse `json:"message"`
}

type DeleteModerationConfigResponse struct {
	Duration string `json:"duration"`
}

// Basic response information
type DeleteModerationRuleResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`
}

type DeleteModerationTemplateResponse struct {
	Duration string `json:"duration"`
}

// Basic response information
type DeleteReactionResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Message MessageResponse `json:"message"`

	Reaction ReactionResponse `json:"reaction"`
}

// Response for DeleteRecording
type DeleteRecordingResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`
}

// Basic response information
type DeleteReminderResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`
}

// DeleteTranscriptionResponse is the payload for deleting a transcription.
type DeleteTranscriptionResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`
}

type DeleteUserRequest struct {
	DeleteConversationChannels *bool `json:"delete_conversation_channels,omitempty"`

	DeleteFeedsContent *bool `json:"delete_feeds_content,omitempty"`

	HardDelete *bool `json:"hard_delete,omitempty"`

	MarkMessagesDeleted *bool `json:"mark_messages_deleted,omitempty"`
}

type DeleteUsersResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	// ID of the task to delete users
	TaskID string `json:"task_id"`
}

type Device struct {
	CreatedAt Timestamp `json:"created_at"`

	ID string `json:"id"`

	PushProvider string `json:"push_provider"`

	UserID string `json:"user_id"`

	Disabled *bool `json:"disabled,omitempty"`

	DisabledReason *string `json:"disabled_reason,omitempty"`

	PushProviderName *string `json:"push_provider_name,omitempty"`

	Voip *bool `json:"voip,omitempty"`
}

type DeviceDataResponse struct {
	Name *string `json:"name,omitempty"`

	Version *string `json:"version,omitempty"`
}

type DeviceErrorInfo struct {
	ErrorMessage string `json:"error_message"`

	Provider string `json:"provider"`

	ProviderName string `json:"provider_name"`
}

// Response for Device
type DeviceResponse struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	// Device ID
	ID string `json:"id"`

	// Push provider
	PushProvider string `json:"push_provider"`

	// User ID
	UserID string `json:"user_id"`

	// Whether device is disabled or not
	Disabled *bool `json:"disabled,omitempty"`

	// Reason explaining why device had been disabled
	DisabledReason *string `json:"disabled_reason,omitempty"`

	// Push provider name
	PushProviderName *string `json:"push_provider_name,omitempty"`

	// When true the token is for Apple VoIP push notifications
	Voip *bool `json:"voip,omitempty"`
}

type DraftPayloadResponse struct {
	ID string `json:"id"`

	Text string `json:"text"`

	Custom map[string]any `json:"custom"`

	Html *string `json:"html,omitempty"`

	Mml *string `json:"mml,omitempty"`

	ParentID *string `json:"parent_id,omitempty"`

	PollID *string `json:"poll_id,omitempty"`

	QuotedMessageID *string `json:"quoted_message_id,omitempty"`

	ShowInChannel *bool `json:"show_in_channel,omitempty"`

	Silent *bool `json:"silent,omitempty"`

	Type *string `json:"type,omitempty"`

	Attachments []Attachment `json:"attachments,omitempty"`

	MentionedUsers []UserResponse `json:"mentioned_users,omitempty"`
}

type DraftResponse struct {
	ChannelCid string `json:"channel_cid"`

	CreatedAt Timestamp `json:"created_at"`

	Message DraftPayloadResponse `json:"message"`

	ParentID *string `json:"parent_id,omitempty"`

	Channel *ChannelResponse `json:"channel,omitempty"`

	ParentMessage *MessageResponse `json:"parent_message,omitempty"`

	QuotedMessage *MessageResponse `json:"quoted_message,omitempty"`
}

type EdgeResponse struct {
	ContinentCode string `json:"continent_code"`

	CountryIsoCode string `json:"country_iso_code"`

	Green int `json:"green"`

	ID string `json:"id"`

	LatencyTestUrl string `json:"latency_test_url"`

	Latitude float64 `json:"latitude"`

	Longitude float64 `json:"longitude"`

	Red int `json:"red"`

	SubdivisionIsoCode string `json:"subdivision_iso_code"`

	Yellow int `json:"yellow"`
}

type EgressHLSResponse struct {
	PlaylistUrl string `json:"playlist_url"`

	Status string `json:"status"`
}

type EgressRTMPResponse struct {
	Name string `json:"name"`

	StartedAt Timestamp `json:"started_at"`

	StreamKey *string `json:"stream_key,omitempty"`

	StreamUrl *string `json:"stream_url,omitempty"`
}

type EgressResponse struct {
	Broadcasting bool `json:"broadcasting"`

	Rtmps []EgressRTMPResponse `json:"rtmps"`

	FrameRecording *FrameRecordingResponse `json:"frame_recording,omitempty"`

	HLS *EgressHLSResponse `json:"hls,omitempty"`
}

// Response for ending a call
type EndCallResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`
}

type EnrichedActivity struct {
	ForeignID *string `json:"foreign_id,omitempty"`

	ID *string `json:"id,omitempty"`

	Score *float64 `json:"score,omitempty"`

	Verb *string `json:"verb,omitempty"`

	To []string `json:"to,omitempty"`

	Actor *Data `json:"actor,omitempty"`

	LatestReactions map[string][]EnrichedReaction `json:"latest_reactions,omitempty"`

	Object *Data `json:"object,omitempty"`

	Origin *Data `json:"origin,omitempty"`

	OwnReactions map[string][]EnrichedReaction `json:"own_reactions,omitempty"`

	ReactionCounts map[string]int `json:"reaction_counts,omitempty"`

	Target *Data `json:"target,omitempty"`
}

type EnrichedReaction struct {
	ActivityID string `json:"activity_id"`

	Kind string `json:"kind"`

	UserID string `json:"user_id"`

	ID *string `json:"id,omitempty"`

	Parent *string `json:"parent,omitempty"`

	TargetFeeds []string `json:"target_feeds,omitempty"`

	ChildrenCounts map[string]int `json:"children_counts,omitempty"`

	CreatedAt *Time `json:"created_at,omitempty"`

	Data map[string]any `json:"data,omitempty"`

	LatestChildren map[string][]EnrichedReaction `json:"latest_children,omitempty"`

	OwnChildren map[string][]EnrichedReaction `json:"own_children,omitempty"`

	UpdatedAt *Time `json:"updated_at,omitempty"`

	User *Data `json:"user,omitempty"`
}

type EntityCreatorResponse struct {
	// Number of minor actions performed on the user
	BanCount int `json:"ban_count"`

	Banned bool `json:"banned"`

	CreatedAt Timestamp `json:"created_at"`

	// Number of major actions performed on the user
	DeletedContentCount int `json:"deleted_content_count"`

	// Number of flag actions performed on the user
	FlaggedCount int `json:"flagged_count"`

	ID string `json:"id"`

	Invisible bool `json:"invisible"`

	Language string `json:"language"`

	Online bool `json:"online"`

	Role string `json:"role"`

	ShadowBanned bool `json:"shadow_banned"`

	UpdatedAt Timestamp `json:"updated_at"`

	BlockedUserIds []string `json:"blocked_user_ids"`

	Teams []string `json:"teams"`

	Custom map[string]any `json:"custom"`

	AvgResponseTime *int `json:"avg_response_time,omitempty"`

	BanExpires *Timestamp `json:"ban_expires,omitempty"`

	DeactivatedAt *Timestamp `json:"deactivated_at,omitempty"`

	DeletedAt *Timestamp `json:"deleted_at,omitempty"`

	Image *string `json:"image,omitempty"`

	LastActive *Timestamp `json:"last_active,omitempty"`

	Name *string `json:"name,omitempty"`

	RevokeTokensIssuedBefore *Timestamp `json:"revoke_tokens_issued_before,omitempty"`

	Devices []DeviceResponse `json:"devices,omitempty"`

	PrivacySettings *PrivacySettingsResponse `json:"privacy_settings,omitempty"`

	PushNotifications *PushNotificationSettingsResponse `json:"push_notifications,omitempty"`

	TeamsRole map[string]string `json:"teams_role,omitempty"`
}

type ErrorResult struct {
	Type string `json:"type"`

	Stacktrace *string `json:"stacktrace,omitempty"`

	Version *string `json:"version,omitempty"`
}

type EventHook struct {
	CreatedAt *Timestamp `json:"created_at,omitempty"`

	Enabled *bool `json:"enabled,omitempty"`

	HookType *string `json:"hook_type,omitempty"`

	ID *string `json:"id,omitempty"`

	Product *string `json:"product,omitempty"`

	SnsAuthType *string `json:"sns_auth_type,omitempty"`

	SnsKey *string `json:"sns_key,omitempty"`

	SnsRegion *string `json:"sns_region,omitempty"`

	SnsRoleArn *string `json:"sns_role_arn,omitempty"`

	SnsSecret *string `json:"sns_secret,omitempty"`

	SnsTopicArn *string `json:"sns_topic_arn,omitempty"`

	SqsAuthType *string `json:"sqs_auth_type,omitempty"`

	SqsKey *string `json:"sqs_key,omitempty"`

	SqsQueueUrl *string `json:"sqs_queue_url,omitempty"`

	SqsRegion *string `json:"sqs_region,omitempty"`

	SqsRoleArn *string `json:"sqs_role_arn,omitempty"`

	SqsSecret *string `json:"sqs_secret,omitempty"`

	TimeoutMs *int `json:"timeout_ms,omitempty"`

	UpdatedAt *Timestamp `json:"updated_at,omitempty"`

	WebhookUrl *string `json:"webhook_url,omitempty"`

	EventTypes []string `json:"event_types,omitempty"`

	Callback *AsyncModerationCallbackConfig `json:"callback,omitempty"`
}

type EventNotificationSettings struct {
	Enabled bool `json:"enabled"`

	APNS APNS `json:"apns"`

	Fcm FCM `json:"fcm"`
}

type EventRequest struct {
	Type string `json:"type"`

	ParentID *string `json:"parent_id,omitempty"`

	UserID *string `json:"user_id,omitempty"`

	Custom map[string]any `json:"custom,omitempty"`

	User *UserRequest `json:"user,omitempty"`
}

// Basic response information
type EventResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Event WSEvent `json:"event"`
}

type ExportChannelsResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	// ID of the task to export channels
	TaskID string `json:"task_id"`
}

// Response for exporting feed user data
type ExportFeedUserDataResponse struct {
	Duration string `json:"duration"`

	// The task ID for the export task
	TaskID string `json:"task_id"`
}

type ExportUserResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	// List of exported messages
	Messages []MessageResponse `json:"messages,omitempty"`

	// List of exported reactions
	Reactions []ReactionResponse `json:"reactions,omitempty"`

	User *UserResponse `json:"user,omitempty"`
}

// Basic response information
type ExportUsersResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	TaskID string `json:"task_id"`
}

type ExternalStorageResponse struct {
	Bucket string `json:"bucket"`

	Name string `json:"name"`

	Path string `json:"path"`

	Type string `json:"type"`
}

type FCM struct {
	Data map[string]any `json:"data,omitempty"`
}

// Emitted when a feed is created.
type FeedCreatedEvent struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	Fid string `json:"fid"`

	Members []FeedMemberResponse `json:"members"`

	Custom map[string]any `json:"custom"`

	Feed FeedResponse `json:"feed"`

	User UserResponseCommonFields `json:"user"`

	// The type of event: "feeds.feed.created" in this case
	Type string `json:"type"`

	FeedVisibility *string `json:"feed_visibility,omitempty"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`
}

func (*FeedCreatedEvent) GetEventType() string {
	return "feeds.feed.created"
}

// Emitted when a feed is deleted.
type FeedDeletedEvent struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	Fid string `json:"fid"`

	Custom map[string]any `json:"custom"`

	// The type of event: "feeds.feed.deleted" in this case
	Type string `json:"type"`

	FeedVisibility *string `json:"feed_visibility,omitempty"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	User *UserResponseCommonFields `json:"user,omitempty"`
}

func (*FeedDeletedEvent) GetEventType() string {
	return "feeds.feed.deleted"
}

type FeedGroup struct {
	AggregationVersion int `json:"AggregationVersion"`

	AppPK int `json:"AppPK"`

	CreatedAt Timestamp `json:"created_at"`

	DefaultVisibility string `json:"DefaultVisibility"`

	ID string `json:"ID"`

	UpdatedAt Timestamp `json:"updated_at"`

	ActivityProcessors []ActivityProcessorConfig `json:"ActivityProcessors"`

	ActivitySelectors []ActivitySelectorConfig `json:"ActivitySelectors"`

	Custom map[string]any `json:"Custom"`

	DeletedAt *Timestamp `json:"DeletedAt,omitempty"`

	LastFeedGetAt *Timestamp `json:"LastFeedGetAt,omitempty"`

	Aggregation *AggregationConfig `json:"Aggregation,omitempty"`

	Notification *NotificationConfig `json:"Notification,omitempty"`

	PushNotification *PushNotificationConfig `json:"PushNotification,omitempty"`

	Ranking *RankingConfig `json:"Ranking,omitempty"`

	Stories *StoriesConfig `json:"Stories,omitempty"`
}

// Emitted when a feed group is changed.
type FeedGroupChangedEvent struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	Fid string `json:"fid"`

	Custom map[string]any `json:"custom"`

	// The type of event: "feeds.feed_group.changed" in this case
	Type string `json:"type"`

	FeedVisibility *string `json:"feed_visibility,omitempty"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	FeedGroup *FeedGroup `json:"feed_group,omitempty"`

	User *UserResponseCommonFields `json:"user,omitempty"`
}

func (*FeedGroupChangedEvent) GetEventType() string {
	return "feeds.feed_group.changed"
}

// Emitted when a feed group is deleted.
type FeedGroupDeletedEvent struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	Fid string `json:"fid"`

	// The ID of the feed group that was deleted
	GroupID string `json:"group_id"`

	Custom map[string]any `json:"custom"`

	// The type of event: "feeds.feed_group.deleted" in this case
	Type string `json:"type"`

	FeedVisibility *string `json:"feed_visibility,omitempty"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`
}

func (*FeedGroupDeletedEvent) GetEventType() string {
	return "feeds.feed_group.deleted"
}

type FeedGroupResponse struct {
	// When the feed group was created
	CreatedAt Timestamp `json:"created_at"`

	// Identifier within the group
	ID string `json:"id"`

	// When the feed group was last updated
	UpdatedAt Timestamp `json:"updated_at"`

	// Default visibility for activities
	DefaultVisibility *string `json:"default_visibility,omitempty"`

	// Configuration for activity processors
	ActivityProcessors []ActivityProcessorConfig `json:"activity_processors,omitempty"`

	// Configuration for activity selectors
	ActivitySelectors []ActivitySelectorConfig `json:"activity_selectors,omitempty"`

	Aggregation *AggregationConfig `json:"aggregation,omitempty"`

	// Custom data for the feed group
	Custom map[string]any `json:"custom,omitempty"`

	Notification *NotificationConfig `json:"notification,omitempty"`

	PushNotification *PushNotificationConfig `json:"push_notification,omitempty"`

	Ranking *RankingConfig `json:"ranking,omitempty"`

	Stories *StoriesConfig `json:"stories,omitempty"`
}

type FeedInput struct {
	Description *string `json:"description,omitempty"`

	Name *string `json:"name,omitempty"`

	Visibility *string `json:"visibility,omitempty"`

	FilterTags []string `json:"filter_tags,omitempty"`

	Members []FeedMemberRequest `json:"members,omitempty"`

	Custom map[string]any `json:"custom,omitempty"`
}

// Emitted when a feed member is added.
type FeedMemberAddedEvent struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	Fid string `json:"fid"`

	Custom map[string]any `json:"custom"`

	Member FeedMemberResponse `json:"member"`

	// The type of event: "feeds.feed_member.added" in this case
	Type string `json:"type"`

	FeedVisibility *string `json:"feed_visibility,omitempty"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	User *UserResponseCommonFields `json:"user,omitempty"`
}

func (*FeedMemberAddedEvent) GetEventType() string {
	return "feeds.feed_member.added"
}

// Emitted when a feed member is removed.
type FeedMemberRemovedEvent struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	Fid string `json:"fid"`

	MemberID string `json:"member_id"`

	Custom map[string]any `json:"custom"`

	// The type of event: "feeds.feed_member.removed" in this case
	Type string `json:"type"`

	FeedVisibility *string `json:"feed_visibility,omitempty"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	User *UserResponseCommonFields `json:"user,omitempty"`
}

func (*FeedMemberRemovedEvent) GetEventType() string {
	return "feeds.feed_member.removed"
}

type FeedMemberRequest struct {
	// ID of the user to add as a member
	UserID string `json:"user_id"`

	// Whether this is an invite to become a member
	Invite *bool `json:"invite,omitempty"`

	// ID of the membership level to assign to the member
	MembershipLevel *string `json:"membership_level,omitempty"`

	// Role of the member in the feed
	Role *string `json:"role,omitempty"`

	// Custom data for the member
	Custom map[string]any `json:"custom,omitempty"`
}

type FeedMemberResponse struct {
	// When the membership was created
	CreatedAt Timestamp `json:"created_at"`

	// Role of the member in the feed
	Role string `json:"role"`

	// Status of the membership
	Status string `json:"status"`

	// When the membership was last updated
	UpdatedAt Timestamp `json:"updated_at"`

	User UserResponse `json:"user"`

	// When the invite was accepted
	InviteAcceptedAt *Timestamp `json:"invite_accepted_at,omitempty"`

	// When the invite was rejected
	InviteRejectedAt *Timestamp `json:"invite_rejected_at,omitempty"`

	// Custom data for the membership
	Custom map[string]any `json:"custom,omitempty"`

	MembershipLevel *MembershipLevelResponse `json:"membership_level,omitempty"`
}

// Emitted when a feed member is updated.
type FeedMemberUpdatedEvent struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	Fid string `json:"fid"`

	Custom map[string]any `json:"custom"`

	Member FeedMemberResponse `json:"member"`

	// The type of event: "feeds.feed_member.updated" in this case
	Type string `json:"type"`

	FeedVisibility *string `json:"feed_visibility,omitempty"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	User *UserResponseCommonFields `json:"user,omitempty"`
}

func (*FeedMemberUpdatedEvent) GetEventType() string {
	return "feeds.feed_member.updated"
}

type FeedOwnCapability string

const (
	ADD_ACTIVITY                 FeedOwnCapability = "add-activity"
	ADD_ACTIVITY_BOOKMARK        FeedOwnCapability = "add-activity-bookmark"
	ADD_ACTIVITY_REACTION        FeedOwnCapability = "add-activity-reaction"
	ADD_COMMENT                  FeedOwnCapability = "add-comment"
	ADD_COMMENT_REACTION         FeedOwnCapability = "add-comment-reaction"
	CREATE_FEED                  FeedOwnCapability = "create-feed"
	DELETE_ANY_ACTIVITY          FeedOwnCapability = "delete-any-activity"
	DELETE_ANY_COMMENT           FeedOwnCapability = "delete-any-comment"
	DELETE_FEED                  FeedOwnCapability = "delete-feed"
	DELETE_OWN_ACTIVITY          FeedOwnCapability = "delete-own-activity"
	DELETE_OWN_ACTIVITY_BOOKMARK FeedOwnCapability = "delete-own-activity-bookmark"
	DELETE_OWN_ACTIVITY_REACTION FeedOwnCapability = "delete-own-activity-reaction"
	DELETE_OWN_COMMENT           FeedOwnCapability = "delete-own-comment"
	DELETE_OWN_COMMENT_REACTION  FeedOwnCapability = "delete-own-comment-reaction"
	FOLLOW                       FeedOwnCapability = "follow"
	PIN_ACTIVITY                 FeedOwnCapability = "pin-activity"
	QUERY_FEED_MEMBERS           FeedOwnCapability = "query-feed-members"
	QUERY_FOLLOWS                FeedOwnCapability = "query-follows"
	READ_ACTIVITIES              FeedOwnCapability = "read-activities"
	READ_FEED                    FeedOwnCapability = "read-feed"
	UNFOLLOW                     FeedOwnCapability = "unfollow"
	UPDATE_ANY_ACTIVITY          FeedOwnCapability = "update-any-activity"
	UPDATE_ANY_COMMENT           FeedOwnCapability = "update-any-comment"
	UPDATE_FEED                  FeedOwnCapability = "update-feed"
	UPDATE_FEED_FOLLOWERS        FeedOwnCapability = "update-feed-followers"
	UPDATE_FEED_MEMBERS          FeedOwnCapability = "update-feed-members"
	UPDATE_OWN_ACTIVITY          FeedOwnCapability = "update-own-activity"
	UPDATE_OWN_ACTIVITY_BOOKMARK FeedOwnCapability = "update-own-activity-bookmark"
	UPDATE_OWN_COMMENT           FeedOwnCapability = "update-own-comment"
)

func (c FeedOwnCapability) String() string {
	return string(c)
}

type FeedRequest struct {
	// ID of the feed group
	FeedGroupID string `json:"feed_group_id"`

	// ID of the feed
	FeedID string `json:"feed_id"`

	// ID of the feed creator
	CreatedByID *string `json:"created_by_id,omitempty"`

	// Description of the feed
	Description *string `json:"description,omitempty"`

	// Name of the feed
	Name *string `json:"name,omitempty"`

	// Visibility setting for the feed
	Visibility *string `json:"visibility,omitempty"`

	// Tags used for filtering feeds
	FilterTags []string `json:"filter_tags,omitempty"`

	// Initial members for the feed
	Members []FeedMemberRequest `json:"members,omitempty"`

	// Custom data for the feed
	Custom map[string]any `json:"custom,omitempty"`
}

type FeedResponse struct {
	// When the feed was created
	CreatedAt Timestamp `json:"created_at"`

	// Description of the feed
	Description string `json:"description"`

	// Fully qualified feed ID (group_id:id)
	Feed string `json:"feed"`

	// Number of followers of this feed
	FollowerCount int `json:"follower_count"`

	// Number of feeds this feed follows
	FollowingCount int `json:"following_count"`

	// Group this feed belongs to
	GroupID string `json:"group_id"`

	// Unique identifier for the feed
	ID string `json:"id"`

	// Number of members in this feed
	MemberCount int `json:"member_count"`

	// Name of the feed
	Name string `json:"name"`

	// Number of pinned activities in this feed
	PinCount int `json:"pin_count"`

	// When the feed was last updated
	UpdatedAt Timestamp `json:"updated_at"`

	CreatedBy UserResponse `json:"created_by"`

	// When the feed was deleted
	DeletedAt *Timestamp `json:"deleted_at,omitempty"`

	// Visibility setting for the feed
	Visibility *string `json:"visibility,omitempty"`

	// Tags used for filtering feeds
	FilterTags []string `json:"filter_tags,omitempty"`

	// Capabilities the current user has for this feed
	OwnCapabilities []FeedOwnCapability `json:"own_capabilities,omitempty"`

	// Follow relationships where the current user's feeds are following this feed
	OwnFollows []FollowResponse `json:"own_follows,omitempty"`

	// Custom data for the feed
	Custom map[string]any `json:"custom,omitempty"`

	OwnMembership *FeedMemberResponse `json:"own_membership,omitempty"`
}

// Emitted when a feed is created.
type FeedUpdatedEvent struct {
	CreatedAt Timestamp `json:"created_at"`

	Fid string `json:"fid"`

	Custom map[string]any `json:"custom"`

	Feed FeedResponse `json:"feed"`

	// The type of event: "feeds.feed.updated" in this case
	Type string `json:"type"`

	FeedVisibility *string `json:"feed_visibility,omitempty"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	User *UserResponseCommonFields `json:"user,omitempty"`
}

func (*FeedUpdatedEvent) GetEventType() string {
	return "feeds.feed.updated"
}

type FeedViewResponse struct {
	// Unique identifier for the custom feed view
	ID string `json:"id"`

	// When the feed view was last used
	LastUsedAt *Timestamp `json:"last_used_at,omitempty"`

	// Configured activity processors
	ActivityProcessors []ActivityProcessorConfig `json:"activity_processors,omitempty"`

	// Configured activity selectors
	ActivitySelectors []ActivitySelectorConfig `json:"activity_selectors,omitempty"`

	Aggregation *AggregationConfig `json:"aggregation,omitempty"`

	Ranking *RankingConfig `json:"ranking,omitempty"`
}

type FeedVisibilityResponse struct {
	// Description of the feed visibility level
	Description string `json:"description"`

	// Name of the feed visibility level
	Name string `json:"name"`

	// Permission grants for each role
	Grants map[string][]string `json:"grants"`
}

type FeedsModerationTemplateConfig struct {
	ConfigKey string `json:"config_key"`

	DataTypes map[string]string `json:"data_types"`
}

type FeedsPreferences struct {
	// Push notification preference for comments on user's activities
	Comment *string `json:"comment,omitempty"`

	// Push notification preference for reactions on comments
	CommentReaction *string `json:"comment_reaction,omitempty"`

	// Push notification preference for new followers
	Follow *string `json:"follow,omitempty"`

	// Push notification preference for mentions in activities or comments
	Mention *string `json:"mention,omitempty"`

	// Push notification preference for reactions on user's activities or comments
	Reaction *string `json:"reaction,omitempty"`

	// Push notification preferences for custom activity types. Map of activity type to preference (all or none)
	CustomActivityTypes map[string]string `json:"custom_activity_types,omitempty"`
}

type FeedsReactionResponse struct {
	// ID of the activity that was reacted to
	ActivityID string `json:"activity_id"`

	// When the reaction was created
	CreatedAt Timestamp `json:"created_at"`

	// When the reaction was last updated
	UpdatedAt Timestamp `json:"updated_at"`

	// Type of reaction
	Type string `json:"type"`

	User UserResponse `json:"user"`

	// ID of the comment that was reacted to
	CommentID *string `json:"comment_id,omitempty"`

	// Custom data for the reaction
	Custom map[string]any `json:"custom,omitempty"`
}

type Field struct {
	Short bool `json:"short"`

	Title string `json:"title"`

	Value string `json:"value"`
}

type FileUploadConfig struct {
	SizeLimit int `json:"size_limit"`

	AllowedFileExtensions []string `json:"allowed_file_extensions,omitempty"`

	AllowedMimeTypes []string `json:"allowed_mime_types,omitempty"`

	BlockedFileExtensions []string `json:"blocked_file_extensions,omitempty"`

	BlockedMimeTypes []string `json:"blocked_mime_types,omitempty"`
}

type FileUploadRequest struct {
	// file field
	File *string `json:"file,omitempty"`

	User *OnlyUserID `json:"user,omitempty"`
}

type FileUploadResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	// URL to the uploaded asset. Should be used to put to `asset_url` attachment field
	File *string `json:"file,omitempty"`

	// URL of the file thumbnail for supported file formats. Should be put to `thumb_url` attachment field
	ThumbUrl *string `json:"thumb_url,omitempty"`
}

type FirebaseConfig struct {
	ApnTemplate *string `json:"apn_template,omitempty"`

	CredentialsJson *string `json:"credentials_json,omitempty"`

	DataTemplate *string `json:"data_template,omitempty"`

	Disabled *bool `json:"Disabled,omitempty"`

	NotificationTemplate *string `json:"notification_template,omitempty"`

	ServerKey *string `json:"server_key,omitempty"`
}

type FirebaseConfigFields struct {
	Enabled bool `json:"enabled"`

	ApnTemplate *string `json:"apn_template,omitempty"`

	CredentialsJson *string `json:"credentials_json,omitempty"`

	DataTemplate *string `json:"data_template,omitempty"`

	NotificationTemplate *string `json:"notification_template,omitempty"`

	ServerKey *string `json:"server_key,omitempty"`
}

// Contains information about flagged user or message
type Flag struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	CreatedByAutomod bool `json:"created_by_automod"`

	// Date/time of the last update
	UpdatedAt Timestamp `json:"updated_at"`

	// Date of the approval
	ApprovedAt *Timestamp `json:"approved_at,omitempty"`

	Reason *string `json:"reason,omitempty"`

	// Date of the rejection
	RejectedAt *Timestamp `json:"rejected_at,omitempty"`

	// Date of the review
	ReviewedAt *Timestamp `json:"reviewed_at,omitempty"`

	ReviewedBy *string `json:"reviewed_by,omitempty"`

	// ID of flagged message
	TargetMessageID *string `json:"target_message_id,omitempty"`

	Custom map[string]any `json:"custom,omitempty"`

	Details *FlagDetails `json:"details,omitempty"`

	TargetMessage *Message `json:"target_message,omitempty"`

	TargetUser *User `json:"target_user,omitempty"`

	User *User `json:"user,omitempty"`
}

type FlagDetails struct {
	OriginalText string `json:"original_text"`

	Extra map[string]any `json:"Extra"`

	Automod *AutomodDetails `json:"automod,omitempty"`
}

type FlagFeedback struct {
	CreatedAt Timestamp `json:"created_at"`

	MessageID string `json:"message_id"`

	Labels []Label `json:"labels"`
}

type FlagMessageDetails struct {
	PinChanged *bool `json:"pin_changed,omitempty"`

	ShouldEnrich *bool `json:"should_enrich,omitempty"`

	SkipPush *bool `json:"skip_push,omitempty"`

	UpdatedByID *string `json:"updated_by_id,omitempty"`
}

type FlagResponse struct {
	Duration string `json:"duration"`

	// Unique identifier of the created moderation item
	ItemID string `json:"item_id"`
}

type FlagUpdatedEvent struct {
	CreatedAt Timestamp `json:"created_at"`

	Custom map[string]any `json:"custom"`

	Type string `json:"type"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	CreatedBy *UserResponse `json:"CreatedBy,omitempty"`

	Message *MessageResponse `json:"Message,omitempty"`

	User *UserResponse `json:"User,omitempty"`
}

func (*FlagUpdatedEvent) GetEventType() string {
	return "flag.updated"
}

type FlagUserOptions struct {
	Reason *string `json:"reason,omitempty"`
}

type FollowBatchResponse struct {
	Duration string `json:"duration"`

	// List of created follow relationships
	Follows []FollowResponse `json:"follows"`
}

// Emitted when a feed follows another feed.
type FollowCreatedEvent struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	Fid string `json:"fid"`

	Custom map[string]any `json:"custom"`

	Follow FollowResponse `json:"follow"`

	// The type of event: "feeds.follow.created" in this case
	Type string `json:"type"`

	FeedVisibility *string `json:"feed_visibility,omitempty"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`
}

func (*FollowCreatedEvent) GetEventType() string {
	return "feeds.follow.created"
}

// Emitted when a feed unfollows another feed.
type FollowDeletedEvent struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	Fid string `json:"fid"`

	Custom map[string]any `json:"custom"`

	Follow FollowResponse `json:"follow"`

	// The type of event: "feeds.follow.deleted" in this case
	Type string `json:"type"`

	FeedVisibility *string `json:"feed_visibility,omitempty"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`
}

func (*FollowDeletedEvent) GetEventType() string {
	return "feeds.follow.deleted"
}

type FollowPair struct {
	// Fully qualified ID of the source feed
	Source string `json:"source"`

	// Fully qualified ID of the target feed
	Target string `json:"target"`
}

type FollowResponse struct {
	// When the follow relationship was created
	CreatedAt Timestamp `json:"created_at"`

	// Role of the follower (source user) in the follow relationship
	FollowerRole string `json:"follower_role"`

	// Push preference for notifications
	PushPreference string `json:"push_preference"`

	// Status of the follow relationship
	Status string `json:"status"`

	// When the follow relationship was last updated
	UpdatedAt Timestamp `json:"updated_at"`

	SourceFeed FeedResponse `json:"source_feed"`

	TargetFeed FeedResponse `json:"target_feed"`

	// When the follow request was accepted
	RequestAcceptedAt *Timestamp `json:"request_accepted_at,omitempty"`

	// When the follow request was rejected
	RequestRejectedAt *Timestamp `json:"request_rejected_at,omitempty"`

	// Custom data for the follow relationship
	Custom map[string]any `json:"custom,omitempty"`
}

// Emitted when a follow relationship is updated.
type FollowUpdatedEvent struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	Fid string `json:"fid"`

	Custom map[string]any `json:"custom"`

	Follow FollowResponse `json:"follow"`

	// The type of event: "feeds.follow.updated" in this case
	Type string `json:"type"`

	FeedVisibility *string `json:"feed_visibility,omitempty"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`
}

func (*FollowUpdatedEvent) GetEventType() string {
	return "feeds.follow.updated"
}

type FrameRecordSettings struct {
	CaptureIntervalInSeconds int `json:"capture_interval_in_seconds"`

	Mode string `json:"mode"`

	Quality *string `json:"quality,omitempty"`
}

type FrameRecordingResponse struct {
	Status string `json:"status"`
}

type FrameRecordingSettingsRequest struct {
	CaptureIntervalInSeconds int `json:"capture_interval_in_seconds"`

	Mode string `json:"mode"`

	Quality *string `json:"quality,omitempty"`
}

type FrameRecordingSettingsResponse struct {
	CaptureIntervalInSeconds int `json:"capture_interval_in_seconds"`

	Mode string `json:"mode"`

	Quality *string `json:"quality,omitempty"`
}

type FullUserResponse struct {
	Banned bool `json:"banned"`

	CreatedAt Timestamp `json:"created_at"`

	ID string `json:"id"`

	Invisible bool `json:"invisible"`

	Language string `json:"language"`

	Online bool `json:"online"`

	Role string `json:"role"`

	ShadowBanned bool `json:"shadow_banned"`

	TotalUnreadCount int `json:"total_unread_count"`

	UnreadChannels int `json:"unread_channels"`

	UnreadCount int `json:"unread_count"`

	UnreadThreads int `json:"unread_threads"`

	UpdatedAt Timestamp `json:"updated_at"`

	BlockedUserIds []string `json:"blocked_user_ids"`

	ChannelMutes []ChannelMute `json:"channel_mutes"`

	Devices []DeviceResponse `json:"devices"`

	Mutes []UserMuteResponse `json:"mutes"`

	Teams []string `json:"teams"`

	Custom map[string]any `json:"custom"`

	AvgResponseTime *int `json:"avg_response_time,omitempty"`

	BanExpires *Timestamp `json:"ban_expires,omitempty"`

	DeactivatedAt *Timestamp `json:"deactivated_at,omitempty"`

	DeletedAt *Timestamp `json:"deleted_at,omitempty"`

	Image *string `json:"image,omitempty"`

	LastActive *Timestamp `json:"last_active,omitempty"`

	Name *string `json:"name,omitempty"`

	RevokeTokensIssuedBefore *Timestamp `json:"revoke_tokens_issued_before,omitempty"`

	LatestHiddenChannels []string `json:"latest_hidden_channels,omitempty"`

	PrivacySettings *PrivacySettingsResponse `json:"privacy_settings,omitempty"`

	TeamsRole map[string]string `json:"teams_role,omitempty"`
}

type GeofenceResponse struct {
	Name string `json:"name"`

	Description *string `json:"description,omitempty"`

	Type *string `json:"type,omitempty"`

	CountryCodes []string `json:"country_codes,omitempty"`
}

type GeofenceSettings struct {
	Names []string `json:"names"`
}

type GeofenceSettingsRequest struct {
	Names []string `json:"names,omitempty"`
}

type GeofenceSettingsResponse struct {
	Names []string `json:"names"`
}

// Response containing active calls status information
type GetActiveCallsStatusResponse struct {
	Duration string `json:"duration"`

	// End time of the status period
	EndTime Timestamp `json:"end_time"`

	// Start time of the status period
	StartTime Timestamp `json:"start_time"`

	Metrics *ActiveCallsMetrics `json:"metrics,omitempty"`

	Summary *ActiveCallsSummary `json:"summary,omitempty"`
}

type GetActivityResponse struct {
	Duration string `json:"duration"`

	Activity ActivityResponse `json:"activity"`
}

// Basic response information
type GetApplicationResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	App AppResponseFields `json:"app"`
}

// Response for get block list
type GetBlockListResponse struct {
	Duration string `json:"duration"`

	Blocklist *BlockListResponse `json:"blocklist,omitempty"`
}

type GetBlockedUsersResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	// Array of blocked user object
	Blocks []BlockedUserResponse `json:"blocks"`
}

// Basic response information
type GetCallReportResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	SessionID string `json:"session_id"`

	Report ReportResponse `json:"report"`

	VideoReactions []VideoReactionsResponse `json:"video_reactions,omitempty"`

	ChatActivity *ChatActivityStatsResponse `json:"chat_activity,omitempty"`

	Session *CallSessionResponse `json:"session,omitempty"`
}

type GetCallResponse struct {
	Duration string `json:"duration"`

	Members []MemberResponse `json:"members"`

	OwnCapabilities []OwnCapability `json:"own_capabilities"`

	Call CallResponse `json:"call"`
}

type GetCallTypeResponse struct {
	CreatedAt Timestamp `json:"created_at"`

	Duration string `json:"duration"`

	Name string `json:"name"`

	UpdatedAt Timestamp `json:"updated_at"`

	Grants map[string][]string `json:"grants"`

	NotificationSettings NotificationSettings `json:"notification_settings"`

	Settings CallSettingsResponse `json:"settings"`

	ExternalStorage *string `json:"external_storage,omitempty"`
}

// Basic response information
type GetCampaignResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Campaign *CampaignResponse `json:"campaign,omitempty"`

	Users *PagerResponse `json:"users,omitempty"`
}

// Basic response information
type GetChannelTypeResponse struct {
	Automod string `json:"automod"`

	AutomodBehavior string `json:"automod_behavior"`

	ConnectEvents bool `json:"connect_events"`

	CountMessages bool `json:"count_messages"`

	CreatedAt Timestamp `json:"created_at"`

	CustomEvents bool `json:"custom_events"`

	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	MarkMessagesPending bool `json:"mark_messages_pending"`

	MaxMessageLength int `json:"max_message_length"`

	Mutes bool `json:"mutes"`

	Name string `json:"name"`

	Polls bool `json:"polls"`

	PushNotifications bool `json:"push_notifications"`

	Quotes bool `json:"quotes"`

	Reactions bool `json:"reactions"`

	ReadEvents bool `json:"read_events"`

	Reminders bool `json:"reminders"`

	Replies bool `json:"replies"`

	Search bool `json:"search"`

	SharedLocations bool `json:"shared_locations"`

	SkipLastMsgUpdateForSystemMsgs bool `json:"skip_last_msg_update_for_system_msgs"`

	TypingEvents bool `json:"typing_events"`

	UpdatedAt Timestamp `json:"updated_at"`

	Uploads bool `json:"uploads"`

	UrlEnrichment bool `json:"url_enrichment"`

	UserMessageReminders bool `json:"user_message_reminders"`

	Commands []Command `json:"commands"`

	Permissions []PolicyRequest `json:"permissions"`

	Grants map[string][]string `json:"grants"`

	Blocklist *string `json:"blocklist,omitempty"`

	BlocklistBehavior *string `json:"blocklist_behavior,omitempty"`

	PartitionSize *int `json:"partition_size,omitempty"`

	PartitionTtl *string `json:"partition_ttl,omitempty"`

	AllowedFlagReasons []string `json:"allowed_flag_reasons,omitempty"`

	Blocklists []BlockListOptions `json:"blocklists,omitempty"`

	AutomodThresholds *Thresholds `json:"automod_thresholds,omitempty"`
}

type GetCommandResponse struct {
	Args string `json:"args"`

	Description string `json:"description"`

	Duration string `json:"duration"`

	Name string `json:"name"`

	Set string `json:"set"`

	CreatedAt *Timestamp `json:"created_at,omitempty"`

	UpdatedAt *Timestamp `json:"updated_at,omitempty"`
}

type GetCommentRepliesResponse struct {
	Duration string `json:"duration"`

	// Threaded listing of replies to the comment
	Comments []ThreadedCommentResponse `json:"comments"`

	Next *string `json:"next,omitempty"`

	Prev *string `json:"prev,omitempty"`
}

type GetCommentResponse struct {
	Duration string `json:"duration"`

	Comment CommentResponse `json:"comment"`
}

type GetCommentsResponse struct {
	Duration string `json:"duration"`

	// Threaded listing for the activity
	Comments []ThreadedCommentResponse `json:"comments"`

	Next *string `json:"next,omitempty"`

	Prev *string `json:"prev,omitempty"`
}

type GetConfigResponse struct {
	Duration string `json:"duration"`

	Config *ConfigResponse `json:"config,omitempty"`
}

// Basic response information
type GetCustomPermissionResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Permission Permission `json:"permission"`
}

// Basic response information
type GetDraftResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Draft DraftResponse `json:"draft"`
}

// Basic response information
type GetEdgesResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Edges []EdgeResponse `json:"edges"`
}

type GetFeedGroupResponse struct {
	Duration string `json:"duration"`

	FeedGroup FeedGroupResponse `json:"feed_group"`
}

type GetFeedViewResponse struct {
	Duration string `json:"duration"`

	FeedView FeedViewResponse `json:"feed_view"`
}

type GetFeedVisibilityResponse struct {
	Duration string `json:"duration"`

	FeedVisibility FeedVisibilityResponse `json:"feed_visibility"`
}

type GetFollowSuggestionsResponse struct {
	Duration string `json:"duration"`

	// List of suggested feeds to follow
	Suggestions []FeedResponse `json:"suggestions"`
}

// Basic response information
type GetImportResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	ImportTask *ImportTask `json:"import_task,omitempty"`
}

type GetManyMessagesResponse struct {
	Duration string `json:"duration"`

	// List of messages
	Messages []MessageResponse `json:"messages"`
}

// Basic response information
type GetMessageResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Message MessageWithChannelResponse `json:"message"`

	PendingMessageMetadata map[string]string `json:"pending_message_metadata,omitempty"`
}

// Basic response information
type GetModerationRuleResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Rule *ModerationRuleV2Response `json:"rule,omitempty"`
}

type GetOGResponse struct {
	Duration string `json:"duration"`

	Custom map[string]any `json:"custom"`

	// URL of detected video or audio
	AssetUrl *string `json:"asset_url,omitempty"`

	AuthorIcon *string `json:"author_icon,omitempty"`

	// og:site
	AuthorLink *string `json:"author_link,omitempty"`

	// og:site_name
	AuthorName *string `json:"author_name,omitempty"`

	Color *string `json:"color,omitempty"`

	Fallback *string `json:"fallback,omitempty"`

	Footer *string `json:"footer,omitempty"`

	FooterIcon *string `json:"footer_icon,omitempty"`

	// URL of detected image
	ImageUrl *string `json:"image_url,omitempty"`

	// extracted url from the text
	OGScrapeUrl *string `json:"og_scrape_url,omitempty"`

	OriginalHeight *int `json:"original_height,omitempty"`

	OriginalWidth *int `json:"original_width,omitempty"`

	Pretext *string `json:"pretext,omitempty"`

	// og:description
	Text *string `json:"text,omitempty"`

	// URL of detected thumb image
	ThumbUrl *string `json:"thumb_url,omitempty"`

	// og:title
	Title *string `json:"title,omitempty"`

	// og:url
	TitleLink *string `json:"title_link,omitempty"`

	// Attachment type, could be empty, image, audio or video
	Type *string `json:"type,omitempty"`

	Actions []Action `json:"actions,omitempty"`

	Fields []Field `json:"fields,omitempty"`

	Giphy *Images `json:"giphy,omitempty"`
}

type GetOrCreateCallResponse struct {
	Created bool `json:"created"`

	Duration string `json:"duration"`

	Members []MemberResponse `json:"members"`

	OwnCapabilities []OwnCapability `json:"own_capabilities"`

	Call CallResponse `json:"call"`
}

type GetOrCreateFeedGroupResponse struct {
	Duration string `json:"duration"`

	// Indicates whether the feed group was created (true) or already existed (false)
	WasCreated bool `json:"was_created"`

	FeedGroup FeedGroupResponse `json:"feed_group"`
}

// Basic response information
type GetOrCreateFeedResponse struct {
	Created bool `json:"created"`

	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Activities []ActivityResponse `json:"activities"`

	AggregatedActivities []AggregatedActivityResponse `json:"aggregated_activities"`

	Followers []FollowResponse `json:"followers"`

	Following []FollowResponse `json:"following"`

	Members []FeedMemberResponse `json:"members"`

	PinnedActivities []ActivityPinResponse `json:"pinned_activities"`

	Feed FeedResponse `json:"feed"`

	Next *string `json:"next,omitempty"`

	Prev *string `json:"prev,omitempty"`

	FollowersPagination *PagerResponse `json:"followers_pagination,omitempty"`

	FollowingPagination *PagerResponse `json:"following_pagination,omitempty"`

	MemberPagination *PagerResponse `json:"member_pagination,omitempty"`

	NotificationStatus *NotificationStatusResponse `json:"notification_status,omitempty"`
}

type GetOrCreateFeedViewResponse struct {
	Duration string `json:"duration"`

	// Indicates whether the feed view was newly created (true) or already existed (false)
	WasCreated bool `json:"was_created"`

	FeedView FeedViewResponse `json:"feed_view"`
}

// Basic response information
type GetPushTemplatesResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Templates []PushTemplate `json:"templates"`
}

type GetRateLimitsResponse struct {
	Duration string `json:"duration"`

	// Map of endpoint rate limits for the Android platform
	Android map[string]LimitInfo `json:"android,omitempty"`

	// Map of endpoint rate limits for the iOS platform
	Ios map[string]LimitInfo `json:"ios,omitempty"`

	// Map of endpoint rate limits for the server-side platform
	ServerSide map[string]LimitInfo `json:"server_side,omitempty"`

	// Map of endpoint rate limits for the web platform
	Web map[string]LimitInfo `json:"web,omitempty"`
}

type GetReactionsResponse struct {
	Duration string `json:"duration"`

	// List of reactions
	Reactions []Reaction `json:"reactions"`
}

// Basic response information
type GetRepliesResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Messages []MessageResponse `json:"messages"`
}

type GetReviewQueueItemResponse struct {
	Duration string `json:"duration"`

	Item *ReviewQueueItemResponse `json:"item,omitempty"`
}

type GetSegmentResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Segment *SegmentResponse `json:"segment,omitempty"`
}

type GetTaskResponse struct {
	CreatedAt Timestamp `json:"created_at"`

	Duration string `json:"duration"`

	// Current status of task
	Status string `json:"status"`

	// ID of task
	TaskID string `json:"task_id"`

	UpdatedAt Timestamp `json:"updated_at"`

	Error *ErrorResult `json:"error,omitempty"`

	// Result produced by task after completion
	Result map[string]any `json:"result,omitempty"`
}

type GetThreadResponse struct {
	Duration string `json:"duration"`

	Thread ThreadStateResponse `json:"thread"`
}

// Basic response information
type GoLiveResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Call CallResponse `json:"call"`
}

type GoogleVisionConfig struct {
	Enabled *bool `json:"enabled,omitempty"`
}

type GroupedStatsResponse struct {
	Name string `json:"name"`

	Unique int `json:"unique"`
}

type HLSSettings struct {
	AutoOn bool `json:"auto_on"`

	Enabled bool `json:"enabled"`

	QualityTracks []string `json:"quality_tracks"`

	Layout *LayoutSettings `json:"layout,omitempty"`
}

type HLSSettingsRequest struct {
	QualityTracks []string `json:"quality_tracks"`

	AutoOn *bool `json:"auto_on,omitempty"`

	Enabled *bool `json:"enabled,omitempty"`

	Layout *LayoutSettingsRequest `json:"layout,omitempty"`
}

// HLSSettings is the payload for HLS settings
type HLSSettingsResponse struct {
	AutoOn bool `json:"auto_on"`

	Enabled bool `json:"enabled"`

	QualityTracks []string `json:"quality_tracks"`

	Layout LayoutSettingsResponse `json:"layout"`
}

type HarmConfig struct {
	CooldownPeriod *int `json:"cooldown_period,omitempty"`

	Severity *int `json:"severity,omitempty"`

	Threshold *int `json:"threshold,omitempty"`

	ActionSequences []ActionSequence `json:"action_sequences,omitempty"`

	HarmTypes []string `json:"harm_types,omitempty"`
}

// Basic response information
type HideChannelResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`
}

type HuaweiConfig struct {
	Disabled *bool `json:"Disabled,omitempty"`

	ID *string `json:"id,omitempty"`

	Secret *string `json:"secret,omitempty"`
}

type HuaweiConfigFields struct {
	Enabled bool `json:"enabled"`

	ID *string `json:"id,omitempty"`

	Secret *string `json:"secret,omitempty"`
}

type ImageContentParameters struct {
	HarmLabels []string `json:"harm_labels,omitempty"`
}

type ImageData struct {
	Frames string `json:"frames"`

	Height string `json:"height"`

	Size string `json:"size"`

	Url string `json:"url"`

	Width string `json:"width"`
}

type ImageRuleParameters struct {
	Threshold *int `json:"threshold,omitempty"`

	TimeWindow *string `json:"time_window,omitempty"`

	HarmLabels []string `json:"harm_labels,omitempty"`
}

type ImageSize struct {
	// Crop mode
	Crop *string `json:"crop,omitempty"`

	// Target image height
	Height *int `json:"height,omitempty"`

	// Resize method
	Resize *string `json:"resize,omitempty"`

	// Target image width
	Width *int `json:"width,omitempty"`
}

type ImageUploadRequest struct {
	File *string `json:"file,omitempty"`

	// field with JSON-encoded array of image size configurations
	UploadSizes []ImageSize `json:"upload_sizes,omitempty"`

	User *OnlyUserID `json:"user,omitempty"`
}

type ImageUploadResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	File *string `json:"file,omitempty"`

	ThumbUrl *string `json:"thumb_url,omitempty"`

	// Array of image size configurations
	UploadSizes []ImageSize `json:"upload_sizes,omitempty"`
}

type Images struct {
	FixedHeight ImageData `json:"fixed_height"`

	FixedHeightDownsampled ImageData `json:"fixed_height_downsampled"`

	FixedHeightStill ImageData `json:"fixed_height_still"`

	FixedWidth ImageData `json:"fixed_width"`

	FixedWidthDownsampled ImageData `json:"fixed_width_downsampled"`

	FixedWidthStill ImageData `json:"fixed_width_still"`

	Original ImageData `json:"original"`
}

type ImportTask struct {
	CreatedAt Timestamp `json:"created_at"`

	ID string `json:"id"`

	Mode string `json:"mode"`

	Path string `json:"path"`

	State string `json:"state"`

	UpdatedAt Timestamp `json:"updated_at"`

	History []ImportTaskHistory `json:"history"`

	Size *int `json:"size,omitempty"`
}

type ImportTaskHistory struct {
	CreatedAt Timestamp `json:"created_at"`

	NextState string `json:"next_state"`

	PrevState string `json:"prev_state"`
}

type IngressAudioEncodingOptions struct {
	Bitrate int `json:"bitrate"`

	Channels int `json:"channels"`

	EnableDtx bool `json:"enable_dtx"`
}

type IngressAudioEncodingOptionsRequest struct {
	Bitrate int `json:"bitrate"`

	Channels int `json:"channels"`

	EnableDtx *bool `json:"enable_dtx,omitempty"`
}

type IngressAudioEncodingResponse struct {
	Bitrate int `json:"bitrate"`

	Channels int `json:"channels"`

	EnableDtx bool `json:"enable_dtx"`
}

type IngressSettings struct {
	Enabled bool `json:"enabled"`

	AudioEncodingOptions *IngressAudioEncodingOptions `json:"audio_encoding_options,omitempty"`

	VideoEncodingOptions map[string]IngressVideoEncodingOptions `json:"video_encoding_options,omitempty"`
}

type IngressSettingsRequest struct {
	Enabled *bool `json:"enabled,omitempty"`

	AudioEncodingOptions *IngressAudioEncodingOptionsRequest `json:"audio_encoding_options,omitempty"`

	VideoEncodingOptions map[string]IngressVideoEncodingOptionsRequest `json:"video_encoding_options,omitempty"`
}

type IngressSettingsResponse struct {
	Enabled bool `json:"enabled"`

	AudioEncodingOptions *IngressAudioEncodingResponse `json:"audio_encoding_options,omitempty"`

	VideoEncodingOptions map[string]IngressVideoEncodingResponse `json:"video_encoding_options,omitempty"`
}

type IngressVideoEncodingOptions struct {
	Layers []IngressVideoLayer `json:"layers"`
}

type IngressVideoEncodingOptionsRequest struct {
	Layers []IngressVideoLayerRequest `json:"layers"`
}

type IngressVideoEncodingResponse struct {
	Layers []IngressVideoLayerResponse `json:"layers"`
}

type IngressVideoLayer struct {
	Bitrate int `json:"bitrate"`

	Codec string `json:"codec"`

	FrameRate int `json:"frame_rate"`

	MaxDimension int `json:"max_dimension"`

	MinDimension int `json:"min_dimension"`
}

type IngressVideoLayerRequest struct {
	Bitrate int `json:"bitrate"`

	Codec string `json:"codec"`

	FrameRateLimit int `json:"frame_rate_limit"`

	MaxDimension int `json:"max_dimension"`

	MinDimension int `json:"min_dimension"`
}

type IngressVideoLayerResponse struct {
	Bitrate int `json:"bitrate"`

	Codec string `json:"codec"`

	FrameRateLimit int `json:"frame_rate_limit"`

	MaxDimension int `json:"max_dimension"`

	MinDimension int `json:"min_dimension"`
}

type JoinCallAPIMetrics struct {
	Failures float64 `json:"failures"`

	Total float64 `json:"total"`

	Latency *ActiveCallsLatencyStats `json:"latency,omitempty"`
}

// KickUserResponse is the payload for kicking a user from a call.
type KickUserResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`
}

// This event is sent to call participants to notify when a user is kicked from a call. Clients should make the kicked user leave the call UI.
type KickedUserEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	User UserResponse `json:"user"`

	// The type of event: "call.kicked_user" in this case
	Type string `json:"type"`

	KickedByUser *UserResponse `json:"kicked_by_user,omitempty"`
}

func (*KickedUserEvent) GetEventType() string {
	return "call.kicked_user"
}

type LLMConfig struct {
	AppContext *string `json:"app_context,omitempty"`

	Async *bool `json:"async,omitempty"`

	Enabled *bool `json:"enabled,omitempty"`

	Rules []LLMRule `json:"rules,omitempty"`

	SeverityDescriptions map[string]string `json:"severity_descriptions,omitempty"`
}

type LLMRule struct {
	Description string `json:"description"`

	Label string `json:"label"`

	Action *string `json:"action,omitempty"`

	SeverityRules []BodyguardSeverityRule `json:"severity_rules,omitempty"`
}

type Label struct {
	Name string `json:"name"`

	HarmLabels []string `json:"harm_labels,omitempty"`

	PhraseListIds []int `json:"phrase_list_ids,omitempty"`
}

type LabelThresholds struct {
	// Threshold for automatic message block
	Block *float64 `json:"block,omitempty"`

	// Threshold for automatic message flag
	Flag *float64 `json:"flag,omitempty"`
}

type LayoutSettings struct {
	ExternalAppUrl string `json:"external_app_url"`

	ExternalCssUrl string `json:"external_css_url"`

	Name string `json:"name"`

	DetectOrientation *bool `json:"detect_orientation,omitempty"`

	Options map[string]any `json:"options,omitempty"`
}

type LayoutSettingsRequest struct {
	Name string `json:"name"`

	DetectOrientation *bool `json:"detect_orientation,omitempty"`

	ExternalAppUrl *string `json:"external_app_url,omitempty"`

	ExternalCssUrl *string `json:"external_css_url,omitempty"`

	Options map[string]any `json:"options,omitempty"`
}

type LayoutSettingsResponse struct {
	ExternalAppUrl string `json:"external_app_url"`

	ExternalCssUrl string `json:"external_css_url"`

	Name string `json:"name"`

	DetectOrientation *bool `json:"detect_orientation,omitempty"`

	Options map[string]any `json:"options,omitempty"`
}

type LimitInfo struct {
	// The maximum number of calls allowed for the time window
	Limit int `json:"limit"`

	// The number of remaining calls in the current window
	Remaining int `json:"remaining"`

	// The Unix timestamp of the next window
	Reset int `json:"reset"`
}

type LimitsSettings struct {
	MaxParticipantsExcludeRoles []string `json:"max_participants_exclude_roles"`

	MaxDurationSeconds *int `json:"max_duration_seconds,omitempty"`

	MaxParticipants *int `json:"max_participants,omitempty"`

	MaxParticipantsExcludeOwner *bool `json:"max_participants_exclude_owner,omitempty"`
}

type LimitsSettingsRequest struct {
	MaxDurationSeconds *int `json:"max_duration_seconds,omitempty"`

	MaxParticipants *int `json:"max_participants,omitempty"`

	MaxParticipantsExcludeOwner *bool `json:"max_participants_exclude_owner,omitempty"`

	MaxParticipantsExcludeRoles []string `json:"max_participants_exclude_roles,omitempty"`
}

type LimitsSettingsResponse struct {
	MaxParticipantsExcludeRoles []string `json:"max_participants_exclude_roles"`

	MaxDurationSeconds *int `json:"max_duration_seconds,omitempty"`

	MaxParticipants *int `json:"max_participants,omitempty"`

	MaxParticipantsExcludeOwner *bool `json:"max_participants_exclude_owner,omitempty"`
}

// Basic response information
type ListBlockListResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Blocklists []BlockListResponse `json:"blocklists"`
}

// Response for ListCallType
type ListCallTypeResponse struct {
	Duration string `json:"duration"`

	CallTypes map[string]CallTypeResponse `json:"call_types"`
}

type ListChannelTypesResponse struct {
	Duration string `json:"duration"`

	// Object with all channel types
	ChannelTypes map[string]*ChannelTypeConfig `json:"channel_types"`
}

type ListCommandsResponse struct {
	Duration string `json:"duration"`

	// List of commands
	Commands []Command `json:"commands"`
}

// List devices response
type ListDevicesResponse struct {
	Duration string `json:"duration"`

	// List of devices
	Devices []DeviceResponse `json:"devices"`
}

// Basic response information
type ListExternalStorageResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	ExternalStorages map[string]ExternalStorageResponse `json:"external_storages"`
}

// Basic response information
type ListFeedGroupsResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Groups map[string]FeedGroupResponse `json:"groups"`
}

type ListFeedViewsResponse struct {
	Duration string `json:"duration"`

	// Map of feed view ID to feed view
	Views map[string]FeedViewResponse `json:"views"`
}

type ListFeedVisibilitiesResponse struct {
	Duration string `json:"duration"`

	// Map of feed visibility configurations by name
	FeedVisibilities map[string]FeedVisibilityResponse `json:"feed_visibilities"`
}

// Basic response information
type ListImportsResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	ImportTasks []ImportTask `json:"import_tasks"`
}

// Basic response information
type ListPermissionsResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Permissions []Permission `json:"permissions"`
}

// Basic response information
type ListPushProvidersResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	PushProviders []PushProviderResponse `json:"push_providers"`
}

// Response for listing recordings
type ListRecordingsResponse struct {
	Duration string `json:"duration"`

	Recordings []CallRecording `json:"recordings"`
}

// Basic response information
type ListRolesResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Roles []Role `json:"roles"`
}

type ListTranscriptionsResponse struct {
	Duration string `json:"duration"`

	// List of transcriptions for the call
	Transcriptions []CallTranscription `json:"transcriptions"`
}

type MarkReadResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Event *MessageReadEvent `json:"event,omitempty"`
}

type MarkReviewedRequest struct {
	ContentToMarkAsReviewedLimit *int `json:"content_to_mark_as_reviewed_limit,omitempty"`

	DisableMarkingContentAsReviewed *bool `json:"disable_marking_content_as_reviewed,omitempty"`
}

type MemberAddedEvent struct {
	ChannelID string `json:"channel_id"`

	ChannelType string `json:"channel_type"`

	Cid string `json:"cid"`

	CreatedAt Timestamp `json:"created_at"`

	Type string `json:"type"`

	Team *string `json:"team,omitempty"`

	Member *ChannelMember `json:"member,omitempty"`

	User *User `json:"user,omitempty"`
}

func (*MemberAddedEvent) GetEventType() string {
	return "member.added"
}

type MemberRemovedEvent struct {
	ChannelID string `json:"channel_id"`

	ChannelType string `json:"channel_type"`

	Cid string `json:"cid"`

	CreatedAt Timestamp `json:"created_at"`

	Type string `json:"type"`

	Member *ChannelMember `json:"member,omitempty"`

	User *User `json:"user,omitempty"`
}

func (*MemberRemovedEvent) GetEventType() string {
	return "member.removed"
}

// MemberRequest is the payload for adding a member to a call.
type MemberRequest struct {
	UserID string `json:"user_id"`

	Role *string `json:"role,omitempty"`

	// Custom data for this object
	Custom map[string]any `json:"custom,omitempty"`
}

// MemberResponse is the payload for a member of a call.
type MemberResponse struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	// Date/time of the last update
	UpdatedAt Timestamp `json:"updated_at"`

	UserID string `json:"user_id"`

	// Custom member response data
	Custom map[string]any `json:"custom"`

	User UserResponse `json:"user"`

	// Date/time of deletion
	DeletedAt *Timestamp `json:"deleted_at,omitempty"`

	Role *string `json:"role,omitempty"`
}

type MemberUpdatedEvent struct {
	ChannelID string `json:"channel_id"`

	ChannelType string `json:"channel_type"`

	Cid string `json:"cid"`

	CreatedAt Timestamp `json:"created_at"`

	Type string `json:"type"`

	Team *string `json:"team,omitempty"`

	Member *ChannelMember `json:"member,omitempty"`

	User *User `json:"user,omitempty"`
}

func (*MemberUpdatedEvent) GetEventType() string {
	return "member.updated"
}

type MembersResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	// List of found members
	Members []ChannelMember `json:"members"`
}

type MembershipLevelResponse struct {
	// When the membership level was created
	CreatedAt Timestamp `json:"created_at"`

	// Unique identifier for the membership level
	ID string `json:"id"`

	// Display name for the membership level
	Name string `json:"name"`

	// Priority level
	Priority int `json:"priority"`

	// When the membership level was last updated
	UpdatedAt Timestamp `json:"updated_at"`

	// Activity tags this membership level gives access to
	Tags []string `json:"tags"`

	// Description of the membership level
	Description *string `json:"description,omitempty"`

	// Custom data for the membership level
	Custom map[string]any `json:"custom,omitempty"`
}

type Message struct {
	Cid string `json:"cid"`

	CreatedAt Timestamp `json:"created_at"`

	DeletedReplyCount int `json:"deleted_reply_count"`

	Html string `json:"html"`

	ID string `json:"id"`

	Pinned bool `json:"pinned"`

	ReplyCount int `json:"reply_count"`

	Shadowed bool `json:"shadowed"`

	Silent bool `json:"silent"`

	Text string `json:"text"`

	UpdatedAt Timestamp `json:"updated_at"`

	Type string `json:"type"`

	Attachments []Attachment `json:"attachments"`

	LatestReactions []Reaction `json:"latest_reactions"`

	MentionedUsers []User `json:"mentioned_users"`

	OwnReactions []Reaction `json:"own_reactions"`

	RestrictedVisibility []string `json:"restricted_visibility"`

	Custom map[string]any `json:"custom"`

	ReactionCounts map[string]int `json:"reaction_counts"`

	ReactionGroups map[string]*ReactionGroupResponse `json:"reaction_groups"`

	ReactionScores map[string]int `json:"reaction_scores"`

	BeforeMessageSendFailed *bool `json:"before_message_send_failed,omitempty"`

	Command *string `json:"command,omitempty"`

	DeletedAt *Timestamp `json:"deleted_at,omitempty"`

	DeletedForMe *bool `json:"deleted_for_me,omitempty"`

	MessageTextUpdatedAt *Timestamp `json:"message_text_updated_at,omitempty"`

	Mml *string `json:"mml,omitempty"`

	ParentID *string `json:"parent_id,omitempty"`

	PinExpires *Timestamp `json:"pin_expires,omitempty"`

	PinnedAt *Timestamp `json:"pinned_at,omitempty"`

	PollID *string `json:"poll_id,omitempty"`

	QuotedMessageID *string `json:"quoted_message_id,omitempty"`

	ShowInChannel *bool `json:"show_in_channel,omitempty"`

	ThreadParticipants []User `json:"thread_participants,omitempty"`

	I18n map[string]string `json:"i18n,omitempty"`

	ImageLabels map[string][]string `json:"image_labels,omitempty"`

	Member *ChannelMember `json:"member,omitempty"`

	Moderation *ModerationV2Response `json:"moderation,omitempty"`

	PinnedBy *User `json:"pinned_by,omitempty"`

	Poll *Poll `json:"poll,omitempty"`

	QuotedMessage *Message `json:"quoted_message,omitempty"`

	Reminder *MessageReminder `json:"reminder,omitempty"`

	SharedLocation *SharedLocation `json:"shared_location,omitempty"`

	User *User `json:"user,omitempty"`
}

type MessageActionRequest struct {
	// ReadOnlyData to execute command with
	FormData map[string]string `json:"form_data"`

	UserID *string `json:"user_id,omitempty"`

	User *UserRequest `json:"user,omitempty"`
}

type MessageChangeSet struct {
	Attachments bool `json:"attachments"`

	Custom bool `json:"custom"`

	Html bool `json:"html"`

	MentionedUserIds bool `json:"mentioned_user_ids"`

	Mml bool `json:"mml"`

	Pin bool `json:"pin"`

	QuotedMessageID bool `json:"quoted_message_id"`

	Silent bool `json:"silent"`

	Text bool `json:"text"`
}

type MessageDeletedEvent struct {
	ChannelID string `json:"channel_id"`

	ChannelType string `json:"channel_type"`

	Cid string `json:"cid"`

	CreatedAt Timestamp `json:"created_at"`

	HardDelete bool `json:"hard_delete"`

	Type string `json:"type"`

	DeletedForMe *bool `json:"deleted_for_me,omitempty"`

	Team *string `json:"team,omitempty"`

	ThreadParticipants []User `json:"thread_participants,omitempty"`

	Message *Message `json:"message,omitempty"`

	User *User `json:"user,omitempty"`
}

func (*MessageDeletedEvent) GetEventType() string {
	return "message.deleted"
}

type MessageFlagResponse struct {
	CreatedAt Timestamp `json:"created_at"`

	CreatedByAutomod bool `json:"created_by_automod"`

	UpdatedAt Timestamp `json:"updated_at"`

	ApprovedAt *Timestamp `json:"approved_at,omitempty"`

	Reason *string `json:"reason,omitempty"`

	RejectedAt *Timestamp `json:"rejected_at,omitempty"`

	ReviewedAt *Timestamp `json:"reviewed_at,omitempty"`

	Custom map[string]any `json:"custom,omitempty"`

	Details *FlagDetails `json:"details,omitempty"`

	Message *Message `json:"message,omitempty"`

	ModerationFeedback *FlagFeedback `json:"moderation_feedback,omitempty"`

	ModerationResult *MessageModerationResult `json:"moderation_result,omitempty"`

	ReviewedBy *UserResponse `json:"reviewed_by,omitempty"`

	User *UserResponse `json:"user,omitempty"`
}

type MessageFlaggedEvent struct {
	Cid string `json:"cid"`

	CreatedAt Timestamp `json:"created_at"`

	Type string `json:"type"`

	ThreadParticipants []User `json:"thread_participants,omitempty"`

	Flag *Flag `json:"flag,omitempty"`

	Message *Message `json:"message,omitempty"`

	User *User `json:"user,omitempty"`
}

func (*MessageFlaggedEvent) GetEventType() string {
	return "message.flagged"
}

type MessageHistoryEntryResponse struct {
	IsDeleted bool `json:"is_deleted"`

	MessageID string `json:"message_id"`

	MessageUpdatedAt Timestamp `json:"message_updated_at"`

	MessageUpdatedByID string `json:"message_updated_by_id"`

	Text string `json:"text"`

	Attachments []Attachment `json:"attachments"`

	Custom map[string]any `json:"Custom"`
}

// Result of the message moderation
type MessageModerationResult struct {
	// Action taken by automod
	Action string `json:"action"`

	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	// ID of the message
	MessageID string `json:"message_id"`

	// Date/time of the last update
	UpdatedAt Timestamp `json:"updated_at"`

	// Whether user has bad karma
	UserBadKarma bool `json:"user_bad_karma"`

	// Karma of the user
	UserKarma float64 `json:"user_karma"`

	// Word that was blocked
	BlockedWord *string `json:"blocked_word,omitempty"`

	// Name of the blocklist
	BlocklistName *string `json:"blocklist_name,omitempty"`

	// User who moderated the message
	ModeratedBy *string `json:"moderated_by,omitempty"`

	AiModerationResponse *ModerationResponse `json:"ai_moderation_response,omitempty"`

	ModerationThresholds *Thresholds `json:"moderation_thresholds,omitempty"`
}

type MessageNewEvent struct {
	ChannelID string `json:"channel_id"`

	ChannelType string `json:"channel_type"`

	Cid string `json:"cid"`

	CreatedAt Timestamp `json:"created_at"`

	WatcherCount int `json:"watcher_count"`

	Type string `json:"type"`

	Team *string `json:"team,omitempty"`

	ThreadParticipants []User `json:"thread_participants,omitempty"`

	Message *Message `json:"message,omitempty"`

	User *User `json:"user,omitempty"`
}

func (*MessageNewEvent) GetEventType() string {
	return "message.new"
}

type MessageOptions struct {
	IncludeThreadParticipants *bool `json:"include_thread_participants,omitempty"`
}

type MessagePaginationParams struct{}

type MessageReadEvent struct {
	ChannelID string `json:"channel_id"`

	ChannelType string `json:"channel_type"`

	Cid string `json:"cid"`

	CreatedAt Timestamp `json:"created_at"`

	Type string `json:"type"`

	ChannelLastMessageAt *Timestamp `json:"channel_last_message_at,omitempty"`

	LastReadMessageID *string `json:"last_read_message_id,omitempty"`

	Team *string `json:"team,omitempty"`

	Channel *ChannelResponse `json:"channel,omitempty"`

	Thread *ThreadResponse `json:"thread,omitempty"`

	User *UserResponseCommonFields `json:"user,omitempty"`
}

type MessageReminder struct {
	ChannelCid string `json:"channel_cid"`

	CreatedAt Timestamp `json:"created_at"`

	MessageID string `json:"message_id"`

	TaskID string `json:"task_id"`

	UpdatedAt Timestamp `json:"updated_at"`

	UserID string `json:"user_id"`

	RemindAt *Timestamp `json:"remind_at,omitempty"`

	Channel *Channel `json:"channel,omitempty"`

	Message *Message `json:"message,omitempty"`

	User *User `json:"user,omitempty"`
}

type MessageRequest struct {
	Html *string `json:"html,omitempty"`

	ID *string `json:"id,omitempty"`

	Mml *string `json:"mml,omitempty"`

	ParentID *string `json:"parent_id,omitempty"`

	PinExpires *Timestamp `json:"pin_expires,omitempty"`

	Pinned *bool `json:"pinned,omitempty"`

	PinnedAt *Timestamp `json:"pinned_at,omitempty"`

	PollID *string `json:"poll_id,omitempty"`

	QuotedMessageID *string `json:"quoted_message_id,omitempty"`

	ShowInChannel *bool `json:"show_in_channel,omitempty"`

	Silent *bool `json:"silent,omitempty"`

	Text *string `json:"text,omitempty"`

	UserID *string `json:"user_id,omitempty"`

	Type *string `json:"type,omitempty"`

	Attachments []Attachment `json:"attachments,omitempty"`

	MentionedUsers []string `json:"mentioned_users,omitempty"`

	RestrictedVisibility []string `json:"restricted_visibility,omitempty"`

	Custom map[string]any `json:"custom,omitempty"`

	SharedLocation *SharedLocation `json:"shared_location,omitempty"`

	User *UserRequest `json:"user,omitempty"`
}

// Represents any chat message
type MessageResponse struct {
	// Channel unique identifier in <type>:<id> format
	Cid string `json:"cid"`

	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	DeletedReplyCount int `json:"deleted_reply_count"`

	// Contains HTML markup of the message. Can only be set when using server-side API
	Html string `json:"html"`

	// Message ID is unique string identifier of the message
	ID string `json:"id"`

	// Whether message is pinned or not
	Pinned bool `json:"pinned"`

	// Number of replies to this message
	ReplyCount int `json:"reply_count"`

	// Whether the message was shadowed or not
	Shadowed bool `json:"shadowed"`

	// Whether message is silent or not
	Silent bool `json:"silent"`

	// Text of the message. Should be empty if `mml` is provided
	Text string `json:"text"`

	// Date/time of the last update
	UpdatedAt Timestamp `json:"updated_at"`

	// Contains type of the message
	Type string `json:"type"`

	// Array of message attachments
	Attachments []Attachment `json:"attachments"`

	// List of 10 latest reactions to this message
	LatestReactions []ReactionResponse `json:"latest_reactions"`

	// List of mentioned users
	MentionedUsers []UserResponse `json:"mentioned_users"`

	// List of 10 latest reactions of authenticated user to this message
	OwnReactions []ReactionResponse `json:"own_reactions"`

	// A list of user ids that have restricted visibility to the message, if the list is not empty, the message is only visible to the users in the list
	RestrictedVisibility []string `json:"restricted_visibility"`

	Custom map[string]any `json:"custom"`

	// An object containing number of reactions of each type. Key: reaction type (string), value: number of reactions (int)
	ReactionCounts map[string]int `json:"reaction_counts"`

	// An object containing scores of reactions of each type. Key: reaction type (string), value: total score of reactions (int)
	ReactionScores map[string]int `json:"reaction_scores"`

	User UserResponse `json:"user"`

	// Contains provided slash command
	Command *string `json:"command,omitempty"`

	// Date/time of deletion
	DeletedAt *Timestamp `json:"deleted_at,omitempty"`

	DeletedForMe *bool `json:"deleted_for_me,omitempty"`

	MessageTextUpdatedAt *Timestamp `json:"message_text_updated_at,omitempty"`

	// Should be empty if `text` is provided. Can only be set when using server-side API
	Mml *string `json:"mml,omitempty"`

	// ID of parent message (thread)
	ParentID *string `json:"parent_id,omitempty"`

	// Date when pinned message expires
	PinExpires *Timestamp `json:"pin_expires,omitempty"`

	// Date when message got pinned
	PinnedAt *Timestamp `json:"pinned_at,omitempty"`

	// Identifier of the poll to include in the message
	PollID *string `json:"poll_id,omitempty"`

	QuotedMessageID *string `json:"quoted_message_id,omitempty"`

	// Whether thread reply should be shown in the channel as well
	ShowInChannel *bool `json:"show_in_channel,omitempty"`

	// List of users who participate in thread
	ThreadParticipants []UserResponse `json:"thread_participants,omitempty"`

	Draft *DraftResponse `json:"draft,omitempty"`

	// Object with translations. Key `language` contains the original language key. Other keys contain translations
	I18n map[string]string `json:"i18n,omitempty"`

	// Contains image moderation information
	ImageLabels map[string][]string `json:"image_labels,omitempty"`

	Member *ChannelMemberResponse `json:"member,omitempty"`

	Moderation *ModerationV2Response `json:"moderation,omitempty"`

	PinnedBy *UserResponse `json:"pinned_by,omitempty"`

	Poll *PollResponseData `json:"poll,omitempty"`

	QuotedMessage *MessageResponse `json:"quoted_message,omitempty"`

	ReactionGroups map[string]*ReactionGroupResponse `json:"reaction_groups,omitempty"`

	Reminder *ReminderResponseData `json:"reminder,omitempty"`

	SharedLocation *SharedLocationResponseData `json:"shared_location,omitempty"`
}

type MessageStatsResponse struct {
	CountOverTime []CountByMinuteResponse `json:"count_over_time,omitempty"`
}

type MessageUnblockedEvent struct {
	Cid string `json:"cid"`

	CreatedAt Timestamp `json:"created_at"`

	Type string `json:"type"`

	ThreadParticipants []User `json:"thread_participants,omitempty"`

	Message *Message `json:"message,omitempty"`

	User *User `json:"user,omitempty"`
}

func (*MessageUnblockedEvent) GetEventType() string {
	return "message.unblocked"
}

type MessageUndeletedEvent struct {
	ChannelID string `json:"channel_id"`

	ChannelType string `json:"channel_type"`

	Cid string `json:"cid"`

	CreatedAt Timestamp `json:"created_at"`

	Type string `json:"type"`

	Team *string `json:"team,omitempty"`

	ThreadParticipants []User `json:"thread_participants,omitempty"`

	Message *Message `json:"message,omitempty"`

	User *User `json:"user,omitempty"`
}

func (*MessageUndeletedEvent) GetEventType() string {
	return "message.undeleted"
}

type MessageUpdate struct {
	OldText *string `json:"old_text,omitempty"`

	ChangeSet *MessageChangeSet `json:"change_set,omitempty"`
}

type MessageUpdatedEvent struct {
	ChannelID string `json:"channel_id"`

	ChannelType string `json:"channel_type"`

	Cid string `json:"cid"`

	CreatedAt Timestamp `json:"created_at"`

	Type string `json:"type"`

	Team *string `json:"team,omitempty"`

	ThreadParticipants []User `json:"thread_participants,omitempty"`

	Message *Message `json:"message,omitempty"`

	User *User `json:"user,omitempty"`
}

func (*MessageUpdatedEvent) GetEventType() string {
	return "message.updated"
}

// Represents any chat message
type MessageWithChannelResponse struct {
	// Channel unique identifier in <type>:<id> format
	Cid string `json:"cid"`

	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	DeletedReplyCount int `json:"deleted_reply_count"`

	// Contains HTML markup of the message. Can only be set when using server-side API
	Html string `json:"html"`

	// Message ID is unique string identifier of the message
	ID string `json:"id"`

	// Whether message is pinned or not
	Pinned bool `json:"pinned"`

	// Number of replies to this message
	ReplyCount int `json:"reply_count"`

	// Whether the message was shadowed or not
	Shadowed bool `json:"shadowed"`

	// Whether message is silent or not
	Silent bool `json:"silent"`

	// Text of the message. Should be empty if `mml` is provided
	Text string `json:"text"`

	// Date/time of the last update
	UpdatedAt Timestamp `json:"updated_at"`

	// Contains type of the message
	Type string `json:"type"`

	// Array of message attachments
	Attachments []Attachment `json:"attachments"`

	// List of 10 latest reactions to this message
	LatestReactions []ReactionResponse `json:"latest_reactions"`

	// List of mentioned users
	MentionedUsers []UserResponse `json:"mentioned_users"`

	// List of 10 latest reactions of authenticated user to this message
	OwnReactions []ReactionResponse `json:"own_reactions"`

	// A list of user ids that have restricted visibility to the message, if the list is not empty, the message is only visible to the users in the list
	RestrictedVisibility []string `json:"restricted_visibility"`

	Channel ChannelResponse `json:"channel"`

	Custom map[string]any `json:"custom"`

	// An object containing number of reactions of each type. Key: reaction type (string), value: number of reactions (int)
	ReactionCounts map[string]int `json:"reaction_counts"`

	// An object containing scores of reactions of each type. Key: reaction type (string), value: total score of reactions (int)
	ReactionScores map[string]int `json:"reaction_scores"`

	User UserResponse `json:"user"`

	// Contains provided slash command
	Command *string `json:"command,omitempty"`

	// Date/time of deletion
	DeletedAt *Timestamp `json:"deleted_at,omitempty"`

	DeletedForMe *bool `json:"deleted_for_me,omitempty"`

	MessageTextUpdatedAt *Timestamp `json:"message_text_updated_at,omitempty"`

	// Should be empty if `text` is provided. Can only be set when using server-side API
	Mml *string `json:"mml,omitempty"`

	// ID of parent message (thread)
	ParentID *string `json:"parent_id,omitempty"`

	// Date when pinned message expires
	PinExpires *Timestamp `json:"pin_expires,omitempty"`

	// Date when message got pinned
	PinnedAt *Timestamp `json:"pinned_at,omitempty"`

	// Identifier of the poll to include in the message
	PollID *string `json:"poll_id,omitempty"`

	QuotedMessageID *string `json:"quoted_message_id,omitempty"`

	// Whether thread reply should be shown in the channel as well
	ShowInChannel *bool `json:"show_in_channel,omitempty"`

	// List of users who participate in thread
	ThreadParticipants []UserResponse `json:"thread_participants,omitempty"`

	Draft *DraftResponse `json:"draft,omitempty"`

	// Object with translations. Key `language` contains the original language key. Other keys contain translations
	I18n map[string]string `json:"i18n,omitempty"`

	// Contains image moderation information
	ImageLabels map[string][]string `json:"image_labels,omitempty"`

	Member *ChannelMemberResponse `json:"member,omitempty"`

	Moderation *ModerationV2Response `json:"moderation,omitempty"`

	PinnedBy *UserResponse `json:"pinned_by,omitempty"`

	Poll *PollResponseData `json:"poll,omitempty"`

	QuotedMessage *MessageResponse `json:"quoted_message,omitempty"`

	ReactionGroups map[string]*ReactionGroupResponse `json:"reaction_groups,omitempty"`

	Reminder *ReminderResponseData `json:"reminder,omitempty"`

	SharedLocation *SharedLocationResponseData `json:"shared_location,omitempty"`
}

type ModerationActionConfig struct {
	Action string `json:"action"`

	Description string `json:"description"`

	EntityType string `json:"entity_type"`

	Icon string `json:"icon"`

	Order int `json:"order"`

	Custom map[string]any `json:"custom"`
}

// This event is sent when a moderation check is completed
type ModerationCheckCompletedEvent struct {
	CreatedAt Timestamp `json:"created_at"`

	// The ID of entity which was moderated
	EntityID string `json:"entity_id"`

	// The type of the entity which was moderated
	EntityType string `json:"entity_type"`

	// The recommended action
	RecommendedAction string `json:"recommended_action"`

	// The review queue item ID
	ReviewQueueItemID string `json:"review_queue_item_id"`

	Custom map[string]any `json:"custom"`

	Type string `json:"type"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`
}

func (*ModerationCheckCompletedEvent) GetEventType() string {
	return "moderation_check.completed"
}

type ModerationConfig struct {
	Async *bool `json:"async,omitempty"`

	CreatedAt *Timestamp `json:"created_at,omitempty"`

	Key *string `json:"key,omitempty"`

	Team *string `json:"team,omitempty"`

	UpdatedAt *Timestamp `json:"updated_at,omitempty"`

	SupportedVideoCallHarmTypes []string `json:"supported_video_call_harm_types,omitempty"`

	AiImageConfig *AIImageConfig `json:"ai_image_config,omitempty"`

	AiImageLiteConfig *BodyguardImageAnalysisConfig `json:"ai_image_lite_config,omitempty"`

	AiTextConfig *AITextConfig `json:"ai_text_config,omitempty"`

	AiVideoConfig *AIVideoConfig `json:"ai_video_config,omitempty"`

	AutomodPlatformCircumventionConfig *AutomodPlatformCircumventionConfig `json:"automod_platform_circumvention_config,omitempty"`

	AutomodSemanticFiltersConfig *AutomodSemanticFiltersConfig `json:"automod_semantic_filters_config,omitempty"`

	AutomodToxicityConfig *AutomodToxicityConfig `json:"automod_toxicity_config,omitempty"`

	BlockListConfig *BlockListConfig `json:"block_list_config,omitempty"`

	GoogleVisionConfig *GoogleVisionConfig `json:"google_vision_config,omitempty"`

	LlmConfig *LLMConfig `json:"llm_config,omitempty"`

	VelocityFilterConfig *VelocityFilterConfig `json:"velocity_filter_config,omitempty"`

	VideoCallRuleConfig *VideoCallRuleConfig `json:"video_call_rule_config,omitempty"`
}

// This event is sent when a custom moderation action is executed
type ModerationCustomActionEvent struct {
	// The ID of the custom action that was executed
	ActionID string `json:"action_id"`

	CreatedAt Timestamp `json:"created_at"`

	Custom map[string]any `json:"custom"`

	ReviewQueueItem ReviewQueueItemResponse `json:"review_queue_item"`

	Type string `json:"type"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	// Additional options passed to the custom action
	ActionOptions map[string]any `json:"action_options,omitempty"`

	Message *MessageResponse `json:"message,omitempty"`
}

func (*ModerationCustomActionEvent) GetEventType() string {
	return "moderation.custom_action"
}

type ModerationDashboardPreferences struct {
	DisableFlaggingReviewedEntity *bool `json:"disable_flagging_reviewed_entity,omitempty"`

	FlagUserOnFlaggedContent *bool `json:"flag_user_on_flagged_content,omitempty"`

	MediaQueueBlurEnabled *bool `json:"media_queue_blur_enabled,omitempty"`
}

type ModerationFlagResponse struct {
	CreatedAt Timestamp `json:"created_at"`

	EntityID string `json:"entity_id"`

	EntityType string `json:"entity_type"`

	UpdatedAt Timestamp `json:"updated_at"`

	UserID string `json:"user_id"`

	Type string `json:"type"`

	Result []map[string]any `json:"result"`

	EntityCreatorID *string `json:"entity_creator_id,omitempty"`

	Reason *string `json:"reason,omitempty"`

	ReviewQueueItemID *string `json:"review_queue_item_id,omitempty"`

	Labels []string `json:"labels,omitempty"`

	Custom map[string]any `json:"custom,omitempty"`

	ModerationPayload *ModerationPayload `json:"moderation_payload,omitempty"`

	ReviewQueueItem *ReviewQueueItemResponse `json:"review_queue_item,omitempty"`

	User *UserResponse `json:"user,omitempty"`
}

type ModerationFlaggedEvent struct {
	CreatedAt Timestamp `json:"created_at"`

	Type string `json:"type"`

	Item *string `json:"item,omitempty"`

	ObjectID *string `json:"object_id,omitempty"`

	User *User `json:"user,omitempty"`
}

func (*ModerationFlaggedEvent) GetEventType() string {
	return "moderation.flagged"
}

// This event is sent when a moderation item is marked as reviewed
type ModerationMarkReviewedEvent struct {
	CreatedAt Timestamp `json:"created_at"`

	Custom map[string]any `json:"custom"`

	Item ReviewQueueItemResponse `json:"item"`

	Type string `json:"type"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	Message *MessageResponse `json:"message,omitempty"`
}

func (*ModerationMarkReviewedEvent) GetEventType() string {
	return "moderation.mark_reviewed"
}

type ModerationPayload struct {
	Images []string `json:"images,omitempty"`

	Texts []string `json:"texts,omitempty"`

	Videos []string `json:"videos,omitempty"`

	Custom map[string]any `json:"custom,omitempty"`
}

type ModerationResponse struct {
	Action string `json:"action"`

	Explicit float64 `json:"explicit"`

	Spam float64 `json:"spam"`

	Toxic float64 `json:"toxic"`
}

type ModerationRuleV2Response struct {
	CreatedAt Timestamp `json:"created_at"`

	Description string `json:"description"`

	Enabled bool `json:"enabled"`

	ID string `json:"id"`

	Name string `json:"name"`

	RuleType string `json:"rule_type"`

	Team string `json:"team"`

	UpdatedAt Timestamp `json:"updated_at"`

	ConfigKeys []string `json:"config_keys"`

	Action RuleBuilderAction `json:"action"`

	CooldownPeriod *string `json:"cooldown_period,omitempty"`

	Logic *string `json:"logic,omitempty"`

	Conditions []RuleBuilderCondition `json:"conditions,omitempty"`

	Groups []RuleBuilderConditionGroup `json:"groups,omitempty"`
}

type ModerationV2Response struct {
	Action string `json:"action"`

	OriginalText string `json:"original_text"`

	BlocklistMatched *string `json:"blocklist_matched,omitempty"`

	PlatformCircumvented *bool `json:"platform_circumvented,omitempty"`

	SemanticFilterMatched *string `json:"semantic_filter_matched,omitempty"`

	ImageHarms []string `json:"image_harms,omitempty"`

	TextHarms []string `json:"text_harms,omitempty"`
}

type MuteChannelResponse struct {
	Duration string `json:"duration"`

	// Object with mutes (if multiple channels were muted)
	ChannelMutes []ChannelMute `json:"channel_mutes,omitempty"`

	ChannelMute *ChannelMute `json:"channel_mute,omitempty"`

	OwnUser *OwnUser `json:"own_user,omitempty"`
}

type MuteResponse struct {
	Duration string `json:"duration"`

	// Object with mutes (if multiple users were muted)
	Mutes []UserMute `json:"mutes,omitempty"`

	// A list of users that can't be found. Common cause for this is deleted users
	NonExistingUsers []string `json:"non_existing_users,omitempty"`

	OwnUser *OwnUser `json:"own_user,omitempty"`
}

// MuteUsersResponse is the response payload for the mute users endpoint.
type MuteUsersResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`
}

type NetworkMetricsReportResponse struct {
	AverageConnectionTime *float64 `json:"average_connection_time,omitempty"`

	AverageJitter *float64 `json:"average_jitter,omitempty"`

	AverageLatency *float64 `json:"average_latency,omitempty"`

	AverageTimeToReconnect *float64 `json:"average_time_to_reconnect,omitempty"`
}

type NoiseCancellationSettings struct {
	Mode string `json:"mode"`
}

type NotificationConfig struct {
	// Whether to track read status
	TrackRead *bool `json:"track_read,omitempty"`

	// Whether to track seen status
	TrackSeen *bool `json:"track_seen,omitempty"`
}

type NotificationContext struct {
	Target *NotificationTarget `json:"target,omitempty"`

	Trigger *NotificationTrigger `json:"trigger,omitempty"`
}

// Emitted when notification feed is updated.
type NotificationFeedUpdatedEvent struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	// The ID of the feed
	Fid string `json:"fid"`

	Custom map[string]any `json:"custom"`

	// The type of event: "feeds.notification_feed.updated" in this case
	Type string `json:"type"`

	FeedVisibility *string `json:"feed_visibility,omitempty"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	// Aggregated activities for notification feeds
	AggregatedActivities []AggregatedActivityResponse `json:"aggregated_activities,omitempty"`

	NotificationStatus *NotificationStatusResponse `json:"notification_status,omitempty"`

	User *UserResponseCommonFields `json:"user,omitempty"`
}

func (*NotificationFeedUpdatedEvent) GetEventType() string {
	return "feeds.notification_feed.updated"
}

type NotificationMarkUnreadEvent struct {
	ChannelID string `json:"channel_id"`

	ChannelMemberCount int `json:"channel_member_count"`

	ChannelType string `json:"channel_type"`

	Cid string `json:"cid"`

	CreatedAt Timestamp `json:"created_at"`

	FirstUnreadMessageID string `json:"first_unread_message_id"`

	LastReadAt Timestamp `json:"last_read_at"`

	TotalUnreadCount int `json:"total_unread_count"`

	UnreadChannels int `json:"unread_channels"`

	UnreadCount int `json:"unread_count"`

	UnreadMessages int `json:"unread_messages"`

	UnreadThreads int `json:"unread_threads"`

	Type string `json:"type"`

	LastReadMessageID *string `json:"last_read_message_id,omitempty"`

	Team *string `json:"team,omitempty"`

	ThreadID *string `json:"thread_id,omitempty"`

	Channel *ChannelResponse `json:"channel,omitempty"`

	User *User `json:"user,omitempty"`
}

func (*NotificationMarkUnreadEvent) GetEventType() string {
	return "notification.mark_unread"
}

type NotificationSettings struct {
	Enabled bool `json:"enabled"`

	CallLiveStarted EventNotificationSettings `json:"call_live_started"`

	CallMissed EventNotificationSettings `json:"call_missed"`

	CallNotification EventNotificationSettings `json:"call_notification"`

	CallRing EventNotificationSettings `json:"call_ring"`

	SessionStarted EventNotificationSettings `json:"session_started"`
}

type NotificationStatusResponse struct {
	// Number of unread notifications
	Unread int `json:"unread"`

	// Number of unseen notifications
	Unseen int `json:"unseen"`

	LastReadAt *Timestamp `json:"last_read_at,omitempty"`

	// When notifications were last seen
	LastSeenAt *Timestamp `json:"last_seen_at,omitempty"`

	// IDs of activities that have been read
	ReadActivities []string `json:"read_activities,omitempty"`

	SeenActivities []string `json:"seen_activities,omitempty"`
}

type NotificationTarget struct {
	// The ID of the target (activity ID or user ID)
	ID string `json:"id"`

	// The name of the target user (for user targets like follows)
	Name *string `json:"name,omitempty"`

	// The text content of the target activity (for activity targets)
	Text *string `json:"text,omitempty"`

	// The ID of the user who created the target activity (for activity targets)
	UserID *string `json:"user_id,omitempty"`

	// The type of the target activity (for activity targets)
	Type *string `json:"type,omitempty"`

	// Attachments on the target activity (for activity targets)
	Attachments []Attachment `json:"attachments,omitempty"`
}

type NotificationTrigger struct {
	// Human-readable text describing the notification
	Text string `json:"text"`

	// The type of notification (mention, reaction, comment, follow, etc.)
	Type string `json:"type"`
}

type OCRRule struct {
	Action string `json:"action"`

	Label string `json:"label"`
}

type OnlyUserID struct {
	ID string `json:"id"`
}

type OwnCapability string

const (
	BLOCK_USERS                OwnCapability = "block-users"
	CHANGE_MAX_DURATION        OwnCapability = "change-max-duration"
	CREATE_CALL                OwnCapability = "create-call"
	CREATE_REACTION            OwnCapability = "create-reaction"
	ENABLE_NOISE_CANCELLATION  OwnCapability = "enable-noise-cancellation"
	END_CALL                   OwnCapability = "end-call"
	JOIN_BACKSTAGE             OwnCapability = "join-backstage"
	JOIN_CALL                  OwnCapability = "join-call"
	JOIN_ENDED_CALL            OwnCapability = "join-ended-call"
	KICK_USER                  OwnCapability = "kick-user"
	MUTE_USERS                 OwnCapability = "mute-users"
	PIN_FOR_EVERYONE           OwnCapability = "pin-for-everyone"
	READ_CALL                  OwnCapability = "read-call"
	REMOVE_CALL_MEMBER         OwnCapability = "remove-call-member"
	SCREENSHARE                OwnCapability = "screenshare"
	SEND_AUDIO                 OwnCapability = "send-audio"
	SEND_CLOSED_CAPTIONS_CALL  OwnCapability = "send-closed-captions-call"
	SEND_VIDEO                 OwnCapability = "send-video"
	START_BROADCAST_CALL       OwnCapability = "start-broadcast-call"
	START_CLOSED_CAPTIONS_CALL OwnCapability = "start-closed-captions-call"
	START_FRAME_RECORD_CALL    OwnCapability = "start-frame-record-call"
	START_RECORD_CALL          OwnCapability = "start-record-call"
	START_TRANSCRIPTION_CALL   OwnCapability = "start-transcription-call"
	STOP_BROADCAST_CALL        OwnCapability = "stop-broadcast-call"
	STOP_CLOSED_CAPTIONS_CALL  OwnCapability = "stop-closed-captions-call"
	STOP_FRAME_RECORD_CALL     OwnCapability = "stop-frame-record-call"
	STOP_RECORD_CALL           OwnCapability = "stop-record-call"
	STOP_TRANSCRIPTION_CALL    OwnCapability = "stop-transcription-call"
	UPDATE_CALL                OwnCapability = "update-call"
	UPDATE_CALL_MEMBER         OwnCapability = "update-call-member"
	UPDATE_CALL_PERMISSIONS    OwnCapability = "update-call-permissions"
	UPDATE_CALL_SETTINGS       OwnCapability = "update-call-settings"
)

func (c OwnCapability) String() string {
	return string(c)
}

type OwnUser struct {
	Banned bool `json:"banned"`

	CreatedAt Timestamp `json:"created_at"`

	ID string `json:"id"`

	Language string `json:"language"`

	Online bool `json:"online"`

	Role string `json:"role"`

	TotalUnreadCount int `json:"total_unread_count"`

	UnreadChannels int `json:"unread_channels"`

	UnreadCount int `json:"unread_count"`

	UnreadThreads int `json:"unread_threads"`

	UpdatedAt Timestamp `json:"updated_at"`

	ChannelMutes []ChannelMute `json:"channel_mutes"`

	Devices []Device `json:"devices"`

	Mutes []UserMute `json:"mutes"`

	Custom map[string]any `json:"custom"`

	TotalUnreadCountByTeam map[string]int `json:"total_unread_count_by_team"`

	AvgResponseTime *int `json:"avg_response_time,omitempty"`

	DeactivatedAt *Timestamp `json:"deactivated_at,omitempty"`

	DeletedAt *Timestamp `json:"deleted_at,omitempty"`

	Invisible *bool `json:"invisible,omitempty"`

	LastActive *Timestamp `json:"last_active,omitempty"`

	LastEngagedAt *Timestamp `json:"last_engaged_at,omitempty"`

	BlockedUserIds []string `json:"blocked_user_ids,omitempty"`

	LatestHiddenChannels []string `json:"latest_hidden_channels,omitempty"`

	Teams []string `json:"teams,omitempty"`

	PrivacySettings *PrivacySettings `json:"privacy_settings,omitempty"`

	PushPreferences *PushPreferences `json:"push_preferences,omitempty"`

	TeamsRole map[string]string `json:"teams_role,omitempty"`
}

type OwnUserResponse struct {
	Banned bool `json:"banned"`

	CreatedAt Timestamp `json:"created_at"`

	ID string `json:"id"`

	Invisible bool `json:"invisible"`

	Language string `json:"language"`

	Online bool `json:"online"`

	Role string `json:"role"`

	TotalUnreadCount int `json:"total_unread_count"`

	UnreadChannels int `json:"unread_channels"`

	UnreadCount int `json:"unread_count"`

	UnreadThreads int `json:"unread_threads"`

	UpdatedAt Timestamp `json:"updated_at"`

	ChannelMutes []ChannelMute `json:"channel_mutes"`

	Devices []DeviceResponse `json:"devices"`

	Mutes []UserMuteResponse `json:"mutes"`

	Teams []string `json:"teams"`

	Custom map[string]any `json:"custom"`

	AvgResponseTime *int `json:"avg_response_time,omitempty"`

	DeactivatedAt *Timestamp `json:"deactivated_at,omitempty"`

	DeletedAt *Timestamp `json:"deleted_at,omitempty"`

	Image *string `json:"image,omitempty"`

	LastActive *Timestamp `json:"last_active,omitempty"`

	Name *string `json:"name,omitempty"`

	RevokeTokensIssuedBefore *Timestamp `json:"revoke_tokens_issued_before,omitempty"`

	BlockedUserIds []string `json:"blocked_user_ids,omitempty"`

	LatestHiddenChannels []string `json:"latest_hidden_channels,omitempty"`

	PrivacySettings *PrivacySettingsResponse `json:"privacy_settings,omitempty"`

	PushPreferences *PushPreferences `json:"push_preferences,omitempty"`

	TeamsRole map[string]string `json:"teams_role,omitempty"`

	TotalUnreadCountByTeam map[string]int `json:"total_unread_count_by_team,omitempty"`
}

type PagerRequest struct {
	Limit *int `json:"limit,omitempty"`

	Next *string `json:"next,omitempty"`

	Prev *string `json:"prev,omitempty"`
}

type PagerResponse struct {
	Next *string `json:"next,omitempty"`

	Prev *string `json:"prev,omitempty"`
}

type PaginationParams struct {
	Limit *int `json:"limit,omitempty"`

	Offset *int `json:"offset,omitempty"`
}

type ParticipantCountByMinuteResponse struct {
	First int `json:"first"`

	Last int `json:"last"`

	Max int `json:"max"`

	Min int `json:"min"`

	StartTs Timestamp `json:"start_ts"`
}

type ParticipantCountOverTimeResponse struct {
	ByMinute []ParticipantCountByMinuteResponse `json:"by_minute,omitempty"`
}

type ParticipantReportResponse struct {
	Sum int `json:"sum"`

	Unique int `json:"unique"`

	MaxConcurrent *int `json:"max_concurrent,omitempty"`

	ByBrowser []GroupedStatsResponse `json:"by_browser,omitempty"`

	ByCountry []GroupedStatsResponse `json:"by_country,omitempty"`

	ByDevice []GroupedStatsResponse `json:"by_device,omitempty"`

	ByOperatingSystem []GroupedStatsResponse `json:"by_operating_system,omitempty"`

	CountOverTime *ParticipantCountOverTimeResponse `json:"count_over_time,omitempty"`

	Publishers *PublisherStatsResponse `json:"publishers,omitempty"`

	Subscribers *SubscriberStatsResponse `json:"subscribers,omitempty"`
}

// Pending message event for async moderation
type PendingMessageEvent struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	// The method used for the pending message
	Method string `json:"method"`

	Custom map[string]any `json:"custom"`

	// The type of event: "message.pending" in this case
	Type string `json:"type"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	Channel *Channel `json:"channel,omitempty"`

	Message *Message `json:"message,omitempty"`

	Metadata map[string]string `json:"metadata,omitempty"`

	User *User `json:"user,omitempty"`
}

func (*PendingMessageEvent) GetEventType() string {
	return "message.pending"
}

type PendingMessageResponse struct {
	Channel *ChannelResponse `json:"channel,omitempty"`

	Message *MessageResponse `json:"message,omitempty"`

	Metadata map[string]string `json:"metadata,omitempty"`

	User *UserResponse `json:"user,omitempty"`
}

type PerSDKUsageReport struct {
	Total int `json:"total"`

	ByVersion map[string]int `json:"by_version"`
}

type Permission struct {
	// Action name this permission is for (e.g. SendMessage)
	Action string `json:"action"`

	// Whether this is a custom permission or built-in
	Custom bool `json:"custom"`

	// Description of the permission
	Description string `json:"description"`

	// Unique permission ID
	ID string `json:"id"`

	// Level at which permission could be applied (app or channel)
	Level string `json:"level"`

	// Name of the permission
	Name string `json:"name"`

	// Whether this permission applies to resource owner or not
	Owner bool `json:"owner"`

	// Whether this permission applies to teammates (multi-tenancy mode only)
	SameTeam bool `json:"same_team"`

	// List of tags of the permission
	Tags []string `json:"tags"`

	// MongoDB style condition which decides whether or not the permission is granted
	Condition map[string]any `json:"condition,omitempty"`
}

// This event is sent when a user requests access to a feature on a call,
// clients receiving this event should display a permission request to the user
type PermissionRequestEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	// The list of permissions requested by the user
	Permissions []string `json:"permissions"`

	User UserResponse `json:"user"`

	// The type of event: "call.permission_request" in this case
	Type string `json:"type"`
}

func (*PermissionRequestEvent) GetEventType() string {
	return "call.permission_request"
}

type PinActivityResponse struct {
	// When the activity was pinned
	CreatedAt Timestamp `json:"created_at"`

	Duration string `json:"duration"`

	// Fully qualified ID of the feed the activity was pinned to
	Feed string `json:"feed"`

	// ID of the user who pinned the activity
	UserID string `json:"user_id"`

	Activity ActivityResponse `json:"activity"`
}

// PinRequest is the payload for pinning a message.
type PinRequest struct {
	// the session ID of the user who pinned the message
	SessionID string `json:"session_id"`

	// the user ID of the user who pinned the message
	UserID string `json:"user_id"`
}

// Basic response information
type PinResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`
}

type PlatformDataResponse struct {
	Browser BrowserDataResponse `json:"browser"`

	Device DeviceDataResponse `json:"device"`

	Os ClientOSDataResponse `json:"os"`
}

type Policy struct {
	Action int `json:"action"`

	CreatedAt Timestamp `json:"created_at"`

	Name string `json:"name"`

	Owner bool `json:"owner"`

	Priority int `json:"priority"`

	UpdatedAt Timestamp `json:"updated_at"`

	Resources []string `json:"resources"`

	Roles []string `json:"roles"`
}

// Policy request
type PolicyRequest struct {
	Action string `json:"action"`

	// User-friendly policy name
	Name string `json:"name"`

	// Whether policy applies to resource owner or not
	Owner bool `json:"owner"`

	// Policy priority
	Priority int `json:"priority"`

	// List of resources to apply policy to
	Resources []string `json:"resources"`

	// List of roles to apply policy to
	Roles []string `json:"roles"`
}

type Poll struct {
	AllowAnswers bool `json:"allow_answers"`

	AllowUserSuggestedOptions bool `json:"allow_user_suggested_options"`

	AnswersCount int `json:"answers_count"`

	CreatedAt Timestamp `json:"created_at"`

	CreatedByID string `json:"created_by_id"`

	Description string `json:"description"`

	EnforceUniqueVote bool `json:"enforce_unique_vote"`

	ID string `json:"id"`

	Name string `json:"name"`

	UpdatedAt Timestamp `json:"updated_at"`

	VoteCount int `json:"vote_count"`

	LatestAnswers []PollVote `json:"latest_answers"`

	Options []PollOption `json:"options"`

	OwnVotes []PollVote `json:"own_votes"`

	Custom map[string]any `json:"Custom"`

	LatestVotesByOption map[string][]PollVote `json:"latest_votes_by_option"`

	VoteCountsByOption map[string]int `json:"vote_counts_by_option"`

	IsClosed *bool `json:"is_closed,omitempty"`

	MaxVotesAllowed *int `json:"max_votes_allowed,omitempty"`

	VotingVisibility *string `json:"voting_visibility,omitempty"`

	CreatedBy *User `json:"created_by,omitempty"`
}

type PollOption struct {
	ID string `json:"id"`

	Text string `json:"text"`

	Custom map[string]any `json:"custom"`
}

type PollOptionInput struct {
	Text *string `json:"text,omitempty"`

	Custom map[string]any `json:"custom,omitempty"`
}

type PollOptionRequest struct {
	ID string `json:"id"`

	Text *string `json:"text,omitempty"`

	Custom map[string]any `json:"custom,omitempty"`
}

type PollOptionResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	PollOption PollOptionResponseData `json:"poll_option"`
}

type PollOptionResponseData struct {
	ID string `json:"id"`

	Text string `json:"text"`

	Custom map[string]any `json:"custom"`
}

type PollResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Poll PollResponseData `json:"poll"`
}

type PollResponseData struct {
	AllowAnswers bool `json:"allow_answers"`

	AllowUserSuggestedOptions bool `json:"allow_user_suggested_options"`

	AnswersCount int `json:"answers_count"`

	CreatedAt Timestamp `json:"created_at"`

	CreatedByID string `json:"created_by_id"`

	Description string `json:"description"`

	EnforceUniqueVote bool `json:"enforce_unique_vote"`

	ID string `json:"id"`

	Name string `json:"name"`

	UpdatedAt Timestamp `json:"updated_at"`

	VoteCount int `json:"vote_count"`

	VotingVisibility string `json:"voting_visibility"`

	LatestAnswers []PollVoteResponseData `json:"latest_answers"`

	Options []PollOptionResponseData `json:"options"`

	OwnVotes []PollVoteResponseData `json:"own_votes"`

	Custom map[string]any `json:"custom"`

	LatestVotesByOption map[string][]PollVoteResponseData `json:"latest_votes_by_option"`

	VoteCountsByOption map[string]int `json:"vote_counts_by_option"`

	IsClosed *bool `json:"is_closed,omitempty"`

	MaxVotesAllowed *int `json:"max_votes_allowed,omitempty"`

	CreatedBy *UserResponse `json:"created_by,omitempty"`
}

type PollVote struct {
	CreatedAt Timestamp `json:"created_at"`

	ID string `json:"id"`

	OptionID string `json:"option_id"`

	PollID string `json:"poll_id"`

	UpdatedAt Timestamp `json:"updated_at"`

	AnswerText *string `json:"answer_text,omitempty"`

	IsAnswer *bool `json:"is_answer,omitempty"`

	UserID *string `json:"user_id,omitempty"`

	User *User `json:"user,omitempty"`
}

type PollVoteResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Vote *PollVoteResponseData `json:"vote,omitempty"`
}

type PollVoteResponseData struct {
	CreatedAt Timestamp `json:"created_at"`

	ID string `json:"id"`

	OptionID string `json:"option_id"`

	PollID string `json:"poll_id"`

	UpdatedAt Timestamp `json:"updated_at"`

	AnswerText *string `json:"answer_text,omitempty"`

	IsAnswer *bool `json:"is_answer,omitempty"`

	UserID *string `json:"user_id,omitempty"`

	User *UserResponse `json:"user,omitempty"`
}

type PollVotesResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	// Poll votes
	Votes []PollVoteResponseData `json:"votes"`

	Next *string `json:"next,omitempty"`

	Prev *string `json:"prev,omitempty"`
}

type PrivacySettings struct {
	ReadReceipts *ReadReceipts `json:"read_receipts,omitempty"`

	TypingIndicators *TypingIndicators `json:"typing_indicators,omitempty"`
}

type PrivacySettingsResponse struct {
	ReadReceipts *ReadReceiptsResponse `json:"read_receipts,omitempty"`

	TypingIndicators *TypingIndicatorsResponse `json:"typing_indicators,omitempty"`
}

type PublishedTrackFlags struct {
	Audio bool `json:"audio"`

	Screenshare bool `json:"screenshare"`

	ScreenshareAudio bool `json:"screenshare_audio"`

	Video bool `json:"video"`
}

type PublisherAllMetrics struct {
	Audio *PublisherAudioMetrics `json:"audio,omitempty"`

	RttMs *ActiveCallsLatencyStats `json:"rtt_ms,omitempty"`

	Video *PublisherVideoMetrics `json:"video,omitempty"`
}

type PublisherAudioMetrics struct {
	JitterMs *ActiveCallsLatencyStats `json:"jitter_ms,omitempty"`
}

type PublisherStatsResponse struct {
	Total int `json:"total"`

	Unique int `json:"unique"`

	ByTrack []TrackStatsResponse `json:"by_track,omitempty"`
}

type PublisherVideoMetrics struct {
	Bitrate *ActiveCallsBitrateStats `json:"bitrate,omitempty"`

	Fps30 *ActiveCallsFPSStats `json:"fps_30,omitempty"`

	FrameEncodingTimeMs *ActiveCallsLatencyStats `json:"frame_encoding_time_ms,omitempty"`

	JitterMs *ActiveCallsLatencyStats `json:"jitter_ms,omitempty"`

	Resolution *ActiveCallsResolutionStats `json:"resolution,omitempty"`
}

type PublishersMetrics struct {
	All *PublisherAllMetrics `json:"all,omitempty"`
}

type PushConfig struct {
	Version string `json:"version"`

	OfflineOnly *bool `json:"offline_only,omitempty"`
}

type PushNotificationConfig struct {
	// Whether push notifications are enabled for this feed group
	EnablePush *bool `json:"enable_push,omitempty"`

	// List of notification types that should trigger push notifications (e.g., follow, comment, reaction, comment_reaction, mention)
	PushTypes []string `json:"push_types,omitempty"`
}

type PushNotificationFields struct {
	OfflineOnly bool `json:"offline_only"`

	Version string `json:"version"`

	Apn APNConfigFields `json:"apn"`

	Firebase FirebaseConfigFields `json:"firebase"`

	Huawei HuaweiConfigFields `json:"huawei"`

	Xiaomi XiaomiConfigFields `json:"xiaomi"`

	Providers []PushProvider `json:"providers,omitempty"`
}

type PushNotificationSettingsResponse struct {
	Disabled *bool `json:"disabled,omitempty"`

	DisabledUntil *Timestamp `json:"disabled_until,omitempty"`
}

type PushPreferenceInput struct {
	// Set the level of call push notifications for the user. One of all, none, default
	CallLevel *string `json:"call_level,omitempty"`

	// Set the push preferences for a specific channel. If empty it sets the default for the user
	ChannelCid *string `json:"channel_cid,omitempty"`

	// Set the level of chat push notifications for the user. One of all, mentions, none, default
	ChatLevel *string `json:"chat_level,omitempty"`

	// Disable push notifications till a certain time
	DisabledUntil *Timestamp `json:"disabled_until,omitempty"`

	// Set the level of feeds push notifications for the user. One of all, none, default
	FeedsLevel *string `json:"feeds_level,omitempty"`

	// Remove the disabled until time. (IE stop snoozing notifications)
	RemoveDisable *bool `json:"remove_disable,omitempty"`

	// The user id for which to set the push preferences. Required when using server side auths, defaults to current user with client side auth.
	UserID *string `json:"user_id,omitempty"`

	FeedsPreferences *FeedsPreferences `json:"feeds_preferences,omitempty"`
}

type PushPreferences struct {
	CallLevel *string `json:"call_level,omitempty"`

	ChatLevel *string `json:"chat_level,omitempty"`

	DisabledUntil *Timestamp `json:"disabled_until,omitempty"`

	FeedsLevel *string `json:"feeds_level,omitempty"`

	FeedsPreferences *FeedsPreferences `json:"feeds_preferences,omitempty"`
}

type PushProvider struct {
	CreatedAt Timestamp `json:"created_at"`

	Name string `json:"name"`

	UpdatedAt Timestamp `json:"updated_at"`

	Type string `json:"type"`

	ApnAuthKey *string `json:"apn_auth_key,omitempty"`

	ApnAuthType *string `json:"apn_auth_type,omitempty"`

	ApnDevelopment *bool `json:"apn_development,omitempty"`

	ApnHost *string `json:"apn_host,omitempty"`

	ApnKeyID *string `json:"apn_key_id,omitempty"`

	ApnNotificationTemplate *string `json:"apn_notification_template,omitempty"`

	ApnP12Cert *string `json:"apn_p12_cert,omitempty"`

	ApnTeamID *string `json:"apn_team_id,omitempty"`

	ApnTopic *string `json:"apn_topic,omitempty"`

	Description *string `json:"description,omitempty"`

	DisabledAt *Timestamp `json:"disabled_at,omitempty"`

	DisabledReason *string `json:"disabled_reason,omitempty"`

	FirebaseApnTemplate *string `json:"firebase_apn_template,omitempty"`

	FirebaseCredentials *string `json:"firebase_credentials,omitempty"`

	FirebaseDataTemplate *string `json:"firebase_data_template,omitempty"`

	FirebaseHost *string `json:"firebase_host,omitempty"`

	FirebaseNotificationTemplate *string `json:"firebase_notification_template,omitempty"`

	FirebaseServerKey *string `json:"firebase_server_key,omitempty"`

	HuaweiAppID *string `json:"huawei_app_id,omitempty"`

	HuaweiAppSecret *string `json:"huawei_app_secret,omitempty"`

	XiaomiAppSecret *string `json:"xiaomi_app_secret,omitempty"`

	XiaomiPackageName *string `json:"xiaomi_package_name,omitempty"`

	PushTemplates []PushTemplate `json:"push_templates,omitempty"`
}

type PushProviderResponse struct {
	CreatedAt Timestamp `json:"created_at"`

	Name string `json:"name"`

	UpdatedAt Timestamp `json:"updated_at"`

	Type string `json:"type"`

	ApnAuthKey *string `json:"apn_auth_key,omitempty"`

	ApnAuthType *string `json:"apn_auth_type,omitempty"`

	ApnDevelopment *bool `json:"apn_development,omitempty"`

	ApnHost *string `json:"apn_host,omitempty"`

	ApnKeyID *string `json:"apn_key_id,omitempty"`

	ApnP12Cert *string `json:"apn_p12_cert,omitempty"`

	ApnSandboxCertificate *bool `json:"apn_sandbox_certificate,omitempty"`

	ApnSupportsRemoteNotifications *bool `json:"apn_supports_remote_notifications,omitempty"`

	ApnSupportsVoipNotifications *bool `json:"apn_supports_voip_notifications,omitempty"`

	ApnTeamID *string `json:"apn_team_id,omitempty"`

	ApnTopic *string `json:"apn_topic,omitempty"`

	Description *string `json:"description,omitempty"`

	DisabledAt *Timestamp `json:"disabled_at,omitempty"`

	DisabledReason *string `json:"disabled_reason,omitempty"`

	FirebaseApnTemplate *string `json:"firebase_apn_template,omitempty"`

	FirebaseCredentials *string `json:"firebase_credentials,omitempty"`

	FirebaseDataTemplate *string `json:"firebase_data_template,omitempty"`

	FirebaseHost *string `json:"firebase_host,omitempty"`

	FirebaseNotificationTemplate *string `json:"firebase_notification_template,omitempty"`

	FirebaseServerKey *string `json:"firebase_server_key,omitempty"`

	HuaweiAppID *string `json:"huawei_app_id,omitempty"`

	HuaweiAppSecret *string `json:"huawei_app_secret,omitempty"`

	XiaomiAppSecret *string `json:"xiaomi_app_secret,omitempty"`

	XiaomiPackageName *string `json:"xiaomi_package_name,omitempty"`
}

type PushTemplate struct {
	CreatedAt Timestamp `json:"created_at"`

	EnablePush bool `json:"enable_push"`

	EventType string `json:"event_type"`

	UpdatedAt Timestamp `json:"updated_at"`

	Template *string `json:"template,omitempty"`
}

type QualityScoreReport struct {
	Histogram []ReportByHistogramBucket `json:"histogram"`
}

type QualityScoreReportResponse struct {
	Daily []DailyAggregateQualityScoreReportResponse `json:"daily"`
}

type QueryActivitiesResponse struct {
	Duration string `json:"duration"`

	// List of activities matching the query
	Activities []ActivityResponse `json:"activities"`

	// Cursor for next page
	Next *string `json:"next,omitempty"`

	// Cursor for previous page
	Prev *string `json:"prev,omitempty"`
}

// Basic response information
type QueryActivityReactionsResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Reactions []FeedsReactionResponse `json:"reactions"`

	Next *string `json:"next,omitempty"`

	Prev *string `json:"prev,omitempty"`
}

// Basic response information
type QueryAggregateCallStatsResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	CallDurationReport *CallDurationReportResponse `json:"call_duration_report,omitempty"`

	CallParticipantCountReport *CallParticipantCountReportResponse `json:"call_participant_count_report,omitempty"`

	CallsPerDayReport *CallsPerDayReportResponse `json:"calls_per_day_report,omitempty"`

	NetworkMetricsReport *NetworkMetricsReportResponse `json:"network_metrics_report,omitempty"`

	QualityScoreReport *QualityScoreReportResponse `json:"quality_score_report,omitempty"`

	SdkUsageReport *SDKUsageReportResponse `json:"sdk_usage_report,omitempty"`

	UserFeedbackReport *UserFeedbackReportResponse `json:"user_feedback_report,omitempty"`
}

type QueryBannedUsersPayload struct {
	FilterConditions map[string]any `json:"filter_conditions"`

	// Whether to exclude expired bans or not
	ExcludeExpiredBans *bool `json:"exclude_expired_bans,omitempty"`

	// Number of records to return
	Limit *int `json:"limit,omitempty"`

	// Number of records to offset
	Offset *int `json:"offset,omitempty"`

	UserID *string `json:"user_id,omitempty"`

	// Array of sort parameters
	Sort []SortParamRequest `json:"sort,omitempty"`

	User *UserRequest `json:"user,omitempty"`
}

type QueryBannedUsersResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	// List of found bans
	Bans []BanResponse `json:"bans"`
}

type QueryBookmarkFoldersResponse struct {
	Duration string `json:"duration"`

	// List of bookmark folders matching the query
	BookmarkFolders []BookmarkFolderResponse `json:"bookmark_folders"`

	// Cursor for next page
	Next *string `json:"next,omitempty"`

	// Cursor for previous page
	Prev *string `json:"prev,omitempty"`
}

type QueryBookmarksResponse struct {
	Duration string `json:"duration"`

	// List of bookmarks matching the query
	Bookmarks []BookmarkResponse `json:"bookmarks"`

	// Cursor for next page
	Next *string `json:"next,omitempty"`

	// Cursor for previous page
	Prev *string `json:"prev,omitempty"`
}

// Basic response information
type QueryCallMembersResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Members []MemberResponse `json:"members"`

	Next *string `json:"next,omitempty"`

	Prev *string `json:"prev,omitempty"`
}

type QueryCallParticipantsResponse struct {
	Duration string `json:"duration"`

	TotalParticipants int `json:"total_participants"`

	Members []MemberResponse `json:"members"`

	OwnCapabilities []OwnCapability `json:"own_capabilities"`

	// List of call participants
	Participants []CallParticipantResponse `json:"participants"`

	Call CallResponse `json:"call"`
}

// Basic response information
type QueryCallSessionParticipantStatsResponse struct {
	CallID string `json:"call_id"`

	CallSessionID string `json:"call_session_id"`

	CallType string `json:"call_type"`

	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Participants []CallStatsParticipant `json:"participants"`

	Counts CallStatsParticipantCounts `json:"counts"`

	Next *string `json:"next,omitempty"`

	Prev *string `json:"prev,omitempty"`

	TmpDataSource *string `json:"tmp_data_source,omitempty"`
}

// Basic response information
type QueryCallStatsResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Reports []CallStatsReportSummaryResponse `json:"reports"`

	Next *string `json:"next,omitempty"`

	Prev *string `json:"prev,omitempty"`
}

type QueryCallsResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Calls []CallStateResponseFields `json:"calls"`

	Next *string `json:"next,omitempty"`

	Prev *string `json:"prev,omitempty"`
}

// Basic response information
type QueryCampaignsResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Campaigns []CampaignResponse `json:"campaigns"`

	Next *string `json:"next,omitempty"`

	Prev *string `json:"prev,omitempty"`
}

type QueryChannelsResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	// List of channels
	Channels []ChannelStateResponseFields `json:"channels"`
}

// Basic response information
type QueryCommentReactionsResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Reactions []FeedsReactionResponse `json:"reactions"`

	Next *string `json:"next,omitempty"`

	Prev *string `json:"prev,omitempty"`
}

type QueryCommentsResponse struct {
	Duration string `json:"duration"`

	// List of comments matching the query
	Comments []CommentResponse `json:"comments"`

	// Cursor for next page
	Next *string `json:"next,omitempty"`

	// Cursor for previous page
	Prev *string `json:"prev,omitempty"`
}

type QueryDraftsResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	// Drafts
	Drafts []DraftResponse `json:"drafts"`

	Next *string `json:"next,omitempty"`

	Prev *string `json:"prev,omitempty"`
}

type QueryFeedMembersResponse struct {
	Duration string `json:"duration"`

	// List of feed members
	Members []FeedMemberResponse `json:"members"`

	// Cursor for next page
	Next *string `json:"next,omitempty"`

	// Cursor for previous page
	Prev *string `json:"prev,omitempty"`
}

type QueryFeedModerationTemplate struct {
	// When the template was created
	CreatedAt Timestamp `json:"created_at"`

	// Name of the moderation template
	Name string `json:"name"`

	// When the template was last updated
	UpdatedAt Timestamp `json:"updated_at"`

	Config *FeedsModerationTemplateConfig `json:"config,omitempty"`
}

type QueryFeedModerationTemplatesResponse struct {
	Duration string `json:"duration"`

	// List of moderation templates
	Templates []QueryFeedModerationTemplate `json:"templates"`
}

type QueryFeedsResponse struct {
	Duration string `json:"duration"`

	// List of feeds matching the query
	Feeds []FeedResponse `json:"feeds"`

	// Cursor for next page
	Next *string `json:"next,omitempty"`

	// Cursor for previous page
	Prev *string `json:"prev,omitempty"`
}

type QueryFollowsResponse struct {
	Duration string `json:"duration"`

	// List of follow relationships matching the query
	Follows []FollowResponse `json:"follows"`

	// Cursor for next page
	Next *string `json:"next,omitempty"`

	// Cursor for previous page
	Prev *string `json:"prev,omitempty"`
}

// Client request
type QueryMembersPayload struct {
	Type string `json:"type"`

	FilterConditions map[string]any `json:"filter_conditions"`

	ID *string `json:"id,omitempty"`

	Limit *int `json:"limit,omitempty"`

	Offset *int `json:"offset,omitempty"`

	UserID *string `json:"user_id,omitempty"`

	Members []ChannelMember `json:"members,omitempty"`

	Sort []SortParamRequest `json:"sort,omitempty"`

	User *UserRequest `json:"user,omitempty"`
}

type QueryMembershipLevelsResponse struct {
	Duration string `json:"duration"`

	MembershipLevels []MembershipLevelResponse `json:"membership_levels"`

	// Cursor for next page
	Next *string `json:"next,omitempty"`

	// Cursor for previous page
	Prev *string `json:"prev,omitempty"`
}

type QueryMessageFlagsPayload struct {
	Limit *int `json:"limit,omitempty"`

	Offset *int `json:"offset,omitempty"`

	// Whether to include deleted messages in the results
	ShowDeletedMessages *bool `json:"show_deleted_messages,omitempty"`

	UserID *string `json:"user_id,omitempty"`

	Sort []SortParamRequest `json:"sort,omitempty"`

	FilterConditions map[string]any `json:"filter_conditions,omitempty"`

	User *UserRequest `json:"user,omitempty"`
}

// Query message flags response
type QueryMessageFlagsResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	// The flags that match the query
	Flags []MessageFlagResponse `json:"flags"`
}

type QueryMessageHistoryResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	// Message history entries
	MessageHistory []MessageHistoryEntryResponse `json:"message_history"`

	Next *string `json:"next,omitempty"`

	Prev *string `json:"prev,omitempty"`
}

type QueryModerationConfigsResponse struct {
	Duration string `json:"duration"`

	// List of moderation configurations
	Configs []ConfigResponse `json:"configs"`

	Next *string `json:"next,omitempty"`

	Prev *string `json:"prev,omitempty"`
}

// Basic response information
type QueryModerationFlagsResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Flags []ModerationFlagResponse `json:"flags"`

	Next *string `json:"next,omitempty"`

	Prev *string `json:"prev,omitempty"`
}

type QueryModerationLogsResponse struct {
	Duration string `json:"duration"`

	// List of moderation action logs
	Logs []ActionLogResponse `json:"logs"`

	Next *string `json:"next,omitempty"`

	Prev *string `json:"prev,omitempty"`
}

type QueryModerationRulesResponse struct {
	Duration string `json:"duration"`

	// List of moderation rules
	Rules []ModerationRuleV2Response `json:"rules"`

	// Default LLM label descriptions
	DefaultLlmLabels map[string]string `json:"default_llm_labels"`

	Next *string `json:"next,omitempty"`

	Prev *string `json:"prev,omitempty"`
}

type QueryPollsResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	// Polls data returned by the query
	Polls []PollResponseData `json:"polls"`

	Next *string `json:"next,omitempty"`

	Prev *string `json:"prev,omitempty"`
}

// Basic response information
type QueryReactionsResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Reactions []ReactionResponse `json:"reactions"`

	Next *string `json:"next,omitempty"`

	Prev *string `json:"prev,omitempty"`
}

type QueryRemindersResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	// MessageReminders data returned by the query
	Reminders []ReminderResponseData `json:"reminders"`

	Next *string `json:"next,omitempty"`

	Prev *string `json:"prev,omitempty"`
}

type QueryReviewQueueResponse struct {
	Duration string `json:"duration"`

	// List of review queue items
	Items []ReviewQueueItemResponse `json:"items"`

	// Configuration for moderation actions
	ActionConfig map[string][]ModerationActionConfig `json:"action_config"`

	// Statistics about the review queue
	Stats map[string]any `json:"stats"`

	Next *string `json:"next,omitempty"`

	Prev *string `json:"prev,omitempty"`
}

type QuerySegmentTargetsResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	// Targets
	Targets []SegmentTargetResponse `json:"targets"`

	Next *string `json:"next,omitempty"`

	Prev *string `json:"prev,omitempty"`
}

type QuerySegmentsResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	// Segments
	Segments []SegmentResponse `json:"segments"`

	Next *string `json:"next,omitempty"`

	Prev *string `json:"prev,omitempty"`
}

type QueryThreadsResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	// List of enriched thread states
	Threads []ThreadStateResponse `json:"threads"`

	Next *string `json:"next,omitempty"`

	Prev *string `json:"prev,omitempty"`
}

// Basic response information
type QueryUserFeedbackResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	UserFeedback []UserFeedbackResponse `json:"user_feedback"`

	Next *string `json:"next,omitempty"`

	Prev *string `json:"prev,omitempty"`
}

type QueryUsersPayload struct {
	FilterConditions map[string]any `json:"filter_conditions"`

	IncludeDeactivatedUsers *bool `json:"include_deactivated_users,omitempty"`

	Limit *int `json:"limit,omitempty"`

	Offset *int `json:"offset,omitempty"`

	Presence *bool `json:"presence,omitempty"`

	UserID *string `json:"user_id,omitempty"`

	Sort []SortParamRequest `json:"sort,omitempty"`

	User *UserRequest `json:"user,omitempty"`
}

type QueryUsersResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	// Array of users as result of filters applied.
	Users []FullUserResponse `json:"users"`
}

// RTMPBroadcastRequest is the payload for starting an RTMP broadcast.
type RTMPBroadcastRequest struct {
	// Name identifier for RTMP broadcast, must be unique in call
	Name string `json:"name"`

	// URL for the RTMP server to send the call to
	StreamUrl string `json:"stream_url"`

	// If provided, will override the call's RTMP settings quality
	Quality *string `json:"quality,omitempty"`

	// If provided, will be appended at the end of stream_url
	StreamKey *string `json:"stream_key,omitempty"`

	Layout *LayoutSettingsRequest `json:"layout,omitempty"`
}

// RTMP input settings
type RTMPIngress struct {
	Address string `json:"address"`
}

type RTMPLocation struct {
	Name string `json:"name"`

	StreamKey string `json:"stream_key"`

	StreamUrl string `json:"stream_url"`
}

type RTMPSettings struct {
	Enabled bool `json:"enabled"`

	QualityName *string `json:"quality_name,omitempty"`

	Layout *LayoutSettings `json:"layout,omitempty"`

	Location *RTMPLocation `json:"location,omitempty"`
}

type RTMPSettingsRequest struct {
	Enabled *bool `json:"enabled,omitempty"`

	// Resolution to set for the RTMP stream
	Quality *string `json:"quality,omitempty"`

	Layout *LayoutSettingsRequest `json:"layout,omitempty"`
}

// RTMPSettingsResponse is the payload for RTMP settings
type RTMPSettingsResponse struct {
	Enabled bool `json:"enabled"`

	Quality string `json:"quality"`

	Layout LayoutSettingsResponse `json:"layout"`
}

type RankingConfig struct {
	// Type of ranking algorithm. Required. Must be one of: recency, expression, interest
	Type string `json:"type"`

	// Scoring formula. Required when type is 'expression' or 'interest'
	Score *string `json:"score,omitempty"`

	// Default values for ranking
	Defaults map[string]any `json:"defaults,omitempty"`

	// Decay functions configuration
	Functions map[string]DecayFunctionConfig `json:"functions,omitempty"`
}

type Reaction struct {
	CreatedAt Timestamp `json:"created_at"`

	MessageID string `json:"message_id"`

	Score int `json:"score"`

	UpdatedAt Timestamp `json:"updated_at"`

	Type string `json:"type"`

	Custom map[string]any `json:"custom"`

	UserID *string `json:"user_id,omitempty"`

	User *User `json:"user,omitempty"`
}

type ReactionDeletedEvent struct {
	ChannelID string `json:"channel_id"`

	ChannelType string `json:"channel_type"`

	Cid string `json:"cid"`

	CreatedAt Timestamp `json:"created_at"`

	Type string `json:"type"`

	Team *string `json:"team,omitempty"`

	ThreadParticipants []User `json:"thread_participants,omitempty"`

	Message *Message `json:"message,omitempty"`

	Reaction *Reaction `json:"reaction,omitempty"`

	User *User `json:"user,omitempty"`
}

func (*ReactionDeletedEvent) GetEventType() string {
	return "reaction.deleted"
}

// ReactionGroupResponse contains all information about a reaction of the same type.
type ReactionGroupResponse struct {
	// Count is the number of reactions of this type.
	Count int `json:"count"`

	// FirstReactionAt is the time of the first reaction of this type. This is the same also if all reaction of this type are deleted, because if someone will react again with the same type, will be preserved the sorting.
	FirstReactionAt Timestamp `json:"first_reaction_at"`

	// LastReactionAt is the time of the last reaction of this type.
	LastReactionAt Timestamp `json:"last_reaction_at"`

	// SumScores is the sum of all scores of reactions of this type. Medium allows you to clap articles more than once and shows the sum of all claps from all users. For example, you can send `clap` x5 using `score: 5`.
	SumScores int `json:"sum_scores"`
}

type ReactionNewEvent struct {
	ChannelID string `json:"channel_id"`

	ChannelType string `json:"channel_type"`

	Cid string `json:"cid"`

	CreatedAt Timestamp `json:"created_at"`

	Type string `json:"type"`

	Team *string `json:"team,omitempty"`

	ThreadParticipants []User `json:"thread_participants,omitempty"`

	Message *Message `json:"message,omitempty"`

	Reaction *Reaction `json:"reaction,omitempty"`

	User *User `json:"user,omitempty"`
}

func (*ReactionNewEvent) GetEventType() string {
	return "reaction.new"
}

// Represents user reaction to a message
type ReactionRequest struct {
	// The type of reaction (e.g. 'like', 'laugh', 'wow')
	Type string `json:"type"`

	// Date/time of creation
	CreatedAt *Timestamp `json:"created_at,omitempty"`

	// Reaction score. If not specified reaction has score of 1
	Score *int `json:"score,omitempty"`

	// Date/time of the last update
	UpdatedAt *Timestamp `json:"updated_at,omitempty"`

	UserID *string `json:"user_id,omitempty"`

	Custom map[string]any `json:"custom,omitempty"`

	User *UserRequest `json:"user,omitempty"`
}

type ReactionResponse struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	// Message ID
	MessageID string `json:"message_id"`

	// Score of the reaction
	Score int `json:"score"`

	// Date/time of the last update
	UpdatedAt Timestamp `json:"updated_at"`

	// User ID
	UserID string `json:"user_id"`

	// Type of reaction
	Type string `json:"type"`

	// Custom data for this object
	Custom map[string]any `json:"custom"`

	User UserResponse `json:"user"`
}

type ReactionUpdatedEvent struct {
	ChannelID string `json:"channel_id"`

	ChannelType string `json:"channel_type"`

	Cid string `json:"cid"`

	CreatedAt Timestamp `json:"created_at"`

	Message Message `json:"message"`

	Reaction Reaction `json:"reaction"`

	Type string `json:"type"`

	Team *string `json:"team,omitempty"`

	User *User `json:"user,omitempty"`
}

func (*ReactionUpdatedEvent) GetEventType() string {
	return "reaction.updated"
}

type ReactivateUserResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	User *UserResponse `json:"user,omitempty"`
}

// Basic response information
type ReactivateUsersResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	TaskID string `json:"task_id"`
}

type ReadReceipts struct {
	Enabled bool `json:"enabled"`
}

type ReadReceiptsResponse struct {
	Enabled *bool `json:"enabled,omitempty"`
}

type ReadStateResponse struct {
	LastRead Timestamp `json:"last_read"`

	UnreadMessages int `json:"unread_messages"`

	User UserResponse `json:"user"`

	LastReadMessageID *string `json:"last_read_message_id,omitempty"`
}

type RecordSettings struct {
	Mode string `json:"mode"`

	AudioOnly *bool `json:"audio_only,omitempty"`

	Quality *string `json:"quality,omitempty"`

	Layout *LayoutSettings `json:"layout,omitempty"`
}

type RecordSettingsRequest struct {
	Mode string `json:"mode"`

	AudioOnly *bool `json:"audio_only,omitempty"`

	Quality *string `json:"quality,omitempty"`

	Layout *LayoutSettingsRequest `json:"layout,omitempty"`
}

// RecordSettings is the payload for recording settings
type RecordSettingsResponse struct {
	AudioOnly bool `json:"audio_only"`

	Mode string `json:"mode"`

	Quality string `json:"quality"`

	Layout LayoutSettingsResponse `json:"layout"`
}

type RejectFeedMemberInviteResponse struct {
	Duration string `json:"duration"`

	Member FeedMemberResponse `json:"member"`
}

type RejectFollowResponse struct {
	Duration string `json:"duration"`

	Follow FollowResponse `json:"follow"`
}

// Emitted when a reminder is created.
type ReminderCreatedEvent struct {
	// The CID of the Channel for which the reminder was created
	Cid string `json:"cid"`

	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	// The ID of the message for which the reminder was created
	MessageID string `json:"message_id"`

	// The ID of the user for whom the reminder was created
	UserID string `json:"user_id"`

	Custom map[string]any `json:"custom"`

	// The type of event: "reminder.created" in this case
	Type string `json:"type"`

	// The ID of the parent message, if the reminder is for a thread message
	ParentID *string `json:"parent_id,omitempty"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	Reminder *ReminderResponseData `json:"reminder,omitempty"`
}

func (*ReminderCreatedEvent) GetEventType() string {
	return "reminder.created"
}

// Emitted when a reminder is deleted.
type ReminderDeletedEvent struct {
	// The CID of the Channel for which the reminder was created
	Cid string `json:"cid"`

	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	// The ID of the message for which the reminder was created
	MessageID string `json:"message_id"`

	// The ID of the user for whom the reminder was created
	UserID string `json:"user_id"`

	Custom map[string]any `json:"custom"`

	// The type of event: "reminder.deleted" in this case
	Type string `json:"type"`

	// The ID of the parent message, if the reminder is for a thread message
	ParentID *string `json:"parent_id,omitempty"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	Reminder *ReminderResponseData `json:"reminder,omitempty"`
}

func (*ReminderDeletedEvent) GetEventType() string {
	return "reminder.deleted"
}

// Emitted when a reminder becomes due, triggering a notification for the user.
type ReminderNotificationEvent struct {
	// The CID of the Channel for which the reminder was created
	Cid string `json:"cid"`

	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	// The ID of the message for which the reminder was created
	MessageID string `json:"message_id"`

	// The ID of the user for whom the reminder was created
	UserID string `json:"user_id"`

	Custom map[string]any `json:"custom"`

	// The type of event: "notification.reminder_due" in this case
	Type string `json:"type"`

	ParentID *string `json:"parent_id,omitempty"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	Reminder *ReminderResponseData `json:"reminder,omitempty"`
}

func (*ReminderNotificationEvent) GetEventType() string {
	return "notification.reminder_due"
}

type ReminderResponseData struct {
	ChannelCid string `json:"channel_cid"`

	CreatedAt Timestamp `json:"created_at"`

	MessageID string `json:"message_id"`

	UpdatedAt Timestamp `json:"updated_at"`

	UserID string `json:"user_id"`

	RemindAt *Timestamp `json:"remind_at,omitempty"`

	Channel *ChannelResponse `json:"channel,omitempty"`

	Message *Message `json:"message,omitempty"`

	User *User `json:"user,omitempty"`
}

// Emitted when a reminder is updated.
type ReminderUpdatedEvent struct {
	// The CID of the Channel for which the reminder was created
	Cid string `json:"cid"`

	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	// The ID of the message for which the reminder was created
	MessageID string `json:"message_id"`

	// The ID of the user for whom the reminder was created
	UserID string `json:"user_id"`

	Custom map[string]any `json:"custom"`

	// The type of event: "reminder.updated" in this case
	Type string `json:"type"`

	// The ID of the parent message, if the reminder is for a thread message
	ParentID *string `json:"parent_id,omitempty"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	Reminder *ReminderResponseData `json:"reminder,omitempty"`
}

func (*ReminderUpdatedEvent) GetEventType() string {
	return "reminder.updated"
}

// Cursor & depth information for a comment's direct replies. Mirrors Reddit's 'load more replies' semantics.
type RepliesMeta struct {
	// True if the subtree was cut because the requested depth was reached.
	DepthTruncated bool `json:"depth_truncated"`

	// True if more siblings exist in the database.
	HasMore bool `json:"has_more"`

	// Number of unread siblings that match current filters.
	Remaining int `json:"remaining"`

	// Opaque cursor to request the next page of siblings.
	NextCursor *string `json:"next_cursor,omitempty"`
}

type ReportByHistogramBucket struct {
	Category string `json:"category"`

	Count int `json:"count"`

	Sum float64 `json:"sum"`

	LowerBound *Bound `json:"lower_bound,omitempty"`

	UpperBound *Bound `json:"upper_bound,omitempty"`
}

type ReportResponse struct {
	Call CallReportResponse `json:"call"`

	Participants ParticipantReportResponse `json:"participants"`

	UserRatings UserRatingReportResponse `json:"user_ratings"`
}

// Basic response information
type Response struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`
}

type RestoreActionRequest struct{}

// This event is sent when a new moderation review queue item is created
type ReviewQueueItemNewEvent struct {
	CreatedAt Timestamp `json:"created_at"`

	Custom map[string]any `json:"custom"`

	Type string `json:"type"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	// The flags associated with this review queue item
	Flags []ModerationFlagResponse `json:"flags,omitempty"`

	Action *ActionLogResponse `json:"action,omitempty"`

	ReviewQueueItem *ReviewQueueItemResponse `json:"review_queue_item,omitempty"`
}

func (*ReviewQueueItemNewEvent) GetEventType() string {
	return "review_queue_item.new"
}

type ReviewQueueItemResponse struct {
	// AI-determined text severity
	AiTextSeverity string `json:"ai_text_severity"`

	// When the item was created
	CreatedAt Timestamp `json:"created_at"`

	// ID of the entity being reviewed
	EntityID string `json:"entity_id"`

	// Type of entity being reviewed
	EntityType string `json:"entity_type"`

	FlagsCount int `json:"flags_count"`

	// Unique identifier of the review queue item
	ID string `json:"id"`

	// Suggested moderation action
	RecommendedAction string `json:"recommended_action"`

	// ID of the moderator who reviewed the item
	ReviewedBy string `json:"reviewed_by"`

	// Severity level of the content
	Severity int `json:"severity"`

	// Current status of the review
	Status string `json:"status"`

	// When the item was last updated
	UpdatedAt Timestamp `json:"updated_at"`

	// Moderation actions taken
	Actions []ActionLogResponse `json:"actions"`

	// Associated ban records
	Bans []Ban `json:"bans"`

	// Associated flag records
	Flags []ModerationFlagResponse `json:"flags"`

	// Detected languages in the content
	Languages []string `json:"languages"`

	// When the review was completed
	CompletedAt *Timestamp `json:"completed_at,omitempty"`

	ConfigKey *string `json:"config_key,omitempty"`

	// ID of who created the entity
	EntityCreatorID *string `json:"entity_creator_id,omitempty"`

	// When the item was reviewed
	ReviewedAt *Timestamp `json:"reviewed_at,omitempty"`

	// Teams associated with this item
	Teams []string `json:"teams,omitempty"`

	Activity *EnrichedActivity `json:"activity,omitempty"`

	AssignedTo *UserResponse `json:"assigned_to,omitempty"`

	Call *CallResponse `json:"call,omitempty"`

	EntityCreator *EntityCreatorResponse `json:"entity_creator,omitempty"`

	FeedsV2Activity *EnrichedActivity `json:"feeds_v2_activity,omitempty"`

	FeedsV2Reaction *Reaction `json:"feeds_v2_reaction,omitempty"`

	Message *MessageResponse `json:"message,omitempty"`

	ModerationPayload *ModerationPayload `json:"moderation_payload,omitempty"`

	Reaction *Reaction `json:"reaction,omitempty"`
}

// This event is sent when a moderation review queue item is updated
type ReviewQueueItemUpdatedEvent struct {
	CreatedAt Timestamp `json:"created_at"`

	Custom map[string]any `json:"custom"`

	Type string `json:"type"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	// The flags associated with this review queue item
	Flags []ModerationFlagResponse `json:"flags,omitempty"`

	Action *ActionLogResponse `json:"action,omitempty"`

	ReviewQueueItem *ReviewQueueItemResponse `json:"review_queue_item,omitempty"`
}

func (*ReviewQueueItemUpdatedEvent) GetEventType() string {
	return "review_queue_item.updated"
}

type RingSettings struct {
	AutoCancelTimeoutMs int `json:"auto_cancel_timeout_ms"`

	IncomingCallTimeoutMs int `json:"incoming_call_timeout_ms"`

	MissedCallTimeoutMs int `json:"missed_call_timeout_ms"`
}

type RingSettingsRequest struct {
	// When none of the callees accept a ring call in this time a rejection will be sent by the caller with reason 'timeout' by the SDKs
	AutoCancelTimeoutMs int `json:"auto_cancel_timeout_ms"`

	// When a callee is online but doesn't answer a ring call in this time a rejection will be sent with reason 'timeout' by the SDKs
	IncomingCallTimeoutMs int `json:"incoming_call_timeout_ms"`

	// When a callee doesn't accept or reject a ring call in this time a missed call event will be sent
	MissedCallTimeoutMs *int `json:"missed_call_timeout_ms,omitempty"`
}

type RingSettingsResponse struct {
	AutoCancelTimeoutMs int `json:"auto_cancel_timeout_ms"`

	IncomingCallTimeoutMs int `json:"incoming_call_timeout_ms"`

	MissedCallTimeoutMs int `json:"missed_call_timeout_ms"`
}

type Role struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	// Whether this is a custom role or built-in
	Custom bool `json:"custom"`

	// Unique role name
	Name string `json:"name"`

	// Date/time of the last update
	UpdatedAt Timestamp `json:"updated_at"`

	// List of scopes where this role is currently present. `.app` means that role is present in app-level grants
	Scopes []string `json:"scopes"`
}

type RuleBuilderAction struct {
	Type string `json:"type"`

	BanOptions *BanOptions `json:"ban_options,omitempty"`

	FlagUserOptions *FlagUserOptions `json:"flag_user_options,omitempty"`
}

type RuleBuilderCondition struct {
	Confidence *float64 `json:"confidence,omitempty"`

	Type *string `json:"type,omitempty"`

	ContentCountRuleParams *ContentCountRuleParameters `json:"content_count_rule_params,omitempty"`

	ImageContentParams *ImageContentParameters `json:"image_content_params,omitempty"`

	ImageRuleParams *ImageRuleParameters `json:"image_rule_params,omitempty"`

	TextContentParams *TextContentParameters `json:"text_content_params,omitempty"`

	TextRuleParams *TextRuleParameters `json:"text_rule_params,omitempty"`

	UserCreatedWithinParams *UserCreatedWithinParameters `json:"user_created_within_params,omitempty"`

	UserCustomPropertyParams *UserCustomPropertyParameters `json:"user_custom_property_params,omitempty"`

	UserRuleParams *UserRuleParameters `json:"user_rule_params,omitempty"`

	VideoContentParams *VideoContentParameters `json:"video_content_params,omitempty"`

	VideoRuleParams *VideoRuleParameters `json:"video_rule_params,omitempty"`
}

type RuleBuilderConditionGroup struct {
	Logic *string `json:"logic,omitempty"`

	Conditions []RuleBuilderCondition `json:"conditions,omitempty"`
}

type RuleBuilderConfig struct {
	Async *bool `json:"async,omitempty"`

	Rules []RuleBuilderRule `json:"rules,omitempty"`
}

type RuleBuilderRule struct {
	RuleType string `json:"rule_type"`

	Action RuleBuilderAction `json:"action"`

	CooldownPeriod *string `json:"cooldown_period,omitempty"`

	ID *string `json:"id,omitempty"`

	Logic *string `json:"logic,omitempty"`

	Conditions []RuleBuilderCondition `json:"conditions,omitempty"`

	Groups []RuleBuilderConditionGroup `json:"groups,omitempty"`
}

// Config for creating Amazon S3 storage.
type S3Request struct {
	// The AWS region where the bucket is hosted
	S3Region string `json:"s3_region"`

	// The AWS API key. To use Amazon S3 as your storage provider, you have two authentication options: IAM role or API key. If you do not specify the `s3_api_key` parameter, Stream will use IAM role authentication. In that case make sure to have the correct IAM role configured for your application.
	S3APIKey *string `json:"s3_api_key,omitempty"`

	// The custom endpoint for S3. If you want to use a custom endpoint, you must also provide the `s3_api_key` and `s3_secret` parameters.
	S3CustomEndpointUrl *string `json:"s3_custom_endpoint_url,omitempty"`

	// The AWS API Secret
	S3Secret *string `json:"s3_secret,omitempty"`
}

type SDKUsageReport struct {
	PerSdkUsage map[string]*PerSDKUsageReport `json:"per_sdk_usage"`
}

type SDKUsageReportResponse struct {
	Daily []DailyAggregateSDKUsageReportResponse `json:"daily"`
}

type SRTIngress struct {
	Address string `json:"address"`
}

type ScreensharingSettings struct {
	AccessRequestEnabled bool `json:"access_request_enabled"`

	Enabled bool `json:"enabled"`

	TargetResolution *TargetResolution `json:"target_resolution,omitempty"`
}

type ScreensharingSettingsRequest struct {
	AccessRequestEnabled *bool `json:"access_request_enabled,omitempty"`

	Enabled *bool `json:"enabled,omitempty"`

	TargetResolution *TargetResolution `json:"target_resolution,omitempty"`
}

type ScreensharingSettingsResponse struct {
	AccessRequestEnabled bool `json:"access_request_enabled"`

	Enabled bool `json:"enabled"`

	TargetResolution *TargetResolution `json:"target_resolution,omitempty"`
}

type SearchPayload struct {
	// Channel filter conditions
	FilterConditions map[string]any `json:"filter_conditions"`

	// Number of messages to return
	Limit *int `json:"limit,omitempty"`

	// Pagination parameter. Cannot be used with non-zero offset.
	Next *string `json:"next,omitempty"`

	// Pagination offset. Cannot be used with sort or next.
	Offset *int `json:"offset,omitempty"`

	// Search phrase
	Query *string `json:"query,omitempty"`

	// Sort parameters. Cannot be used with non-zero offset
	Sort []SortParamRequest `json:"sort,omitempty"`

	// Message filter conditions
	MessageFilterConditions map[string]any `json:"message_filter_conditions,omitempty"`

	MessageOptions *MessageOptions `json:"message_options,omitempty"`
}

type SearchResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	// Search results
	Results []SearchResult `json:"results"`

	// Value to pass to the next search query in order to paginate
	Next *string `json:"next,omitempty"`

	// Value that points to the previous page. Pass as the next value in a search query to paginate backwards
	Previous *string `json:"previous,omitempty"`

	ResultsWarning *SearchWarning `json:"results_warning,omitempty"`
}

type SearchResult struct {
	Message *SearchResultMessage `json:"message,omitempty"`
}

type SearchResultMessage struct {
	Cid string `json:"cid"`

	CreatedAt Timestamp `json:"created_at"`

	DeletedReplyCount int `json:"deleted_reply_count"`

	Html string `json:"html"`

	ID string `json:"id"`

	Pinned bool `json:"pinned"`

	ReplyCount int `json:"reply_count"`

	Shadowed bool `json:"shadowed"`

	Silent bool `json:"silent"`

	Text string `json:"text"`

	UpdatedAt Timestamp `json:"updated_at"`

	Type string `json:"type"`

	Attachments []Attachment `json:"attachments"`

	LatestReactions []ReactionResponse `json:"latest_reactions"`

	MentionedUsers []UserResponse `json:"mentioned_users"`

	OwnReactions []ReactionResponse `json:"own_reactions"`

	RestrictedVisibility []string `json:"restricted_visibility"`

	Custom map[string]any `json:"custom"`

	ReactionCounts map[string]int `json:"reaction_counts"`

	ReactionScores map[string]int `json:"reaction_scores"`

	User UserResponse `json:"user"`

	Command *string `json:"command,omitempty"`

	DeletedAt *Timestamp `json:"deleted_at,omitempty"`

	DeletedForMe *bool `json:"deleted_for_me,omitempty"`

	MessageTextUpdatedAt *Timestamp `json:"message_text_updated_at,omitempty"`

	Mml *string `json:"mml,omitempty"`

	ParentID *string `json:"parent_id,omitempty"`

	PinExpires *Timestamp `json:"pin_expires,omitempty"`

	PinnedAt *Timestamp `json:"pinned_at,omitempty"`

	PollID *string `json:"poll_id,omitempty"`

	QuotedMessageID *string `json:"quoted_message_id,omitempty"`

	ShowInChannel *bool `json:"show_in_channel,omitempty"`

	ThreadParticipants []UserResponse `json:"thread_participants,omitempty"`

	Channel *ChannelResponse `json:"channel,omitempty"`

	Draft *DraftResponse `json:"draft,omitempty"`

	I18n map[string]string `json:"i18n,omitempty"`

	ImageLabels map[string][]string `json:"image_labels,omitempty"`

	Member *ChannelMemberResponse `json:"member,omitempty"`

	Moderation *ModerationV2Response `json:"moderation,omitempty"`

	PinnedBy *UserResponse `json:"pinned_by,omitempty"`

	Poll *PollResponseData `json:"poll,omitempty"`

	QuotedMessage *MessageResponse `json:"quoted_message,omitempty"`

	ReactionGroups map[string]*ReactionGroupResponse `json:"reaction_groups,omitempty"`

	Reminder *ReminderResponseData `json:"reminder,omitempty"`

	SharedLocation *SharedLocationResponseData `json:"shared_location,omitempty"`
}

type SearchWarning struct {
	// Code corresponding to the warning
	WarningCode int `json:"warning_code"`

	// Description of the warning
	WarningDescription string `json:"warning_description"`

	// Number of channels searched
	ChannelSearchCount *int `json:"channel_search_count,omitempty"`

	// Channel CIDs for the searched channels
	ChannelSearchCids []string `json:"channel_search_cids,omitempty"`
}

type Segment struct {
	AllSenderChannels bool `json:"all_sender_channels"`

	AllUsers bool `json:"all_users"`

	CreatedAt Timestamp `json:"created_at"`

	ID string `json:"id"`

	Name string `json:"name"`

	Size int `json:"size"`

	UpdatedAt Timestamp `json:"updated_at"`

	Type string `json:"type"`

	DeletedAt *Timestamp `json:"deleted_at,omitempty"`

	Description *string `json:"description,omitempty"`

	TaskID *string `json:"task_id,omitempty"`

	Filter map[string]any `json:"filter,omitempty"`
}

type SegmentResponse struct {
	AllSenderChannels bool `json:"all_sender_channels"`

	AllUsers bool `json:"all_users"`

	CreatedAt Timestamp `json:"created_at"`

	DeletedAt Timestamp `json:"deleted_at"`

	Description string `json:"description"`

	ID string `json:"id"`

	Name string `json:"name"`

	Size int `json:"size"`

	UpdatedAt Timestamp `json:"updated_at"`

	Type string `json:"type"`

	Filter map[string]any `json:"filter"`
}

type SegmentTargetResponse struct {
	AppPk int `json:"app_pk"`

	CreatedAt Timestamp `json:"created_at"`

	SegmentID string `json:"segment_id"`

	TargetID string `json:"target_id"`
}

type SendCallEventResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`
}

type SendClosedCaptionResponse struct {
	Duration string `json:"duration"`
}

type SendMessageResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Message MessageResponse `json:"message"`

	// Pending message metadata
	PendingMessageMetadata map[string]string `json:"pending_message_metadata,omitempty"`
}

// Basic response information
type SendReactionResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Message MessageResponse `json:"message"`

	Reaction ReactionResponse `json:"reaction"`
}

type SessionSettings struct {
	InactivityTimeoutSeconds int `json:"inactivity_timeout_seconds"`
}

type SessionSettingsRequest struct {
	InactivityTimeoutSeconds int `json:"inactivity_timeout_seconds"`
}

type SessionSettingsResponse struct {
	InactivityTimeoutSeconds int `json:"inactivity_timeout_seconds"`
}

type ShadowBlockActionRequest struct{}

type SharedLocation struct {
	ChannelCid string `json:"channel_cid"`

	CreatedAt Timestamp `json:"created_at"`

	CreatedByDeviceID string `json:"created_by_device_id"`

	MessageID string `json:"message_id"`

	UpdatedAt Timestamp `json:"updated_at"`

	UserID string `json:"user_id"`

	EndAt *Timestamp `json:"end_at,omitempty"`

	Latitude *float64 `json:"latitude,omitempty"`

	Longitude *float64 `json:"longitude,omitempty"`

	Channel *Channel `json:"channel,omitempty"`

	Message *Message `json:"message,omitempty"`
}

type SharedLocationResponse struct {
	// Channel CID
	ChannelCid string `json:"channel_cid"`

	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	// Device ID that created the live location
	CreatedByDeviceID string `json:"created_by_device_id"`

	Duration string `json:"duration"`

	// Latitude coordinate
	Latitude float64 `json:"latitude"`

	// Longitude coordinate
	Longitude float64 `json:"longitude"`

	// Message ID
	MessageID string `json:"message_id"`

	// Date/time of the last update
	UpdatedAt Timestamp `json:"updated_at"`

	// User ID
	UserID string `json:"user_id"`

	// Time when the live location expires
	EndAt *Timestamp `json:"end_at,omitempty"`

	Channel *ChannelResponse `json:"channel,omitempty"`

	Message *MessageResponse `json:"message,omitempty"`
}

type SharedLocationResponseData struct {
	ChannelCid string `json:"channel_cid"`

	CreatedAt Timestamp `json:"created_at"`

	CreatedByDeviceID string `json:"created_by_device_id"`

	Latitude float64 `json:"latitude"`

	Longitude float64 `json:"longitude"`

	MessageID string `json:"message_id"`

	UpdatedAt Timestamp `json:"updated_at"`

	UserID string `json:"user_id"`

	EndAt *Timestamp `json:"end_at,omitempty"`

	Channel *ChannelResponse `json:"channel,omitempty"`

	Message *MessageResponse `json:"message,omitempty"`
}

type SharedLocationsResponse struct {
	Duration string `json:"duration"`

	ActiveLiveLocations []SharedLocationResponseData `json:"active_live_locations"`
}

// Basic response information
type ShowChannelResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`
}

type SingleFollowResponse struct {
	Duration string `json:"duration"`

	Follow FollowResponse `json:"follow"`
}

type SortParam struct {
	Direction *int `json:"direction,omitempty"`

	Field *string `json:"field,omitempty"`
}

type SortParamRequest struct {
	// Direction of sorting, 1 for Ascending, -1 for Descending, default is 1
	Direction *int `json:"direction,omitempty"`

	// Name of field to sort by
	Field *string `json:"field,omitempty"`
}

type SpeechSegmentConfig struct {
	MaxSpeechCaptionMs *int `json:"max_speech_caption_ms,omitempty"`

	SilenceDurationMs *int `json:"silence_duration_ms,omitempty"`
}

// Basic response information
type StartCampaignResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Campaign *CampaignResponse `json:"campaign,omitempty"`

	Users *PagerResponse `json:"users,omitempty"`
}

type StartClosedCaptionsResponse struct {
	Duration string `json:"duration"`
}

// StartFrameRecordingResponse is the response payload for the start frame recording endpoint.
type StartFrameRecordingResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`
}

// StartHLSBroadcastingResponse is the payload for starting an HLS broadcasting.
type StartHLSBroadcastingResponse struct {
	Duration string `json:"duration"`

	// the URL of the HLS playlist
	PlaylistUrl string `json:"playlist_url"`
}

// StartRTMPBroadcastsResponse is the payload for starting an RTMP broadcast.
type StartRTMPBroadcastsResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`
}

// StartRecordingResponse is the response payload for the start recording endpoint.
type StartRecordingResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`
}

type StartTranscriptionResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`
}

type StopAllRTMPBroadcastsResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`
}

type StopCampaignRequest struct{}

// Basic response information
type StopClosedCaptionsResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`
}

// Basic response information
type StopFrameRecordingResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`
}

// Basic response information
type StopHLSBroadcastingResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`
}

type StopLiveResponse struct {
	Duration string `json:"duration"`

	Call CallResponse `json:"call"`
}

// Request for stopping RTMP broadcasts
type StopRTMPBroadcastsRequest struct{}

// Basic response information
type StopRTMPBroadcastsResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`
}

// Basic response information
type StopRecordingResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`
}

// Basic response information
type StopTranscriptionResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`
}

type StoriesConfig struct {
	// Behavior when stories expire
	ExpirationBehaviour *string `json:"expiration_behaviour,omitempty"`

	// Whether to skip already watched stories
	SkipWatched *bool `json:"skip_watched,omitempty"`
}

type SubmitActionResponse struct {
	Duration string `json:"duration"`

	Item *ReviewQueueItemResponse `json:"item,omitempty"`
}

type SubscriberAllMetrics struct {
	Audio *SubscriberAudioMetrics `json:"audio,omitempty"`

	RttMs *ActiveCallsLatencyStats `json:"rtt_ms,omitempty"`

	Video *SubscriberVideoMetrics `json:"video,omitempty"`
}

type SubscriberAudioMetrics struct {
	ConcealmentPct *ActiveCallsLatencyStats `json:"concealment_pct,omitempty"`

	JitterMs *ActiveCallsLatencyStats `json:"jitter_ms,omitempty"`

	PacketsLostPct *ActiveCallsLatencyStats `json:"packets_lost_pct,omitempty"`
}

type SubscriberStatsResponse struct {
	Total int `json:"total"`

	TotalSubscribedDurationSeconds int `json:"total_subscribed_duration_seconds"`

	Unique int `json:"unique"`
}

type SubscriberVideoMetrics struct {
	Fps30 *ActiveCallsFPSStats `json:"fps_30,omitempty"`

	JitterMs *ActiveCallsLatencyStats `json:"jitter_ms,omitempty"`

	PacketsLostPct *ActiveCallsLatencyStats `json:"packets_lost_pct,omitempty"`
}

type SubscribersMetrics struct {
	All *SubscriberAllMetrics `json:"all,omitempty"`
}

type TargetResolution struct {
	Bitrate int `json:"bitrate"`

	Height int `json:"height"`

	Width int `json:"width"`
}

type TextContentParameters struct {
	ContainsUrl *bool `json:"contains_url,omitempty"`

	Severity *string `json:"severity,omitempty"`

	BlocklistMatch []string `json:"blocklist_match,omitempty"`

	HarmLabels []string `json:"harm_labels,omitempty"`

	LlmHarmLabels map[string]string `json:"llm_harm_labels,omitempty"`
}

type TextRuleParameters struct {
	ContainsUrl *bool `json:"contains_url,omitempty"`

	Severity *string `json:"severity,omitempty"`

	Threshold *int `json:"threshold,omitempty"`

	TimeWindow *string `json:"time_window,omitempty"`

	BlocklistMatch []string `json:"blocklist_match,omitempty"`

	HarmLabels []string `json:"harm_labels,omitempty"`

	LlmHarmLabels map[string]string `json:"llm_harm_labels,omitempty"`
}

// Represents a user that is participating in a thread.
type ThreadParticipant struct {
	AppPk int `json:"app_pk"`

	ChannelCid string `json:"channel_cid"`

	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	LastReadAt Timestamp `json:"last_read_at"`

	Custom map[string]any `json:"custom"`

	LastThreadMessageAt *Timestamp `json:"last_thread_message_at,omitempty"`

	// Left Thread At is the time when the user left the thread
	LeftThreadAt *Timestamp `json:"left_thread_at,omitempty"`

	// Thead ID is unique string identifier of the thread
	ThreadID *string `json:"thread_id,omitempty"`

	// User ID is unique string identifier of the user
	UserID *string `json:"user_id,omitempty"`

	User *UserResponse `json:"user,omitempty"`
}

type ThreadResponse struct {
	// Active Participant Count
	ActiveParticipantCount int `json:"active_participant_count"`

	// Channel CID
	ChannelCid string `json:"channel_cid"`

	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	// Created By User ID
	CreatedByUserID string `json:"created_by_user_id"`

	// Parent Message ID
	ParentMessageID string `json:"parent_message_id"`

	// Participant Count
	ParticipantCount int `json:"participant_count"`

	// Title
	Title string `json:"title"`

	// Date/time of the last update
	UpdatedAt Timestamp `json:"updated_at"`

	// Custom data for this object
	Custom map[string]any `json:"custom"`

	// Deleted At
	DeletedAt *Timestamp `json:"deleted_at,omitempty"`

	// Last Message At
	LastMessageAt *Timestamp `json:"last_message_at,omitempty"`

	// Reply Count
	ReplyCount *int `json:"reply_count,omitempty"`

	// Thread Participants
	ThreadParticipants []ThreadParticipant `json:"thread_participants,omitempty"`

	Channel *ChannelResponse `json:"channel,omitempty"`

	CreatedBy *UserResponse `json:"created_by,omitempty"`

	ParentMessage *MessageResponse `json:"parent_message,omitempty"`
}

type ThreadStateResponse struct {
	// Active Participant Count
	ActiveParticipantCount int `json:"active_participant_count"`

	// Channel CID
	ChannelCid string `json:"channel_cid"`

	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	// Created By User ID
	CreatedByUserID string `json:"created_by_user_id"`

	// Parent Message ID
	ParentMessageID string `json:"parent_message_id"`

	// Participant Count
	ParticipantCount int `json:"participant_count"`

	// Title
	Title string `json:"title"`

	// Date/time of the last update
	UpdatedAt Timestamp `json:"updated_at"`

	LatestReplies []MessageResponse `json:"latest_replies"`

	// Custom data for this object
	Custom map[string]any `json:"custom"`

	// Deleted At
	DeletedAt *Timestamp `json:"deleted_at,omitempty"`

	// Last Message At
	LastMessageAt *Timestamp `json:"last_message_at,omitempty"`

	// Reply Count
	ReplyCount *int `json:"reply_count,omitempty"`

	Read []ReadStateResponse `json:"read,omitempty"`

	// Thread Participants
	ThreadParticipants []ThreadParticipant `json:"thread_participants,omitempty"`

	Channel *ChannelResponse `json:"channel,omitempty"`

	CreatedBy *UserResponse `json:"created_by,omitempty"`

	Draft *DraftResponse `json:"draft,omitempty"`

	ParentMessage *MessageResponse `json:"parent_message,omitempty"`
}

type ThreadUpdatedEvent struct {
	ChannelID string `json:"channel_id"`

	ChannelType string `json:"channel_type"`

	Cid string `json:"cid"`

	CreatedAt Timestamp `json:"created_at"`

	Type string `json:"type"`

	Thread *ThreadResponse `json:"thread,omitempty"`

	User *User `json:"user,omitempty"`
}

func (*ThreadUpdatedEvent) GetEventType() string {
	return "thread.updated"
}

// A comment with an optional, depth‑limited slice of nested replies.
type ThreadedCommentResponse struct {
	ConfidenceScore float64 `json:"confidence_score"`

	CreatedAt Timestamp `json:"created_at"`

	DownvoteCount int `json:"downvote_count"`

	ID string `json:"id"`

	ObjectID string `json:"object_id"`

	ObjectType string `json:"object_type"`

	ReactionCount int `json:"reaction_count"`

	ReplyCount int `json:"reply_count"`

	Score int `json:"score"`

	Status string `json:"status"`

	UpdatedAt Timestamp `json:"updated_at"`

	UpvoteCount int `json:"upvote_count"`

	MentionedUsers []UserResponse `json:"mentioned_users"`

	OwnReactions []FeedsReactionResponse `json:"own_reactions"`

	User UserResponse `json:"user"`

	ControversyScore *float64 `json:"controversy_score,omitempty"`

	DeletedAt *Timestamp `json:"deleted_at,omitempty"`

	ParentID *string `json:"parent_id,omitempty"`

	Text *string `json:"text,omitempty"`

	Attachments []Attachment `json:"attachments,omitempty"`

	LatestReactions []FeedsReactionResponse `json:"latest_reactions,omitempty"`

	// Slice of nested comments (may be empty).
	Replies []ThreadedCommentResponse `json:"replies,omitempty"`

	Custom map[string]any `json:"custom,omitempty"`

	Meta *RepliesMeta `json:"meta,omitempty"`

	Moderation *ModerationV2Response `json:"moderation,omitempty"`

	ReactionGroups map[string]*ReactionGroupResponse `json:"reaction_groups,omitempty"`
}

// Sets thresholds for AI moderation
type Thresholds struct {
	Explicit *LabelThresholds `json:"explicit,omitempty"`

	Spam *LabelThresholds `json:"spam,omitempty"`

	Toxic *LabelThresholds `json:"toxic,omitempty"`
}

type ThumbnailResponse struct {
	ImageUrl string `json:"image_url"`
}

type ThumbnailsSettings struct {
	Enabled bool `json:"enabled"`
}

type ThumbnailsSettingsRequest struct {
	Enabled *bool `json:"enabled,omitempty"`
}

type ThumbnailsSettingsResponse struct {
	Enabled bool `json:"enabled"`
}

type Time struct{}

type TrackStatsResponse struct {
	DurationSeconds int `json:"duration_seconds"`

	TrackType string `json:"track_type"`
}

type TranscriptionSettings struct {
	ClosedCaptionMode string `json:"closed_caption_mode"`

	// The language used in this call as a two letter code
	Language string `json:"language"`

	Mode string `json:"mode"`

	SpeechSegmentConfig *SpeechSegmentConfig `json:"speech_segment_config,omitempty"`

	Translation *TranslationSettings `json:"translation,omitempty"`
}

type TranscriptionSettingsRequest struct {
	ClosedCaptionMode *string `json:"closed_caption_mode,omitempty"`

	Language *string `json:"language,omitempty"`

	Mode *string `json:"mode,omitempty"`

	SpeechSegmentConfig *SpeechSegmentConfig `json:"speech_segment_config,omitempty"`

	Translation *TranslationSettings `json:"translation,omitempty"`
}

type TranscriptionSettingsResponse struct {
	ClosedCaptionMode string `json:"closed_caption_mode"`

	Language string `json:"language"`

	Mode string `json:"mode"`

	SpeechSegmentConfig *SpeechSegmentConfig `json:"speech_segment_config,omitempty"`

	Translation *TranslationSettings `json:"translation,omitempty"`
}

type TranslationSettings struct {
	Enabled bool `json:"enabled"`

	Languages []string `json:"languages"`
}

type TruncateChannelResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Channel *ChannelResponse `json:"channel,omitempty"`

	Message *MessageResponse `json:"message,omitempty"`
}

type TypingIndicators struct {
	Enabled bool `json:"enabled"`
}

type TypingIndicatorsResponse struct {
	Enabled *bool `json:"enabled,omitempty"`
}

type UnbanActionRequest struct{}

type UnbanResponse struct {
	Duration string `json:"duration"`
}

type UnblockActionRequest struct{}

// UnblockUserResponse is the payload for unblocking a user.
type UnblockUserResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`
}

type UnblockUsersResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`
}

// This event is sent when a user is unblocked on a call,
// this can be useful to notify the user that they can now join the call again
type UnblockedUserEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	User UserResponse `json:"user"`

	// The type of event: "call.unblocked_user" in this case
	Type string `json:"type"`
}

func (*UnblockedUserEvent) GetEventType() string {
	return "call.unblocked_user"
}

type UnfollowBatchResponse struct {
	Duration string `json:"duration"`

	// List of follow relationships that were removed
	Follows []FollowResponse `json:"follows"`
}

type UnfollowResponse struct {
	Duration string `json:"duration"`

	Follow FollowResponse `json:"follow"`
}

// Basic response information
type UnmuteResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	NonExistingUsers []string `json:"non_existing_users,omitempty"`
}

type UnpinActivityResponse struct {
	Duration string `json:"duration"`

	// Fully qualified ID of the feed the activity was unpinned from
	Feed string `json:"feed"`

	// ID of the user who unpinned the activity
	UserID string `json:"user_id"`

	Activity ActivityResponse `json:"activity"`
}

// UnpinRequest is the payload for unpinning a message.
type UnpinRequest struct {
	// the session ID of the user who pinned the message
	SessionID string `json:"session_id"`

	// the user ID of the user who pinned the message
	UserID string `json:"user_id"`
}

// UnpinResponse is the payload for unpinning a message.
type UnpinResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`
}

// Basic response information
type UnreadCountsBatchResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	CountsByUser map[string]*UnreadCountsResponse `json:"counts_by_user"`
}

type UnreadCountsChannel struct {
	ChannelID string `json:"channel_id"`

	LastRead Timestamp `json:"last_read"`

	UnreadCount int `json:"unread_count"`
}

type UnreadCountsChannelType struct {
	ChannelCount int `json:"channel_count"`

	ChannelType string `json:"channel_type"`

	UnreadCount int `json:"unread_count"`
}

type UnreadCountsResponse struct {
	TotalUnreadCount int `json:"total_unread_count"`

	TotalUnreadThreadsCount int `json:"total_unread_threads_count"`

	ChannelType []UnreadCountsChannelType `json:"channel_type"`

	Channels []UnreadCountsChannel `json:"channels"`

	Threads []UnreadCountsThread `json:"threads"`

	TotalUnreadCountByTeam map[string]int `json:"total_unread_count_by_team,omitempty"`
}

type UnreadCountsThread struct {
	LastRead Timestamp `json:"last_read"`

	LastReadMessageID string `json:"last_read_message_id"`

	ParentMessageID string `json:"parent_message_id"`

	UnreadCount int `json:"unread_count"`
}

type UpdateActivityPartialResponse struct {
	Duration string `json:"duration"`

	Activity ActivityResponse `json:"activity"`
}

type UpdateActivityResponse struct {
	Duration string `json:"duration"`

	Activity ActivityResponse `json:"activity"`
}

// Basic response information
type UpdateBlockListResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Blocklist *BlockListResponse `json:"blocklist,omitempty"`
}

type UpdateBookmarkFolderResponse struct {
	Duration string `json:"duration"`

	BookmarkFolder BookmarkFolderResponse `json:"bookmark_folder"`
}

type UpdateBookmarkResponse struct {
	Duration string `json:"duration"`

	Bookmark BookmarkResponse `json:"bookmark"`
}

// Basic response information
type UpdateCallMembersResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Members []MemberResponse `json:"members"`
}

// Response for updating a call
type UpdateCallResponse struct {
	Duration string `json:"duration"`

	Members []MemberResponse `json:"members"`

	OwnCapabilities []OwnCapability `json:"own_capabilities"`

	Call CallResponse `json:"call"`
}

// UpdateCallTypeResponse is the payload for updating a call type.
type UpdateCallTypeResponse struct {
	// the time the call type was created
	CreatedAt Timestamp `json:"created_at"`

	Duration string `json:"duration"`

	// the name of the call type
	Name string `json:"name"`

	// the time the call type was last updated
	UpdatedAt Timestamp `json:"updated_at"`

	// the permissions granted to each role
	Grants map[string][]string `json:"grants"`

	NotificationSettings NotificationSettings `json:"notification_settings"`

	Settings CallSettingsResponse `json:"settings"`

	// the external storage for the call type
	ExternalStorage *string `json:"external_storage,omitempty"`
}

type UpdateChannelPartialResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	// List of updated members
	Members []ChannelMemberResponse `json:"members"`

	Channel *ChannelResponse `json:"channel,omitempty"`
}

type UpdateChannelResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	// List of channel members
	Members []ChannelMember `json:"members"`

	Channel *ChannelResponse `json:"channel,omitempty"`

	Message *MessageResponse `json:"message,omitempty"`
}

type UpdateChannelTypeResponse struct {
	Automod string `json:"automod"`

	AutomodBehavior string `json:"automod_behavior"`

	ConnectEvents bool `json:"connect_events"`

	CountMessages bool `json:"count_messages"`

	CreatedAt Timestamp `json:"created_at"`

	CustomEvents bool `json:"custom_events"`

	Duration string `json:"duration"`

	MarkMessagesPending bool `json:"mark_messages_pending"`

	MaxMessageLength int `json:"max_message_length"`

	Mutes bool `json:"mutes"`

	Name string `json:"name"`

	Polls bool `json:"polls"`

	PushNotifications bool `json:"push_notifications"`

	Quotes bool `json:"quotes"`

	Reactions bool `json:"reactions"`

	ReadEvents bool `json:"read_events"`

	Reminders bool `json:"reminders"`

	Replies bool `json:"replies"`

	Search bool `json:"search"`

	SharedLocations bool `json:"shared_locations"`

	SkipLastMsgUpdateForSystemMsgs bool `json:"skip_last_msg_update_for_system_msgs"`

	TypingEvents bool `json:"typing_events"`

	UpdatedAt Timestamp `json:"updated_at"`

	Uploads bool `json:"uploads"`

	UrlEnrichment bool `json:"url_enrichment"`

	UserMessageReminders bool `json:"user_message_reminders"`

	Commands []string `json:"commands"`

	Permissions []PolicyRequest `json:"permissions"`

	Grants map[string][]string `json:"grants"`

	Blocklist *string `json:"blocklist,omitempty"`

	BlocklistBehavior *string `json:"blocklist_behavior,omitempty"`

	PartitionSize *int `json:"partition_size,omitempty"`

	PartitionTtl *string `json:"partition_ttl,omitempty"`

	AllowedFlagReasons []string `json:"allowed_flag_reasons,omitempty"`

	Blocklists []BlockListOptions `json:"blocklists,omitempty"`

	AutomodThresholds *Thresholds `json:"automod_thresholds,omitempty"`
}

type UpdateCommandResponse struct {
	Duration string `json:"duration"`

	Command *Command `json:"command,omitempty"`
}

type UpdateCommentResponse struct {
	Duration string `json:"duration"`

	Comment CommentResponse `json:"comment"`
}

// Basic response information
type UpdateExternalStorageResponse struct {
	Bucket string `json:"bucket"`

	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Name string `json:"name"`

	Path string `json:"path"`

	Type string `json:"type"`
}

type UpdateFeedGroupResponse struct {
	Duration string `json:"duration"`

	FeedGroup FeedGroupResponse `json:"feed_group"`
}

// Basic response information
type UpdateFeedMembersResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Added []FeedMemberResponse `json:"added"`

	RemovedIds []string `json:"removed_ids"`

	Updated []FeedMemberResponse `json:"updated"`
}

type UpdateFeedResponse struct {
	Duration string `json:"duration"`

	Feed FeedResponse `json:"feed"`
}

type UpdateFeedViewResponse struct {
	Duration string `json:"duration"`

	FeedView FeedViewResponse `json:"feed_view"`
}

type UpdateFollowResponse struct {
	Duration string `json:"duration"`

	Follow FollowResponse `json:"follow"`
}

type UpdateMemberPartialResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	ChannelMember *ChannelMemberResponse `json:"channel_member,omitempty"`
}

type UpdateMembershipLevelResponse struct {
	Duration string `json:"duration"`

	MembershipLevel MembershipLevelResponse `json:"membership_level"`
}

type UpdateMessagePartialResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Message *MessageResponse `json:"message,omitempty"`

	// Pending message metadata
	PendingMessageMetadata map[string]string `json:"pending_message_metadata,omitempty"`
}

// Basic response information
type UpdateMessageResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Message MessageResponse `json:"message"`

	PendingMessageMetadata map[string]string `json:"pending_message_metadata,omitempty"`
}

// Basic response information
type UpdateReminderResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Reminder ReminderResponseData `json:"reminder"`
}

type UpdateThreadPartialResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Thread ThreadResponse `json:"thread"`
}

type UpdateUserPartialRequest struct {
	// User ID to update
	ID string `json:"id"`

	Unset []string `json:"unset,omitempty"`

	Set map[string]any `json:"set,omitempty"`
}

// Basic response information
type UpdateUserPermissionsResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`
}

type UpdateUsersResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	MembershipDeletionTaskID string `json:"membership_deletion_task_id"`

	// Object containing users
	Users map[string]FullUserResponse `json:"users"`
}

// This event is sent to notify about permission changes for a user, clients receiving this event should update their UI accordingly
type UpdatedCallPermissionsEvent struct {
	CallCid string `json:"call_cid"`

	CreatedAt Timestamp `json:"created_at"`

	// The capabilities of the current user
	OwnCapabilities []OwnCapability `json:"own_capabilities"`

	User UserResponse `json:"user"`

	// The type of event: "call.permissions_updated" in this case
	Type string `json:"type"`
}

func (*UpdatedCallPermissionsEvent) GetEventType() string {
	return "call.permissions_updated"
}

type UploadChannelFileResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	// URL to the uploaded asset. Should be used to put to `asset_url` attachment field
	File *string `json:"file,omitempty"`

	ModerationAction *string `json:"moderation_action,omitempty"`

	// URL of the file thumbnail for supported file formats. Should be put to `thumb_url` attachment field
	ThumbUrl *string `json:"thumb_url,omitempty"`
}

type UploadChannelRequest struct {
	File *string `json:"file,omitempty"`

	// field with JSON-encoded array of image size configurations
	UploadSizes []ImageSize `json:"upload_sizes,omitempty"`

	User *OnlyUserID `json:"user,omitempty"`
}

type UploadChannelResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	File *string `json:"file,omitempty"`

	ModerationAction *string `json:"moderation_action,omitempty"`

	ThumbUrl *string `json:"thumb_url,omitempty"`

	// Array of image size configurations
	UploadSizes []ImageSize `json:"upload_sizes,omitempty"`
}

type UpsertActivitiesResponse struct {
	Duration string `json:"duration"`

	// List of created or updated activities
	Activities []ActivityResponse `json:"activities"`
}

type UpsertConfigResponse struct {
	Duration string `json:"duration"`

	Config *ConfigResponse `json:"config,omitempty"`
}

// Basic response information
type UpsertModerationRuleResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Rule *ModerationRuleV2Response `json:"rule,omitempty"`
}

type UpsertModerationTemplateRequest struct {
	// Name of the moderation template
	Name string `json:"name"`

	Config FeedsModerationTemplateConfig `json:"config"`
}

type UpsertModerationTemplateResponse struct {
	// When the template was created
	CreatedAt Timestamp `json:"created_at"`

	Duration string `json:"duration"`

	// Name of the moderation template
	Name string `json:"name"`

	// When the template was last updated
	UpdatedAt Timestamp `json:"updated_at"`

	Config *FeedsModerationTemplateConfig `json:"config,omitempty"`
}

type UpsertPushPreferencesRequest struct {
	// A list of push preferences for channels, calls, or the user.
	Preferences []PushPreferenceInput `json:"preferences"`
}

type UpsertPushPreferencesResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	// The channel specific push notification preferences, only returned for channels you've edited.
	UserChannelPreferences map[string]map[string]*ChannelPushPreferences `json:"user_channel_preferences"`

	// The user preferences, always returned regardless if you edited it
	UserPreferences map[string]*PushPreferences `json:"user_preferences"`
}

// Basic response information
type UpsertPushProviderResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	PushProvider PushProviderResponse `json:"push_provider"`
}

// Basic response information
type UpsertPushTemplateResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	Template *PushTemplate `json:"template,omitempty"`
}

type User struct {
	Banned bool `json:"banned"`

	ID string `json:"id"`

	Online bool `json:"online"`

	Role string `json:"role"`

	Custom map[string]any `json:"custom"`

	TeamsRole map[string]string `json:"teams_role"`

	AvgResponseTime *int `json:"avg_response_time,omitempty"`

	BanExpires *Timestamp `json:"ban_expires,omitempty"`

	CreatedAt *Timestamp `json:"created_at,omitempty"`

	DeactivatedAt *Timestamp `json:"deactivated_at,omitempty"`

	DeletedAt *Timestamp `json:"deleted_at,omitempty"`

	Invisible *bool `json:"invisible,omitempty"`

	Language *string `json:"language,omitempty"`

	LastActive *Timestamp `json:"last_active,omitempty"`

	LastEngagedAt *Timestamp `json:"last_engaged_at,omitempty"`

	RevokeTokensIssuedBefore *Timestamp `json:"revoke_tokens_issued_before,omitempty"`

	UpdatedAt *Timestamp `json:"updated_at,omitempty"`

	Teams []string `json:"teams,omitempty"`

	PrivacySettings *PrivacySettings `json:"privacy_settings,omitempty"`
}

type UserBannedEvent struct {
	ChannelID string `json:"channel_id"`

	ChannelType string `json:"channel_type"`

	Cid string `json:"cid"`

	CreatedAt Timestamp `json:"created_at"`

	Shadow bool `json:"shadow"`

	CreatedBy User `json:"created_by"`

	Type string `json:"type"`

	Expiration *Timestamp `json:"expiration,omitempty"`

	Reason *string `json:"reason,omitempty"`

	Team *string `json:"team,omitempty"`

	User *User `json:"user,omitempty"`
}

func (*UserBannedEvent) GetEventType() string {
	return "user.banned"
}

type UserCreatedWithinParameters struct {
	MaxAge *string `json:"max_age,omitempty"`
}

type UserCustomEventRequest struct {
	Type string `json:"type"`

	Custom map[string]any `json:"custom,omitempty"`
}

type UserCustomPropertyParameters struct {
	Operator *string `json:"operator,omitempty"`

	PropertyKey *string `json:"property_key,omitempty"`
}

type UserDeactivatedEvent struct {
	CreatedAt Timestamp `json:"created_at"`

	CreatedBy User `json:"created_by"`

	Type string `json:"type"`

	User *User `json:"user,omitempty"`
}

func (*UserDeactivatedEvent) GetEventType() string {
	return "user.deactivated"
}

type UserDeletedEvent struct {
	CreatedAt Timestamp `json:"created_at"`

	DeleteConversationChannels bool `json:"delete_conversation_channels"`

	HardDelete bool `json:"hard_delete"`

	MarkMessagesDeleted bool `json:"mark_messages_deleted"`

	Type string `json:"type"`

	User *User `json:"user,omitempty"`
}

func (*UserDeletedEvent) GetEventType() string {
	return "user.deleted"
}

type UserFeedbackReport struct {
	UnreportedCount int `json:"unreported_count"`

	CountByRating map[string]int `json:"count_by_rating"`
}

type UserFeedbackReportResponse struct {
	Daily []DailyAggregateUserFeedbackReportResponse `json:"daily"`
}

type UserFeedbackResponse struct {
	Cid string `json:"cid"`

	Rating int `json:"rating"`

	Reason string `json:"reason"`

	Sdk string `json:"sdk"`

	SdkVersion string `json:"sdk_version"`

	SessionID string `json:"session_id"`

	UserID string `json:"user_id"`

	Platform PlatformDataResponse `json:"platform"`

	Custom map[string]any `json:"custom,omitempty"`
}

type UserFlaggedEvent struct {
	CreatedAt Timestamp `json:"created_at"`

	Type string `json:"type"`

	TargetUser *string `json:"target_user,omitempty"`

	TargetUsers []string `json:"target_users,omitempty"`

	User *User `json:"user,omitempty"`
}

func (*UserFlaggedEvent) GetEventType() string {
	return "user.flagged"
}

// This event is sent when a user's message get deleted. The event contains information about the user whose messages got deleted.
type UserMessagesDeletedEvent struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	Custom map[string]any `json:"custom"`

	User UserResponseCommonFields `json:"user"`

	// The type of event: "user.messages.deleted" in this case
	Type string `json:"type"`

	// The ID of the channel where the target user's messages were deleted
	ChannelID *string `json:"channel_id,omitempty"`

	ChannelMemberCount *int `json:"channel_member_count,omitempty"`

	ChannelMessageCount *int `json:"channel_message_count,omitempty"`

	// The type of the channel where the target user's messages were deleted
	ChannelType *string `json:"channel_type,omitempty"`

	// The CID of the channel where the target user's messages were deleted
	Cid *string `json:"cid,omitempty"`

	// Whether Messages were hard deleted
	HardDelete *bool `json:"hard_delete,omitempty"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`

	// The team of the channel where the target user's messages were deleted
	Team *string `json:"team,omitempty"`

	ChannelCustom map[string]any `json:"channel_custom,omitempty"`
}

func (*UserMessagesDeletedEvent) GetEventType() string {
	return "user.messages.deleted"
}

type UserMute struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	// Date/time of the last update
	UpdatedAt Timestamp `json:"updated_at"`

	// Date/time of mute expiration
	Expires *Timestamp `json:"expires,omitempty"`

	Target *User `json:"target,omitempty"`

	User *User `json:"user,omitempty"`
}

type UserMuteResponse struct {
	CreatedAt Timestamp `json:"created_at"`

	UpdatedAt Timestamp `json:"updated_at"`

	Expires *Timestamp `json:"expires,omitempty"`

	Target *UserResponse `json:"target,omitempty"`

	User *UserResponse `json:"user,omitempty"`
}

type UserMutedEvent struct {
	CreatedAt Timestamp `json:"created_at"`

	Type string `json:"type"`

	TargetUser *string `json:"target_user,omitempty"`

	TargetUsers []string `json:"target_users,omitempty"`

	User *User `json:"user,omitempty"`
}

func (*UserMutedEvent) GetEventType() string {
	return "user.muted"
}

type UserRatingReportResponse struct {
	Average float64 `json:"average"`

	Count int `json:"count"`
}

type UserReactivatedEvent struct {
	CreatedAt Timestamp `json:"created_at"`

	Type string `json:"type"`

	User *User `json:"user,omitempty"`
}

func (*UserReactivatedEvent) GetEventType() string {
	return "user.reactivated"
}

// User request object
type UserRequest struct {
	// User ID
	ID string `json:"id"`

	// User's profile image URL
	Image *string `json:"image,omitempty"`

	Invisible *bool `json:"invisible,omitempty"`

	Language *string `json:"language,omitempty"`

	// Optional name of user
	Name *string `json:"name,omitempty"`

	// User's global role
	Role *string `json:"role,omitempty"`

	// List of teams the user belongs to
	Teams []string `json:"teams,omitempty"`

	// Custom user data
	Custom map[string]any `json:"custom,omitempty"`

	PrivacySettings *PrivacySettingsResponse `json:"privacy_settings,omitempty"`

	// Map of team-specific roles for the user
	TeamsRole map[string]string `json:"teams_role,omitempty"`
}

// User response object
type UserResponse struct {
	// Whether a user is banned or not
	Banned bool `json:"banned"`

	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	// Unique user identifier
	ID string `json:"id"`

	Invisible bool `json:"invisible"`

	// Preferred language of a user
	Language string `json:"language"`

	// Whether a user online or not
	Online bool `json:"online"`

	// Determines the set of user permissions
	Role string `json:"role"`

	// Whether a user is shadow banned
	ShadowBanned bool `json:"shadow_banned"`

	// Date/time of the last update
	UpdatedAt Timestamp `json:"updated_at"`

	BlockedUserIds []string `json:"blocked_user_ids"`

	// List of teams user is a part of
	Teams []string `json:"teams"`

	// Custom data for this object
	Custom map[string]any `json:"custom"`

	AvgResponseTime *int `json:"avg_response_time,omitempty"`

	// Date when ban expires
	BanExpires *Timestamp `json:"ban_expires,omitempty"`

	// Date of deactivation
	DeactivatedAt *Timestamp `json:"deactivated_at,omitempty"`

	// Date/time of deletion
	DeletedAt *Timestamp `json:"deleted_at,omitempty"`

	Image *string `json:"image,omitempty"`

	// Date of last activity
	LastActive *Timestamp `json:"last_active,omitempty"`

	// Optional name of user
	Name *string `json:"name,omitempty"`

	// Revocation date for tokens
	RevokeTokensIssuedBefore *Timestamp `json:"revoke_tokens_issued_before,omitempty"`

	// List of devices user is using
	Devices []DeviceResponse `json:"devices,omitempty"`

	PrivacySettings *PrivacySettingsResponse `json:"privacy_settings,omitempty"`

	PushNotifications *PushNotificationSettingsResponse `json:"push_notifications,omitempty"`

	TeamsRole map[string]string `json:"teams_role,omitempty"`
}

type UserResponseCommonFields struct {
	Banned bool `json:"banned"`

	CreatedAt Timestamp `json:"created_at"`

	ID string `json:"id"`

	Language string `json:"language"`

	Online bool `json:"online"`

	Role string `json:"role"`

	UpdatedAt Timestamp `json:"updated_at"`

	BlockedUserIds []string `json:"blocked_user_ids"`

	Teams []string `json:"teams"`

	Custom map[string]any `json:"custom"`

	AvgResponseTime *int `json:"avg_response_time,omitempty"`

	DeactivatedAt *Timestamp `json:"deactivated_at,omitempty"`

	DeletedAt *Timestamp `json:"deleted_at,omitempty"`

	Image *string `json:"image,omitempty"`

	LastActive *Timestamp `json:"last_active,omitempty"`

	Name *string `json:"name,omitempty"`

	RevokeTokensIssuedBefore *Timestamp `json:"revoke_tokens_issued_before,omitempty"`

	TeamsRole map[string]string `json:"teams_role,omitempty"`
}

type UserResponsePrivacyFields struct {
	Banned bool `json:"banned"`

	CreatedAt Timestamp `json:"created_at"`

	ID string `json:"id"`

	Language string `json:"language"`

	Online bool `json:"online"`

	Role string `json:"role"`

	UpdatedAt Timestamp `json:"updated_at"`

	BlockedUserIds []string `json:"blocked_user_ids"`

	Teams []string `json:"teams"`

	Custom map[string]any `json:"custom"`

	AvgResponseTime *int `json:"avg_response_time,omitempty"`

	DeactivatedAt *Timestamp `json:"deactivated_at,omitempty"`

	DeletedAt *Timestamp `json:"deleted_at,omitempty"`

	Image *string `json:"image,omitempty"`

	Invisible *bool `json:"invisible,omitempty"`

	LastActive *Timestamp `json:"last_active,omitempty"`

	Name *string `json:"name,omitempty"`

	RevokeTokensIssuedBefore *Timestamp `json:"revoke_tokens_issued_before,omitempty"`

	PrivacySettings *PrivacySettingsResponse `json:"privacy_settings,omitempty"`

	TeamsRole map[string]string `json:"teams_role,omitempty"`
}

type UserRuleParameters struct {
	MaxAge *string `json:"max_age,omitempty"`
}

type UserUnbannedEvent struct {
	ChannelID string `json:"channel_id"`

	ChannelType string `json:"channel_type"`

	Cid string `json:"cid"`

	CreatedAt Timestamp `json:"created_at"`

	Shadow bool `json:"shadow"`

	Type string `json:"type"`

	Team *string `json:"team,omitempty"`

	User *User `json:"user,omitempty"`
}

func (*UserUnbannedEvent) GetEventType() string {
	return "user.unbanned"
}

type UserUnmutedEvent struct {
	CreatedAt Timestamp `json:"created_at"`

	Type string `json:"type"`

	TargetUser *string `json:"target_user,omitempty"`

	TargetUsers []string `json:"target_users,omitempty"`

	User *User `json:"user,omitempty"`
}

func (*UserUnmutedEvent) GetEventType() string {
	return "user.unmuted"
}

type UserUnreadReminderEvent struct {
	CreatedAt Timestamp `json:"created_at"`

	Channels map[string]*ChannelMessages `json:"channels"`

	Type string `json:"type"`

	User *User `json:"user,omitempty"`
}

func (*UserUnreadReminderEvent) GetEventType() string {
	return "user.unread_message_reminder"
}

// This event is sent when a user gets updated. The event contains information about the updated user.
type UserUpdatedEvent struct {
	// Date/time of creation
	CreatedAt Timestamp `json:"created_at"`

	Custom map[string]any `json:"custom"`

	User UserResponsePrivacyFields `json:"user"`

	// The type of event: "user.updated" in this case
	Type string `json:"type"`

	ReceivedAt *Timestamp `json:"received_at,omitempty"`
}

func (*UserUpdatedEvent) GetEventType() string {
	return "user.updated"
}

type VelocityFilterConfig struct {
	AdvancedFilters *bool `json:"advanced_filters,omitempty"`

	Async *bool `json:"async,omitempty"`

	CascadingActions *bool `json:"cascading_actions,omitempty"`

	CidsPerUser *int `json:"cids_per_user,omitempty"`

	Enabled *bool `json:"enabled,omitempty"`

	FirstMessageOnly *bool `json:"first_message_only,omitempty"`

	Rules []VelocityFilterConfigRule `json:"rules,omitempty"`
}

type VelocityFilterConfigRule struct {
	Action string `json:"action"`

	BanDuration *int `json:"ban_duration,omitempty"`

	CascadingAction *string `json:"cascading_action,omitempty"`

	CascadingThreshold *int `json:"cascading_threshold,omitempty"`

	CheckMessageContext *bool `json:"check_message_context,omitempty"`

	FastSpamThreshold *int `json:"fast_spam_threshold,omitempty"`

	FastSpamTtl *int `json:"fast_spam_ttl,omitempty"`

	IpBan *bool `json:"ip_ban,omitempty"`

	ProbationPeriod *int `json:"probation_period,omitempty"`

	ShadowBan *bool `json:"shadow_ban,omitempty"`

	SlowSpamBanDuration *int `json:"slow_spam_ban_duration,omitempty"`

	SlowSpamThreshold *int `json:"slow_spam_threshold,omitempty"`

	SlowSpamTtl *int `json:"slow_spam_ttl,omitempty"`

	UrlOnly *bool `json:"url_only,omitempty"`
}

type VideoCallRuleConfig struct {
	FlagAllLabels *bool `json:"flag_all_labels,omitempty"`

	FlaggedLabels []string `json:"flagged_labels,omitempty"`

	Rules []HarmConfig `json:"rules,omitempty"`
}

type VideoContentParameters struct {
	HarmLabels []string `json:"harm_labels,omitempty"`
}

type VideoEndCallRequest struct{}

type VideoKickUserRequest struct{}

type VideoReactionOverTimeResponse struct {
	ByMinute []CountByMinuteResponse `json:"by_minute,omitempty"`
}

type VideoReactionsResponse struct {
	Reaction string `json:"reaction"`

	CountOverTime *VideoReactionOverTimeResponse `json:"count_over_time,omitempty"`
}

type VideoRuleParameters struct {
	Threshold *int `json:"threshold,omitempty"`

	TimeWindow *string `json:"time_window,omitempty"`

	HarmLabels []string `json:"harm_labels,omitempty"`
}

type VideoSettings struct {
	AccessRequestEnabled bool `json:"access_request_enabled"`

	CameraDefaultOn bool `json:"camera_default_on"`

	CameraFacing string `json:"camera_facing"`

	Enabled bool `json:"enabled"`

	TargetResolution TargetResolution `json:"target_resolution"`
}

type VideoSettingsRequest struct {
	AccessRequestEnabled *bool `json:"access_request_enabled,omitempty"`

	CameraDefaultOn *bool `json:"camera_default_on,omitempty"`

	CameraFacing *string `json:"camera_facing,omitempty"`

	Enabled *bool `json:"enabled,omitempty"`

	TargetResolution *TargetResolution `json:"target_resolution,omitempty"`
}

type VideoSettingsResponse struct {
	AccessRequestEnabled bool `json:"access_request_enabled"`

	CameraDefaultOn bool `json:"camera_default_on"`

	CameraFacing string `json:"camera_facing"`

	Enabled bool `json:"enabled"`

	TargetResolution TargetResolution `json:"target_resolution"`
}

type VoteData struct {
	AnswerText *string `json:"answer_text,omitempty"`

	OptionID *string `json:"option_id,omitempty"`
}

type WHIPIngress struct {
	// URL for a new whip input, every time a new link is created
	Address string `json:"address"`
}

// Represents an BaseEvent that happened in Stream Chat
type WSEvent struct {
	CreatedAt Timestamp `json:"created_at"`

	Type string `json:"type"`

	Custom map[string]any `json:"custom"`

	Automoderation *bool `json:"automoderation,omitempty"`

	ChannelID *string `json:"channel_id,omitempty"`

	ChannelLastMessageAt *Timestamp `json:"channel_last_message_at,omitempty"`

	ChannelType *string `json:"channel_type,omitempty"`

	Cid *string `json:"cid,omitempty"`

	ConnectionID *string `json:"connection_id,omitempty"`

	ParentID *string `json:"parent_id,omitempty"`

	Reason *string `json:"reason,omitempty"`

	Team *string `json:"team,omitempty"`

	ThreadID *string `json:"thread_id,omitempty"`

	UserID *string `json:"user_id,omitempty"`

	WatcherCount *int `json:"watcher_count,omitempty"`

	AutomoderationScores *ModerationResponse `json:"automoderation_scores,omitempty"`

	Channel *ChannelResponse `json:"channel,omitempty"`

	CreatedBy *UserResponse `json:"created_by,omitempty"`

	Me *OwnUserResponse `json:"me,omitempty"`

	Member *ChannelMember `json:"member,omitempty"`

	Message *MessageResponse `json:"message,omitempty"`

	MessageUpdate *MessageUpdate `json:"message_update,omitempty"`

	Poll *PollResponseData `json:"poll,omitempty"`

	PollVote *PollVoteResponseData `json:"poll_vote,omitempty"`

	Reaction *ReactionResponse `json:"reaction,omitempty"`

	Thread *ThreadResponse `json:"thread,omitempty"`

	User *UserResponse `json:"user,omitempty"`
}

// The discriminator object for all webhook events, it maps events' payload to the final type
type WebhookEvent struct {
	Type string `json:"type"`
}

// Basic response information
type WrappedUnreadCountsResponse struct {
	// Duration of the request in milliseconds
	Duration string `json:"duration"`

	TotalUnreadCount int `json:"total_unread_count"`

	TotalUnreadThreadsCount int `json:"total_unread_threads_count"`

	ChannelType []UnreadCountsChannelType `json:"channel_type"`

	Channels []UnreadCountsChannel `json:"channels"`

	Threads []UnreadCountsThread `json:"threads"`

	TotalUnreadCountByTeam map[string]int `json:"total_unread_count_by_team,omitempty"`
}

type XiaomiConfig struct {
	Disabled *bool `json:"Disabled,omitempty"`

	PackageName *string `json:"package_name,omitempty"`

	Secret *string `json:"secret,omitempty"`
}

type XiaomiConfigFields struct {
	Enabled bool `json:"enabled"`

	PackageName *string `json:"package_name,omitempty"`

	Secret *string `json:"secret,omitempty"`
}
