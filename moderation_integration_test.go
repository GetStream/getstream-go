// Code generated by GetStream internal OpenAPI code generator. DO NOT EDIT.
package getstream_test

import (
	"context"
	"testing"

	"github.com/GetStream/getstream-go/v3"
	"github.com/stretchr/testify/require"
)

func TestModerationBanWithReason(t *testing.T) {
	client, err := getstream.NewClient("key", "secret", getstream.WithHTTPClient(&StubHTTPClient{}))
	require.NoError(t, err)

	// snippet-start: BanWithReason
	request := &getstream.BanRequest{
		TargetUserID: "user123",
		Reason:       getstream.PtrTo("spam"),
		Timeout:      getstream.PtrTo(60), // 60 minutes
		BannedByID:   getstream.PtrTo("moderator456"),
	}

	_, err = client.Moderation().Ban(context.Background(), request)
	// snippet-stop: BanWithReason
	require.NoError(t, err)
}

func TestModerationBanFromChannel(t *testing.T) {
	client, err := getstream.NewClient("key", "secret", getstream.WithHTTPClient(&StubHTTPClient{}))
	require.NoError(t, err)

	// snippet-start: BanFromChannel
	request := &getstream.BanRequest{
		TargetUserID: "user123",
		ChannelCid:   getstream.PtrTo("messaging:general"),
		Reason:       getstream.PtrTo("inappropriate content"),
		BannedByID:   getstream.PtrTo("moderator456"),
	}

	_, err = client.Moderation().Ban(context.Background(), request)
	// snippet-stop: BanFromChannel
	require.NoError(t, err)
}

func TestModerationMuteUser(t *testing.T) {
	client, err := getstream.NewClient("key", "secret", getstream.WithHTTPClient(&StubHTTPClient{}))
	require.NoError(t, err)

	// snippet-start: MuteUser
	request := &getstream.MuteRequest{
		TargetIds: []string{"user123", "user456"},
		Timeout:   getstream.PtrTo(30), // 30 minutes
		UserID:    getstream.PtrTo("moderator789"),
	}

	_, err = client.Moderation().Mute(context.Background(), request)
	// snippet-stop: MuteUser
	require.NoError(t, err)
}

func TestModerationFlagMessage(t *testing.T) {
	client, err := getstream.NewClient("key", "secret", getstream.WithHTTPClient(&StubHTTPClient{}))
	require.NoError(t, err)

	// snippet-start: FlagMessage
	request := &getstream.FlagRequest{
		EntityType:      "message",
		EntityID:        "message123",
		EntityCreatorID: getstream.PtrTo("user456"),
		Reason:          getstream.PtrTo("harassment"),
		UserID:          getstream.PtrTo("reporter789"),
	}

	_, err = client.Moderation().Flag(context.Background(), request)
	// snippet-stop: FlagMessage
	require.NoError(t, err)
}

func TestModerationFlagUser(t *testing.T) {
	client, err := getstream.NewClient("key", "secret", getstream.WithHTTPClient(&StubHTTPClient{}))
	require.NoError(t, err)

	// snippet-start: FlagUser
	request := &getstream.FlagRequest{
		EntityType:      "user",
		EntityID:        "user123",
		EntityCreatorID: getstream.PtrTo("user123"),
		Reason:          getstream.PtrTo("spam"),
		UserID:          getstream.PtrTo("reporter456"),
	}

	_, err = client.Moderation().Flag(context.Background(), request)
	// snippet-stop: FlagUser
	require.NoError(t, err)
}

func TestModerationCheckContent(t *testing.T) {
	client, err := getstream.NewClient("key", "secret", getstream.WithHTTPClient(&StubHTTPClient{}))
	require.NoError(t, err)

	// snippet-start: CheckContent
	request := &getstream.CheckRequest{
		EntityType:      "message",
		EntityID:        "message123",
		EntityCreatorID: "user456",
		ModerationPayload: &getstream.ModerationPayload{
			Texts: []string{"This is some content to moderate"},
		},
	}

	_, err = client.Moderation().Check(context.Background(), request)
	// snippet-stop: CheckContent
	require.NoError(t, err)
}

func TestModerationSubmitModerationAction(t *testing.T) {
	client, err := getstream.NewClient("key", "secret", getstream.WithHTTPClient(&StubHTTPClient{}))
	require.NoError(t, err)

	// snippet-start: SubmitModerationAction
	request := &getstream.SubmitActionRequest{
		ItemID:     "review_item_123",
		ActionType: "mark_reviewed",
		UserID:     getstream.PtrTo("moderator456"),
	}

	_, err = client.Moderation().SubmitAction(context.Background(), request)
	// snippet-stop: SubmitModerationAction
	require.NoError(t, err)
}

func TestModerationQueryReviewQueueWithFilter(t *testing.T) {
	client, err := getstream.NewClient("key", "secret", getstream.WithHTTPClient(&StubHTTPClient{}))
	require.NoError(t, err)

	// snippet-start: QueryReviewQueueWithFilter
	request := &getstream.QueryReviewQueueRequest{
		Filter: map[string]interface{}{
			"status": "pending",
		},
		Limit: getstream.PtrTo(25),
	}

	_, err = client.Moderation().QueryReviewQueue(context.Background(), request)
	// snippet-stop: QueryReviewQueueWithFilter
	require.NoError(t, err)
}

func TestModerationCreateConfig(t *testing.T) {
	client, err := getstream.NewClient("key", "secret", getstream.WithHTTPClient(&StubHTTPClient{}))
	require.NoError(t, err)

	// snippet-start: CreateModerationConfig
	request := &getstream.UpsertConfigRequest{
		Key: "chat:messaging:general",
		AutomodToxicityConfig: &getstream.AutomodToxicityConfig{
			Enabled: getstream.PtrTo(true),
			Rules: []getstream.AutomodRule{
				{
					Label:     "toxic",
					Threshold: 0.8,
					Action:    "remove",
				},
			},
		},
	}

	_, err = client.Moderation().UpsertConfig(context.Background(), request)
	// snippet-stop: CreateModerationConfig
	require.NoError(t, err)
}

func TestModerationUnbanUser(t *testing.T) {
	client, err := getstream.NewClient("key", "secret", getstream.WithHTTPClient(&StubHTTPClient{}))
	require.NoError(t, err)

	// snippet-start: UnbanUser
	request := &getstream.UnbanRequest{
		TargetUserID: "user123",
		UnbannedByID: getstream.PtrTo("moderator456"),
	}

	_, err = client.Moderation().Unban(context.Background(), request)
	// snippet-stop: UnbanUser
	require.NoError(t, err)
}
